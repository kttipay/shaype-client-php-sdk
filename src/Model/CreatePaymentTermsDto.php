<?php
/**
 * CreatePaymentTermsDto
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * CreatePaymentTermsDto Class Doc Comment
 *
 * @description Describes how payments for a mandate should happen.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreatePaymentTermsDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CreatePaymentTermsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'amount' => '\Shaype\Client\Model\CurrencyAmount',
        'count_per_period' => 'string',
        'first_payment' => '\Shaype\Client\Model\PaymentDto',
        'frequency' => 'string',
        'last_payment' => '\Shaype\Client\Model\PaymentDto',
        'maximum_amount' => '\Shaype\Client\Model\CurrencyAmount',
        'point_in_time' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'amount' => null,
        'count_per_period' => null,
        'first_payment' => null,
        'frequency' => null,
        'last_payment' => null,
        'maximum_amount' => null,
        'point_in_time' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'count_per_period' => false,
        'first_payment' => false,
        'frequency' => false,
        'last_payment' => false,
        'maximum_amount' => false,
        'point_in_time' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'amount' => 'amount',
        'count_per_period' => 'countPerPeriod',
        'first_payment' => 'firstPayment',
        'frequency' => 'frequency',
        'last_payment' => 'lastPayment',
        'maximum_amount' => 'maximumAmount',
        'point_in_time' => 'pointInTime',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'amount' => 'setAmount',
        'count_per_period' => 'setCountPerPeriod',
        'first_payment' => 'setFirstPayment',
        'frequency' => 'setFrequency',
        'last_payment' => 'setLastPayment',
        'maximum_amount' => 'setMaximumAmount',
        'point_in_time' => 'setPointInTime',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'amount' => 'getAmount',
        'count_per_period' => 'getCountPerPeriod',
        'first_payment' => 'getFirstPayment',
        'frequency' => 'getFrequency',
        'last_payment' => 'getLastPayment',
        'maximum_amount' => 'getMaximumAmount',
        'point_in_time' => 'getPointInTime',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const FREQUENCY_ADHOC = 'ADHOC';
    public const FREQUENCY_DAILY = 'DAILY';
    public const FREQUENCY_FORTNIGHTLY = 'FORTNIGHTLY';
    public const FREQUENCY_INTRA_DAY = 'INTRA_DAY';
    public const FREQUENCY_SEMI_ANNUAL = 'SEMI_ANNUAL';
    public const FREQUENCY_MONTHLY = 'MONTHLY';
    public const FREQUENCY_QUARTERLY = 'QUARTERLY';
    public const FREQUENCY_WEEKLY = 'WEEKLY';
    public const FREQUENCY_ANNUAL = 'ANNUAL';
    public const TYPE_BALLOON = 'BALLOON';
    public const TYPE_FIXED = 'FIXED';
    public const TYPE_USAGE_BASED = 'USAGE_BASED';
    public const TYPE_VARIABLE = 'VARIABLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_ADHOC,
            self::FREQUENCY_DAILY,
            self::FREQUENCY_FORTNIGHTLY,
            self::FREQUENCY_INTRA_DAY,
            self::FREQUENCY_SEMI_ANNUAL,
            self::FREQUENCY_MONTHLY,
            self::FREQUENCY_QUARTERLY,
            self::FREQUENCY_WEEKLY,
            self::FREQUENCY_ANNUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BALLOON,
            self::TYPE_FIXED,
            self::TYPE_USAGE_BASED,
            self::TYPE_VARIABLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('count_per_period', $data ?? [], null);
        $this->setIfExists('first_payment', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('last_payment', $data ?? [], null);
        $this->setIfExists('maximum_amount', $data ?? [], null);
        $this->setIfExists('point_in_time', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($this->container['frequency']) && !in_array($this->container['frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'frequency', must be one of '%s'",
                $this->container['frequency'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['point_in_time']) && (mb_strlen($this->container['point_in_time']) > 2)) {
            $invalidProperties[] = "invalid value for 'point_in_time', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['point_in_time']) && (mb_strlen($this->container['point_in_time']) < 2)) {
            $invalidProperties[] = "invalid value for 'point_in_time', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return \Shaype\Client\Model\CurrencyAmount|null
     */
    public function getAmount(): ?\Shaype\Client\Model\CurrencyAmount
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Shaype\Client\Model\CurrencyAmount|null $amount amount
     *
     * @return $this
     */
    public function setAmount(?\Shaype\Client\Model\CurrencyAmount $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets count_per_period
     *
     * @return string|null
     */
    public function getCountPerPeriod(): ?string
    {
        return $this->container['count_per_period'];
    }

    /**
     * Sets count_per_period
     *
     * @param string|null $count_per_period Qualifies payment count per period
     *
     * @return $this
     */
    public function setCountPerPeriod(?string $count_per_period): static
    {
        if (is_null($count_per_period)) {
            throw new InvalidArgumentException('non-nullable count_per_period cannot be null');
        }
        $this->container['count_per_period'] = $count_per_period;

        return $this;
    }

    /**
     * Gets first_payment
     *
     * @return \Shaype\Client\Model\PaymentDto|null
     */
    public function getFirstPayment(): ?\Shaype\Client\Model\PaymentDto
    {
        return $this->container['first_payment'];
    }

    /**
     * Sets first_payment
     *
     * @param \Shaype\Client\Model\PaymentDto|null $first_payment first_payment
     *
     * @return $this
     */
    public function setFirstPayment(?\Shaype\Client\Model\PaymentDto $first_payment): static
    {
        if (is_null($first_payment)) {
            throw new InvalidArgumentException('non-nullable first_payment cannot be null');
        }
        $this->container['first_payment'] = $first_payment;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string
     */
    public function getFrequency(): string
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string $frequency Payment frequency.  * **ADHOC**: Event takes place on request or as necessary.  * **DAILY**: Event takes place every day.  * **FORTNIGHTLY**: Event takes place every two weeks.  * **INTRA_DAY**: Event takes place several times a day.  * **SEMI_ANNUAL**: Event takes place every six months or two times a year.  * **MONTHLY**: Event takes place every month or once a month.  * **QUARTERLY**: Event takes place every three months or four times a year.  * **WEEKLY**: Event takes place once a week.  * **ANNUAL**: Event takes place every year or once a year.
     *
     * @return $this
     */
    public function setFrequency(string $frequency): static
    {
        if (is_null($frequency)) {
            throw new InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!in_array($frequency, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'frequency', must be one of '%s'",
                    $frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets last_payment
     *
     * @return \Shaype\Client\Model\PaymentDto|null
     */
    public function getLastPayment(): ?\Shaype\Client\Model\PaymentDto
    {
        return $this->container['last_payment'];
    }

    /**
     * Sets last_payment
     *
     * @param \Shaype\Client\Model\PaymentDto|null $last_payment last_payment
     *
     * @return $this
     */
    public function setLastPayment(?\Shaype\Client\Model\PaymentDto $last_payment): static
    {
        if (is_null($last_payment)) {
            throw new InvalidArgumentException('non-nullable last_payment cannot be null');
        }
        $this->container['last_payment'] = $last_payment;

        return $this;
    }

    /**
     * Gets maximum_amount
     *
     * @return \Shaype\Client\Model\CurrencyAmount|null
     */
    public function getMaximumAmount(): ?\Shaype\Client\Model\CurrencyAmount
    {
        return $this->container['maximum_amount'];
    }

    /**
     * Sets maximum_amount
     *
     * @param \Shaype\Client\Model\CurrencyAmount|null $maximum_amount maximum_amount
     *
     * @return $this
     */
    public function setMaximumAmount(?\Shaype\Client\Model\CurrencyAmount $maximum_amount): static
    {
        if (is_null($maximum_amount)) {
            throw new InvalidArgumentException('non-nullable maximum_amount cannot be null');
        }
        $this->container['maximum_amount'] = $maximum_amount;

        return $this;
    }

    /**
     * Gets point_in_time
     *
     * @return string|null
     */
    public function getPointInTime(): ?string
    {
        return $this->container['point_in_time'];
    }

    /**
     * Sets point_in_time
     *
     * @param string|null $point_in_time Qualifies payment frequency
     *
     * @return $this
     */
    public function setPointInTime(?string $point_in_time): static
    {
        if (is_null($point_in_time)) {
            throw new InvalidArgumentException('non-nullable point_in_time cannot be null');
        }
        if ((mb_strlen($point_in_time) > 2)) {
            throw new InvalidArgumentException('invalid length for $point_in_time when calling CreatePaymentTermsDto., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($point_in_time) < 2)) {
            throw new InvalidArgumentException('invalid length for $point_in_time when calling CreatePaymentTermsDto., must be bigger than or equal to 2.');
        }

        $this->container['point_in_time'] = $point_in_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Payment type.  * **BALLOON**: Payment amount is fixed with large final payment amount.  * **FIXED**: Payment amount is fixed.  * **USAGE_BASED**: Payment amount is based on usage.  * **VARIABLE**: Payment amount is variable.
     *
     * @return $this
     */
    public function setType(string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


