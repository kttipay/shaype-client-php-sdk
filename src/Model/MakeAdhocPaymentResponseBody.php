<?php
/**
 * MakeAdhocPaymentResponseBody
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * MakeAdhocPaymentResponseBody Class Doc Comment
 *
 * @description Adhoc payment response.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MakeAdhocPaymentResponseBody implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MakeAdhocPaymentResponseBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'instruction_id' => 'string',
        'mandate_id' => 'string',
        'message' => 'string',
        'status_is_final' => 'bool',
        'transaction_status' => 'string',
        'transaction_status_display' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'instruction_id' => null,
        'mandate_id' => 'uuid',
        'message' => null,
        'status_is_final' => null,
        'transaction_status' => null,
        'transaction_status_display' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'instruction_id' => false,
        'mandate_id' => false,
        'message' => false,
        'status_is_final' => false,
        'transaction_status' => false,
        'transaction_status_display' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'instruction_id' => 'instructionId',
        'mandate_id' => 'mandateId',
        'message' => 'message',
        'status_is_final' => 'statusIsFinal',
        'transaction_status' => 'transactionStatus',
        'transaction_status_display' => 'transactionStatusDisplay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'instruction_id' => 'setInstructionId',
        'mandate_id' => 'setMandateId',
        'message' => 'setMessage',
        'status_is_final' => 'setStatusIsFinal',
        'transaction_status' => 'setTransactionStatus',
        'transaction_status_display' => 'setTransactionStatusDisplay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'instruction_id' => 'getInstructionId',
        'mandate_id' => 'getMandateId',
        'message' => 'getMessage',
        'status_is_final' => 'getStatusIsFinal',
        'transaction_status' => 'getTransactionStatus',
        'transaction_status_display' => 'getTransactionStatusDisplay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_STATUS_RECEIVED = 'RECEIVED';
    public const TRANSACTION_STATUS_UNDELIVERED = 'UNDELIVERED';
    public const TRANSACTION_STATUS_SENT = 'SENT';
    public const TRANSACTION_STATUS_STORE_AND_FORWARD = 'STORE_AND_FORWARD';
    public const TRANSACTION_STATUS_ACCEPTED_FOR_CLEARANCE = 'ACCEPTED_FOR_CLEARANCE';
    public const TRANSACTION_STATUS_SETTLEMENT_ABORTED = 'SETTLEMENT_ABORTED';
    public const TRANSACTION_STATUS_ACCEPTED_AND_SETTLED = 'ACCEPTED_AND_SETTLED';
    public const TRANSACTION_STATUS_REJECTED = 'REJECTED';
    public const TRANSACTION_STATUS_PENDING = 'PENDING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionStatusAllowableValues()
    {
        return [
            self::TRANSACTION_STATUS_RECEIVED,
            self::TRANSACTION_STATUS_UNDELIVERED,
            self::TRANSACTION_STATUS_SENT,
            self::TRANSACTION_STATUS_STORE_AND_FORWARD,
            self::TRANSACTION_STATUS_ACCEPTED_FOR_CLEARANCE,
            self::TRANSACTION_STATUS_SETTLEMENT_ABORTED,
            self::TRANSACTION_STATUS_ACCEPTED_AND_SETTLED,
            self::TRANSACTION_STATUS_REJECTED,
            self::TRANSACTION_STATUS_PENDING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('instruction_id', $data ?? [], null);
        $this->setIfExists('mandate_id', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('status_is_final', $data ?? [], null);
        $this->setIfExists('transaction_status', $data ?? [], null);
        $this->setIfExists('transaction_status_display', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['instruction_id'] === null) {
            $invalidProperties[] = "'instruction_id' can't be null";
        }
        if ($this->container['mandate_id'] === null) {
            $invalidProperties[] = "'mandate_id' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['status_is_final'] === null) {
            $invalidProperties[] = "'status_is_final' can't be null";
        }
        if ($this->container['transaction_status'] === null) {
            $invalidProperties[] = "'transaction_status' can't be null";
        }
        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!is_null($this->container['transaction_status']) && !in_array($this->container['transaction_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_status', must be one of '%s'",
                $this->container['transaction_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction_status_display'] === null) {
            $invalidProperties[] = "'transaction_status_display' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instruction_id
     *
     * @return string
     */
    public function getInstructionId(): string
    {
        return $this->container['instruction_id'];
    }

    /**
     * Sets instruction_id
     *
     * @param string $instruction_id Payment instruction identifier
     *
     * @return $this
     */
    public function setInstructionId(string $instruction_id): static
    {
        if (is_null($instruction_id)) {
            throw new InvalidArgumentException('non-nullable instruction_id cannot be null');
        }
        $this->container['instruction_id'] = $instruction_id;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string
     */
    public function getMandateId(): string
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string $mandate_id Mandate identifier
     *
     * @return $this
     */
    public function setMandateId(string $mandate_id): static
    {
        if (is_null($mandate_id)) {
            throw new InvalidArgumentException('non-nullable mandate_id cannot be null');
        }
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage(): string
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Message indicating operation result
     *
     * @return $this
     */
    public function setMessage(string $message): static
    {
        if (is_null($message)) {
            throw new InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets status_is_final
     *
     * @return bool
     */
    public function getStatusIsFinal(): bool
    {
        return $this->container['status_is_final'];
    }

    /**
     * Sets status_is_final
     *
     * @param bool $status_is_final Transaction status final flag
     *
     * @return $this
     */
    public function setStatusIsFinal(bool $status_is_final): static
    {
        if (is_null($status_is_final)) {
            throw new InvalidArgumentException('non-nullable status_is_final cannot be null');
        }
        $this->container['status_is_final'] = $status_is_final;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus(): string
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status Transaction Status * **RECEIVED**: Message has been received, no further update on status yet. Please continue to check for updates. * **UNDELIVERED**: Message could not be delivered to the PayTo rails (PAG). Client should retry initiation. * **SENT**: Message has been sent, no acknowledgement yet received. Please continue to check for updates. * **STORE_AND_FORWARD**: Target institution is not available, but message will be relayed when they are back online. Please continue to check for updates. * **ACCEPTED_FOR_CLEARANCE**: Payment is accepted but settlement not initiated. Please continue to check for updates. * **SETTLEMENT_ABORTED**: Settlement could not be completed. A retry attempt will be made on behalf of the client. Please continue to check for updates. * **ACCEPTED_AND_SETTLED**: Settlement completed. * **REJECTED**: Payment could not be completed. Request could be modified and resubmitted - or if unexpected problem then please contact Shaype team for support. * **PENDING**: Settlement queued for handling but not complete. Please continue to check for updates
     *
     * @return $this
     */
    public function setTransactionStatus(string $transaction_status): static
    {
        if (is_null($transaction_status)) {
            throw new InvalidArgumentException('non-nullable transaction_status cannot be null');
        }
        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!in_array($transaction_status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_status', must be one of '%s'",
                    $transaction_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets transaction_status_display
     *
     * @return string
     */
    public function getTransactionStatusDisplay(): string
    {
        return $this->container['transaction_status_display'];
    }

    /**
     * Sets transaction_status_display
     *
     * @param string $transaction_status_display Transaction status display value
     *
     * @return $this
     */
    public function setTransactionStatusDisplay(string $transaction_status_display): static
    {
        if (is_null($transaction_status_display)) {
            throw new InvalidArgumentException('non-nullable transaction_status_display cannot be null');
        }
        $this->container['transaction_status_display'] = $transaction_status_display;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


