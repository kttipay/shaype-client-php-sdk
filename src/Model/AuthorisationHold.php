<?php
/**
 * AuthorisationHold
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * AuthorisationHold Class Doc Comment
 *
 * @description Details of an authorisation hold
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AuthorisationHold implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AuthorisationHold';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_hay_id' => 'string',
        'card_id' => 'string',
        'category' => 'string',
        'currency_amount' => '\Shaype\Client\Model\CurrencyAmount',
        'customer_id' => 'string',
        'description' => 'string',
        'hold_hay_id' => 'string',
        'merchant_details' => '\Shaype\Client\Model\ExternalMerchantDetails',
        'original_currency_amount' => '\Shaype\Client\Model\CurrencyAmount',
        'transaction_channel' => 'string',
        'transaction_time_utc' => '\DateTime',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_hay_id' => 'uuid',
        'card_id' => 'uuid',
        'category' => null,
        'currency_amount' => null,
        'customer_id' => 'uuid',
        'description' => null,
        'hold_hay_id' => 'uuid',
        'merchant_details' => null,
        'original_currency_amount' => null,
        'transaction_channel' => null,
        'transaction_time_utc' => 'date-time',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_hay_id' => false,
        'card_id' => false,
        'category' => false,
        'currency_amount' => false,
        'customer_id' => false,
        'description' => false,
        'hold_hay_id' => false,
        'merchant_details' => false,
        'original_currency_amount' => false,
        'transaction_channel' => false,
        'transaction_time_utc' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_hay_id' => 'accountHayId',
        'card_id' => 'cardId',
        'category' => 'category',
        'currency_amount' => 'currencyAmount',
        'customer_id' => 'customerId',
        'description' => 'description',
        'hold_hay_id' => 'holdHayId',
        'merchant_details' => 'merchantDetails',
        'original_currency_amount' => 'originalCurrencyAmount',
        'transaction_channel' => 'transactionChannel',
        'transaction_time_utc' => 'transactionTimeUtc',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_hay_id' => 'setAccountHayId',
        'card_id' => 'setCardId',
        'category' => 'setCategory',
        'currency_amount' => 'setCurrencyAmount',
        'customer_id' => 'setCustomerId',
        'description' => 'setDescription',
        'hold_hay_id' => 'setHoldHayId',
        'merchant_details' => 'setMerchantDetails',
        'original_currency_amount' => 'setOriginalCurrencyAmount',
        'transaction_channel' => 'setTransactionChannel',
        'transaction_time_utc' => 'setTransactionTimeUtc',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_hay_id' => 'getAccountHayId',
        'card_id' => 'getCardId',
        'category' => 'getCategory',
        'currency_amount' => 'getCurrencyAmount',
        'customer_id' => 'getCustomerId',
        'description' => 'getDescription',
        'hold_hay_id' => 'getHoldHayId',
        'merchant_details' => 'getMerchantDetails',
        'original_currency_amount' => 'getOriginalCurrencyAmount',
        'transaction_channel' => 'getTransactionChannel',
        'transaction_time_utc' => 'getTransactionTimeUtc',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_CHANNEL_VISA_LEGACY = 'VISA_LEGACY';
    public const TRANSACTION_CHANNEL_VISA_REFUNDS_LEGACY = 'VISA_REFUNDS_LEGACY';
    public const TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT = 'VISA_CARD_NOT_PRESENT';
    public const TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT_INTERNATIONAL = 'VISA_CARD_NOT_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_VISA_CARD_PRESENT = 'VISA_CARD_PRESENT';
    public const TRANSACTION_CHANNEL_VISA_CARD_PRESENT_INTERNATIONAL = 'VISA_CARD_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT = 'APPLE_PAY_CARD_NOT_PRESENT';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL = 'APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT = 'APPLE_PAY_CARD_PRESENT';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT_INTERNATIONAL = 'APPLE_PAY_CARD_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT = 'GOOGLE_PAY_CARD_NOT_PRESENT';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL = 'GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT = 'GOOGLE_PAY_CARD_PRESENT';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL = 'GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_VISA_CONTACTLESS = 'VISA_CONTACTLESS';
    public const TRANSACTION_CHANNEL_VISA_CONTACTLESS_INTERNATIONAL = 'VISA_CONTACTLESS_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_VISA_ATM = 'VISA_ATM';
    public const TRANSACTION_CHANNEL_VISA_ATM_INTERNATIONAL = 'VISA_ATM_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_CARD_REFUNDS = 'CARD_REFUNDS';
    public const TRANSACTION_CHANNEL_VISA_OTHER = 'VISA_OTHER';
    public const TRANSACTION_CHANNEL_CUSCAL_LEGACY = 'CUSCAL_LEGACY';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_IN = 'CUSCAL_DE_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_IN = 'CUSCAL_DE_DEBIT_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_IN = 'CUSCAL_DE_CREDIT_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_IN = 'CUSCAL_NPP_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_IN = 'CUSCAL_BPAY_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_FAT_ZEBRA_TRANSFER_IN = 'FAT_ZEBRA_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_IN = 'HAY_TO_HAY_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT = 'CUSCAL_DE_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_OUT = 'CUSCAL_DE_DEBIT_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_OUT = 'CUSCAL_DE_CREDIT_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_OUT = 'CUSCAL_NPP_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_OUT = 'CUSCAL_BPAY_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_OUT = 'HAY_TO_HAY_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_NPP_SOLICITED_RETURN = 'CUSCAL_NPP_SOLICITED_RETURN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT_RETURN = 'CUSCAL_DE_TRANSFER_OUT_RETURN';
    public const TRANSACTION_CHANNEL_DE_DEBIT_RETURN_IN = 'DE_DEBIT_RETURN_IN';
    public const TRANSACTION_CHANNEL_NPP_RETURN_IN = 'NPP_RETURN_IN';
    public const TRANSACTION_CHANNEL_NPP_RETURN_OUT = 'NPP_RETURN_OUT';
    public const TRANSACTION_CHANNEL_HAY_CREDIT = 'HAY_CREDIT';
    public const TRANSACTION_CHANNEL_APPLE_REWARD = 'APPLE_REWARD';
    public const TRANSACTION_CHANNEL_VALUE_TRANSFER = 'VALUE_TRANSFER';
    public const TRANSACTION_CHANNEL_LOAN_REPAYMENT = 'LOAN_REPAYMENT';
    public const TRANSACTION_CHANNEL_MANUAL_ADJUSTMENT = 'MANUAL_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_INTEREST_ADJUSTMENT = 'INTEREST_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_LOAN_ADJUSTMENT = 'LOAN_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_VISA_OCT_DOMESTIC = 'VISA_OCT_DOMESTIC';
    public const TRANSACTION_CHANNEL_VISA_OCT_INTERNATIONAL = 'VISA_OCT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_ACCOUNT_ADJUSTMENT = 'ACCOUNT_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_IN = 'HAAS_TRANSFER_EXTERNAL_IN';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_OUT = 'HAAS_TRANSFER_EXTERNAL_OUT';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_IN = 'HAAS_TRANSFER_INTERNAL_IN';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_OUT = 'HAAS_TRANSFER_INTERNAL_OUT';
    public const TRANSACTION_CHANNEL_SERVICE_FEE = 'SERVICE_FEE';
    public const TRANSACTION_CHANNEL_BPAY_IN_REJECT = 'BPAY_IN_REJECT';
    public const TRANSACTION_CHANNEL_VISA_REFUND_DOMESTIC = 'VISA_REFUND_DOMESTIC';
    public const TRANSACTION_CHANNEL_VISA_REFUND_INTERNATIONAL = 'VISA_REFUND_INTERNATIONAL';
    public const TYPE_CARD_PRESENT_PAYMENT = 'CARD_PRESENT_PAYMENT';
    public const TYPE_CARD_NOT_PRESENT_PAYMENT = 'CARD_NOT_PRESENT_PAYMENT';
    public const TYPE_INTRABANK_TRANSFER_IN = 'INTRABANK_TRANSFER_IN';
    public const TYPE_INTRABANK_TRANSFER_OUT = 'INTRABANK_TRANSFER_OUT';
    public const TYPE_INTERBANK_TRANSFER_IN = 'INTERBANK_TRANSFER_IN';
    public const TYPE_INTERBANK_TRANSFER_OUT = 'INTERBANK_TRANSFER_OUT';
    public const TYPE_DIRECT_DEBIT_TRANSFER = 'DIRECT_DEBIT_TRANSFER';
    public const TYPE_ATM_WITHDRAWAL = 'ATM_WITHDRAWAL';
    public const TYPE_CARD_PAYMENT_REVERSAL = 'CARD_PAYMENT_REVERSAL';
    public const TYPE_INTERBANK_TRANSFER_OUT_REVERSAL = 'INTERBANK_TRANSFER_OUT_REVERSAL';
    public const TYPE_GENERAL_CREDIT = 'GENERAL_CREDIT';
    public const TYPE_GENERAL_DEBIT = 'GENERAL_DEBIT';
    public const TYPE_ORIGINAL_CREDIT = 'ORIGINAL_CREDIT';
    public const TYPE_BPAY_TRANSFER_OUT = 'BPAY_TRANSFER_OUT';
    public const TYPE_BPAY_TRANSFER_IN = 'BPAY_TRANSFER_IN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionChannelAllowableValues()
    {
        return [
            self::TRANSACTION_CHANNEL_VISA_LEGACY,
            self::TRANSACTION_CHANNEL_VISA_REFUNDS_LEGACY,
            self::TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT,
            self::TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_VISA_CARD_PRESENT,
            self::TRANSACTION_CHANNEL_VISA_CARD_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_VISA_CONTACTLESS,
            self::TRANSACTION_CHANNEL_VISA_CONTACTLESS_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_VISA_ATM,
            self::TRANSACTION_CHANNEL_VISA_ATM_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_CARD_REFUNDS,
            self::TRANSACTION_CHANNEL_VISA_OTHER,
            self::TRANSACTION_CHANNEL_CUSCAL_LEGACY,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_FAT_ZEBRA_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_NPP_SOLICITED_RETURN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT_RETURN,
            self::TRANSACTION_CHANNEL_DE_DEBIT_RETURN_IN,
            self::TRANSACTION_CHANNEL_NPP_RETURN_IN,
            self::TRANSACTION_CHANNEL_NPP_RETURN_OUT,
            self::TRANSACTION_CHANNEL_HAY_CREDIT,
            self::TRANSACTION_CHANNEL_APPLE_REWARD,
            self::TRANSACTION_CHANNEL_VALUE_TRANSFER,
            self::TRANSACTION_CHANNEL_LOAN_REPAYMENT,
            self::TRANSACTION_CHANNEL_MANUAL_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_INTEREST_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_LOAN_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_VISA_OCT_DOMESTIC,
            self::TRANSACTION_CHANNEL_VISA_OCT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_ACCOUNT_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_IN,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_OUT,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_IN,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_OUT,
            self::TRANSACTION_CHANNEL_SERVICE_FEE,
            self::TRANSACTION_CHANNEL_BPAY_IN_REJECT,
            self::TRANSACTION_CHANNEL_VISA_REFUND_DOMESTIC,
            self::TRANSACTION_CHANNEL_VISA_REFUND_INTERNATIONAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD_PRESENT_PAYMENT,
            self::TYPE_CARD_NOT_PRESENT_PAYMENT,
            self::TYPE_INTRABANK_TRANSFER_IN,
            self::TYPE_INTRABANK_TRANSFER_OUT,
            self::TYPE_INTERBANK_TRANSFER_IN,
            self::TYPE_INTERBANK_TRANSFER_OUT,
            self::TYPE_DIRECT_DEBIT_TRANSFER,
            self::TYPE_ATM_WITHDRAWAL,
            self::TYPE_CARD_PAYMENT_REVERSAL,
            self::TYPE_INTERBANK_TRANSFER_OUT_REVERSAL,
            self::TYPE_GENERAL_CREDIT,
            self::TYPE_GENERAL_DEBIT,
            self::TYPE_ORIGINAL_CREDIT,
            self::TYPE_BPAY_TRANSFER_OUT,
            self::TYPE_BPAY_TRANSFER_IN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_hay_id', $data ?? [], null);
        $this->setIfExists('card_id', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('currency_amount', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('hold_hay_id', $data ?? [], null);
        $this->setIfExists('merchant_details', $data ?? [], null);
        $this->setIfExists('original_currency_amount', $data ?? [], null);
        $this->setIfExists('transaction_channel', $data ?? [], null);
        $this->setIfExists('transaction_time_utc', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionChannelAllowableValues();
        if (!is_null($this->container['transaction_channel']) && !in_array($this->container['transaction_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_channel', must be one of '%s'",
                $this->container['transaction_channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_hay_id
     *
     * @return string|null
     */
    public function getAccountHayId(): ?string
    {
        return $this->container['account_hay_id'];
    }

    /**
     * Sets account_hay_id
     *
     * @param string|null $account_hay_id Unique identifier (UUID) of the Account
     *
     * @return $this
     */
    public function setAccountHayId(?string $account_hay_id): static
    {
        if (is_null($account_hay_id)) {
            throw new InvalidArgumentException('non-nullable account_hay_id cannot be null');
        }
        $this->container['account_hay_id'] = $account_hay_id;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string|null
     */
    public function getCardId(): ?string
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string|null $card_id Unique identifier (UUID) of the Card
     *
     * @return $this
     */
    public function setCardId(?string $card_id): static
    {
        if (is_null($card_id)) {
            throw new InvalidArgumentException('non-nullable card_id cannot be null');
        }
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory(): ?string
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category applied to transaction, will be initially populated based on merchant type if known
     *
     * @return $this
     */
    public function setCategory(?string $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets currency_amount
     *
     * @return \Shaype\Client\Model\CurrencyAmount|null
     */
    public function getCurrencyAmount(): ?\Shaype\Client\Model\CurrencyAmount
    {
        return $this->container['currency_amount'];
    }

    /**
     * Sets currency_amount
     *
     * @param \Shaype\Client\Model\CurrencyAmount|null $currency_amount currency_amount
     *
     * @return $this
     */
    public function setCurrencyAmount(?\Shaype\Client\Model\CurrencyAmount $currency_amount): static
    {
        if (is_null($currency_amount)) {
            throw new InvalidArgumentException('non-nullable currency_amount cannot be null');
        }
        $this->container['currency_amount'] = $currency_amount;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId(): ?string
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Unique identifier (UUID) of the Customer (cardholder)
     *
     * @return $this
     */
    public function setCustomerId(?string $customer_id): static
    {
        if (is_null($customer_id)) {
            throw new InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description on the Transaction
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hold_hay_id
     *
     * @return string|null
     */
    public function getHoldHayId(): ?string
    {
        return $this->container['hold_hay_id'];
    }

    /**
     * Sets hold_hay_id
     *
     * @param string|null $hold_hay_id Unique identifier (UUID) of the Authorisation Hold
     *
     * @return $this
     */
    public function setHoldHayId(?string $hold_hay_id): static
    {
        if (is_null($hold_hay_id)) {
            throw new InvalidArgumentException('non-nullable hold_hay_id cannot be null');
        }
        $this->container['hold_hay_id'] = $hold_hay_id;

        return $this;
    }

    /**
     * Gets merchant_details
     *
     * @return \Shaype\Client\Model\ExternalMerchantDetails|null
     */
    public function getMerchantDetails(): ?\Shaype\Client\Model\ExternalMerchantDetails
    {
        return $this->container['merchant_details'];
    }

    /**
     * Sets merchant_details
     *
     * @param \Shaype\Client\Model\ExternalMerchantDetails|null $merchant_details merchant_details
     *
     * @return $this
     */
    public function setMerchantDetails(?\Shaype\Client\Model\ExternalMerchantDetails $merchant_details): static
    {
        if (is_null($merchant_details)) {
            throw new InvalidArgumentException('non-nullable merchant_details cannot be null');
        }
        $this->container['merchant_details'] = $merchant_details;

        return $this;
    }

    /**
     * Gets original_currency_amount
     *
     * @return \Shaype\Client\Model\CurrencyAmount|null
     */
    public function getOriginalCurrencyAmount(): ?\Shaype\Client\Model\CurrencyAmount
    {
        return $this->container['original_currency_amount'];
    }

    /**
     * Sets original_currency_amount
     *
     * @param \Shaype\Client\Model\CurrencyAmount|null $original_currency_amount original_currency_amount
     *
     * @return $this
     */
    public function setOriginalCurrencyAmount(?\Shaype\Client\Model\CurrencyAmount $original_currency_amount): static
    {
        if (is_null($original_currency_amount)) {
            throw new InvalidArgumentException('non-nullable original_currency_amount cannot be null');
        }
        $this->container['original_currency_amount'] = $original_currency_amount;

        return $this;
    }

    /**
     * Gets transaction_channel
     *
     * @return string|null
     */
    public function getTransactionChannel(): ?string
    {
        return $this->container['transaction_channel'];
    }

    /**
     * Sets transaction_channel
     *
     * @param string|null $transaction_channel Transaction channel, domestic if payment same country card is issued in otherwise international. Possible values:  * **APPLE_PAY_CARD_NOT_PRESENT_DOMESTIC**:Payment online via Apple Pay (domestic)  * **APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**:Payment online via Apple Pay (international)  * **APPLE_PAY_CARD_PRESENT_DOMESTIC**:Payment via Apple device at physical terminal (domestic)  * **APPLE_PAY_CARD_PRESENT_INTERNATIONAL**:Payment via Apple device at physical terminal (international)  * **GOOGLE_PAY_CARD_NOT_PRESENT_DOMESTIC**:Payment online via Google Pay (domestic)  * **GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**:Payment online via Google Pay (international)  * **GOOGLE_PAY_CARD_PRESENT_DOMESTIC**:Payment via Android device at physical terminal (domestic)  * **GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL**:Payment via Android device at physical terminal (international)  * **VISA_ATM_DOMESTIC**:Cash withdrawal from ATM (domestic)  * **VISA_ATM_INTERNATIONAL**:Cash withdrawal from ATM (international)  * **VISA_CARD_NOT_PRESENT_DOMESTIC**:Payment online using card details (domestic)  * **VISA_CARD_NOT_PRESENT_INTERNATIONAL**:Payment online using card details (international)  * **VISA_CARD_PRESENT_DOMESTIC**:Payment using physical card chip or magstripe (domestic)  * **VISA_CARD_PRESENT_INTERNATIONAL**:Payment using physical card chip or magstripe (international)  * **VISA_CONTACTLESS_DOMESTIC**:Payment using physical card contactless (domestic)  * **VISA_CONTACTLESS_INTERNATIONAL**:Payment using physical card contactless (international)  * **VISA_OCT_DOMESTIC**:Cash transfer to card via Visa OCT payment (domestic)  * **VISA_OCT_INTERNATIONAL**:Cash transfer to card via Visa OCT payment (international)  * **VISA_OTHER**:Exceptional for any other type of transaction  * **VISA_REFUND_DOMESTIC**:Refund for previous card payment (domestic)  * **VISA_REFUND_INTERNATIONAL**:Refund for previous card payment (international)
     *
     * @return $this
     */
    public function setTransactionChannel(?string $transaction_channel): static
    {
        if (is_null($transaction_channel)) {
            throw new InvalidArgumentException('non-nullable transaction_channel cannot be null');
        }
        $allowedValues = $this->getTransactionChannelAllowableValues();
        if (!in_array($transaction_channel, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_channel', must be one of '%s'",
                    $transaction_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_channel'] = $transaction_channel;

        return $this;
    }

    /**
     * Gets transaction_time_utc
     *
     * @return \DateTime|null
     */
    public function getTransactionTimeUtc(): ?\DateTime
    {
        return $this->container['transaction_time_utc'];
    }

    /**
     * Sets transaction_time_utc
     *
     * @param \DateTime|null $transaction_time_utc DateTime in UTC format when Transaction was Authorised on the Account
     *
     * @return $this
     */
    public function setTransactionTimeUtc(?\DateTime $transaction_time_utc): static
    {
        if (is_null($transaction_time_utc)) {
            throw new InvalidArgumentException('non-nullable transaction_time_utc cannot be null');
        }
        $this->container['transaction_time_utc'] = $transaction_time_utc;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Transaction type. Possible values:  * **ATM_WITHDRAWAL**: Cash withdrawal from ATM  * **CARD_NOT_PRESENT_PAYMENT**: Payment online using card details, Apple Pay or Google Pay  * **CARD_PAYMENT_REVERSAL**: Refund for previous card payment  * **CARD_PRESENT_PAYMENT**: Payment using physical card, Apple device or Android device at physical terminal  * **ORIGINAL_CREDIT**: Cash transfer to card via Visa OCT payment
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


