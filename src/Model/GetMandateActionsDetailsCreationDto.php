<?php
/**
 * GetMandateActionsDetailsCreationDto
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * GetMandateActionsDetailsCreationDto Class Doc Comment
 *
 * @description Request to register payment mandate in central mandate service.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetMandateActionsDetailsCreationDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetMandateActionsDetailsCreationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'automatic_extension_indicator' => 'bool',
        'besc_user_identification' => 'string',
        'creditor_information' => '\Shaype\Client\Model\GetMandateActionsDetailsCreationCreditorInformationDto',
        'debtor_information' => '\Shaype\Client\Model\GetMandateActionsDetailsCreationDebtorInformationDto',
        'description' => 'string',
        'establishment_scheme' => 'string',
        'initiation_request_identification' => 'string',
        'mandate_purpose_code' => 'string',
        'mandate_type' => 'string',
        'npp_backoffice_service' => 'string',
        'payment_information' => '\Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInformationDto',
        'payment_initiator_information' => '\Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInitiatorInformationDto',
        'resolution_requested_by' => 'string',
        'short_description' => 'string',
        'transfer_arrangement' => 'string',
        'validity_end_date' => 'string',
        'validity_start_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'automatic_extension_indicator' => null,
        'besc_user_identification' => null,
        'creditor_information' => null,
        'debtor_information' => null,
        'description' => null,
        'establishment_scheme' => null,
        'initiation_request_identification' => null,
        'mandate_purpose_code' => null,
        'mandate_type' => null,
        'npp_backoffice_service' => null,
        'payment_information' => null,
        'payment_initiator_information' => null,
        'resolution_requested_by' => null,
        'short_description' => null,
        'transfer_arrangement' => null,
        'validity_end_date' => null,
        'validity_start_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'automatic_extension_indicator' => false,
        'besc_user_identification' => false,
        'creditor_information' => false,
        'debtor_information' => false,
        'description' => false,
        'establishment_scheme' => false,
        'initiation_request_identification' => false,
        'mandate_purpose_code' => false,
        'mandate_type' => false,
        'npp_backoffice_service' => false,
        'payment_information' => false,
        'payment_initiator_information' => false,
        'resolution_requested_by' => false,
        'short_description' => false,
        'transfer_arrangement' => false,
        'validity_end_date' => false,
        'validity_start_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'automatic_extension_indicator' => 'automaticExtensionIndicator',
        'besc_user_identification' => 'bescUserIdentification',
        'creditor_information' => 'creditorInformation',
        'debtor_information' => 'debtorInformation',
        'description' => 'description',
        'establishment_scheme' => 'establishmentScheme',
        'initiation_request_identification' => 'initiationRequestIdentification',
        'mandate_purpose_code' => 'mandatePurposeCode',
        'mandate_type' => 'mandateType',
        'npp_backoffice_service' => 'nppBackofficeService',
        'payment_information' => 'paymentInformation',
        'payment_initiator_information' => 'paymentInitiatorInformation',
        'resolution_requested_by' => 'resolutionRequestedBy',
        'short_description' => 'shortDescription',
        'transfer_arrangement' => 'transferArrangement',
        'validity_end_date' => 'validityEndDate',
        'validity_start_date' => 'validityStartDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'automatic_extension_indicator' => 'setAutomaticExtensionIndicator',
        'besc_user_identification' => 'setBescUserIdentification',
        'creditor_information' => 'setCreditorInformation',
        'debtor_information' => 'setDebtorInformation',
        'description' => 'setDescription',
        'establishment_scheme' => 'setEstablishmentScheme',
        'initiation_request_identification' => 'setInitiationRequestIdentification',
        'mandate_purpose_code' => 'setMandatePurposeCode',
        'mandate_type' => 'setMandateType',
        'npp_backoffice_service' => 'setNppBackofficeService',
        'payment_information' => 'setPaymentInformation',
        'payment_initiator_information' => 'setPaymentInitiatorInformation',
        'resolution_requested_by' => 'setResolutionRequestedBy',
        'short_description' => 'setShortDescription',
        'transfer_arrangement' => 'setTransferArrangement',
        'validity_end_date' => 'setValidityEndDate',
        'validity_start_date' => 'setValidityStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'automatic_extension_indicator' => 'getAutomaticExtensionIndicator',
        'besc_user_identification' => 'getBescUserIdentification',
        'creditor_information' => 'getCreditorInformation',
        'debtor_information' => 'getDebtorInformation',
        'description' => 'getDescription',
        'establishment_scheme' => 'getEstablishmentScheme',
        'initiation_request_identification' => 'getInitiationRequestIdentification',
        'mandate_purpose_code' => 'getMandatePurposeCode',
        'mandate_type' => 'getMandateType',
        'npp_backoffice_service' => 'getNppBackofficeService',
        'payment_information' => 'getPaymentInformation',
        'payment_initiator_information' => 'getPaymentInitiatorInformation',
        'resolution_requested_by' => 'getResolutionRequestedBy',
        'short_description' => 'getShortDescription',
        'transfer_arrangement' => 'getTransferArrangement',
        'validity_end_date' => 'getValidityEndDate',
        'validity_start_date' => 'getValidityStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ESTABLISHMENT_SCHEME_AUTHORISED_PAYMENT_MANDATEMIGRATED_BY_CREDITORUNILATERAL_BY_DEBTOR = 'AUTHORISED_PAYMENT_MANDATE,MIGRATED_BY_CREDITOR,UNILATERAL_BY_DEBTOR';
    public const MANDATE_PURPOSE_CODE_MORTGAGEUTILITYLOANDEPENDANTGAMBLINGRETAILSALARYPERSONALGOVERNMENTPENSIONTAXOTHER = 'MORTGAGE,UTILITY,LOAN,DEPENDANT,GAMBLING,RETAIL,SALARY,PERSONAL,GOVERNMENT,PENSION,TAX,OTHER';
    public const MANDATE_TYPE_DIRECT_DEBITSTANDING_ORDER = 'DIRECT_DEBIT,STANDING_ORDER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEstablishmentSchemeAllowableValues()
    {
        return [
            self::ESTABLISHMENT_SCHEME_AUTHORISED_PAYMENT_MANDATEMIGRATED_BY_CREDITORUNILATERAL_BY_DEBTOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMandatePurposeCodeAllowableValues()
    {
        return [
            self::MANDATE_PURPOSE_CODE_MORTGAGEUTILITYLOANDEPENDANTGAMBLINGRETAILSALARYPERSONALGOVERNMENTPENSIONTAXOTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMandateTypeAllowableValues()
    {
        return [
            self::MANDATE_TYPE_DIRECT_DEBITSTANDING_ORDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('automatic_extension_indicator', $data ?? [], null);
        $this->setIfExists('besc_user_identification', $data ?? [], null);
        $this->setIfExists('creditor_information', $data ?? [], null);
        $this->setIfExists('debtor_information', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('establishment_scheme', $data ?? [], null);
        $this->setIfExists('initiation_request_identification', $data ?? [], null);
        $this->setIfExists('mandate_purpose_code', $data ?? [], null);
        $this->setIfExists('mandate_type', $data ?? [], null);
        $this->setIfExists('npp_backoffice_service', $data ?? [], null);
        $this->setIfExists('payment_information', $data ?? [], null);
        $this->setIfExists('payment_initiator_information', $data ?? [], null);
        $this->setIfExists('resolution_requested_by', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('transfer_arrangement', $data ?? [], null);
        $this->setIfExists('validity_end_date', $data ?? [], null);
        $this->setIfExists('validity_start_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['automatic_extension_indicator'] === null) {
            $invalidProperties[] = "'automatic_extension_indicator' can't be null";
        }
        if (!is_null($this->container['besc_user_identification']) && (mb_strlen($this->container['besc_user_identification']) > 6)) {
            $invalidProperties[] = "invalid value for 'besc_user_identification', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['besc_user_identification']) && (mb_strlen($this->container['besc_user_identification']) < 0)) {
            $invalidProperties[] = "invalid value for 'besc_user_identification', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['debtor_information'] === null) {
            $invalidProperties[] = "'debtor_information' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 140)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['establishment_scheme'] === null) {
            $invalidProperties[] = "'establishment_scheme' can't be null";
        }
        $allowedValues = $this->getEstablishmentSchemeAllowableValues();
        if (!is_null($this->container['establishment_scheme']) && !in_array($this->container['establishment_scheme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'establishment_scheme', must be one of '%s'",
                $this->container['establishment_scheme'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['initiation_request_identification'] === null) {
            $invalidProperties[] = "'initiation_request_identification' can't be null";
        }
        if (!preg_match("/^[ -~]{1,35}$/", $this->container['initiation_request_identification'])) {
            $invalidProperties[] = "invalid value for 'initiation_request_identification', must be conform to the pattern /^[ -~]{1,35}$/.";
        }

        $allowedValues = $this->getMandatePurposeCodeAllowableValues();
        if (!is_null($this->container['mandate_purpose_code']) && !in_array($this->container['mandate_purpose_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mandate_purpose_code', must be one of '%s'",
                $this->container['mandate_purpose_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['mandate_type'] === null) {
            $invalidProperties[] = "'mandate_type' can't be null";
        }
        $allowedValues = $this->getMandateTypeAllowableValues();
        if (!is_null($this->container['mandate_type']) && !in_array($this->container['mandate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mandate_type', must be one of '%s'",
                $this->container['mandate_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['npp_backoffice_service']) && !preg_match("/^[ -~]{1,35}$/", $this->container['npp_backoffice_service'])) {
            $invalidProperties[] = "invalid value for 'npp_backoffice_service', must be conform to the pattern /^[ -~]{1,35}$/.";
        }

        if ($this->container['payment_information'] === null) {
            $invalidProperties[] = "'payment_information' can't be null";
        }
        if ($this->container['payment_initiator_information'] === null) {
            $invalidProperties[] = "'payment_initiator_information' can't be null";
        }
        if (!is_null($this->container['resolution_requested_by']) && !preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/", $this->container['resolution_requested_by'])) {
            $invalidProperties[] = "invalid value for 'resolution_requested_by', must be conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/.";
        }

        if (!is_null($this->container['short_description']) && (mb_strlen($this->container['short_description']) > 35)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['short_description']) && (mb_strlen($this->container['short_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transfer_arrangement']) && (mb_strlen($this->container['transfer_arrangement']) > 140)) {
            $invalidProperties[] = "invalid value for 'transfer_arrangement', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['transfer_arrangement']) && (mb_strlen($this->container['transfer_arrangement']) < 1)) {
            $invalidProperties[] = "invalid value for 'transfer_arrangement', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['validity_end_date']) && !preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/", $this->container['validity_end_date'])) {
            $invalidProperties[] = "invalid value for 'validity_end_date', must be conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/.";
        }

        if ($this->container['validity_start_date'] === null) {
            $invalidProperties[] = "'validity_start_date' can't be null";
        }
        if (!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/", $this->container['validity_start_date'])) {
            $invalidProperties[] = "invalid value for 'validity_start_date', must be conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatic_extension_indicator
     *
     * @return bool
     */
    public function getAutomaticExtensionIndicator(): bool
    {
        return $this->container['automatic_extension_indicator'];
    }

    /**
     * Sets automatic_extension_indicator
     *
     * @param bool $automatic_extension_indicator Automatic renewal of a mandate arrangement at the end of the defined period (period start through period end).
     *
     * @return $this
     */
    public function setAutomaticExtensionIndicator(bool $automatic_extension_indicator): static
    {
        if (is_null($automatic_extension_indicator)) {
            throw new InvalidArgumentException('non-nullable automatic_extension_indicator cannot be null');
        }
        $this->container['automatic_extension_indicator'] = $automatic_extension_indicator;

        return $this;
    }

    /**
     * Gets besc_user_identification
     *
     * @return string|null
     */
    public function getBescUserIdentification(): ?string
    {
        return $this->container['besc_user_identification'];
    }

    /**
     * Sets besc_user_identification
     *
     * @param string|null $besc_user_identification BECS user ID related to migrated DDR mandate.
     *
     * @return $this
     */
    public function setBescUserIdentification(?string $besc_user_identification): static
    {
        if (is_null($besc_user_identification)) {
            throw new InvalidArgumentException('non-nullable besc_user_identification cannot be null');
        }
        if ((mb_strlen($besc_user_identification) > 6)) {
            throw new InvalidArgumentException('invalid length for $besc_user_identification when calling GetMandateActionsDetailsCreationDto., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($besc_user_identification) < 0)) {
            throw new InvalidArgumentException('invalid length for $besc_user_identification when calling GetMandateActionsDetailsCreationDto., must be bigger than or equal to 0.');
        }

        $this->container['besc_user_identification'] = $besc_user_identification;

        return $this;
    }

    /**
     * Gets creditor_information
     *
     * @return \Shaype\Client\Model\GetMandateActionsDetailsCreationCreditorInformationDto|null
     */
    public function getCreditorInformation(): ?\Shaype\Client\Model\GetMandateActionsDetailsCreationCreditorInformationDto
    {
        return $this->container['creditor_information'];
    }

    /**
     * Sets creditor_information
     *
     * @param \Shaype\Client\Model\GetMandateActionsDetailsCreationCreditorInformationDto|null $creditor_information creditor_information
     *
     * @return $this
     */
    public function setCreditorInformation(?\Shaype\Client\Model\GetMandateActionsDetailsCreationCreditorInformationDto $creditor_information): static
    {
        if (is_null($creditor_information)) {
            throw new InvalidArgumentException('non-nullable creditor_information cannot be null');
        }
        $this->container['creditor_information'] = $creditor_information;

        return $this;
    }

    /**
     * Gets debtor_information
     *
     * @return \Shaype\Client\Model\GetMandateActionsDetailsCreationDebtorInformationDto
     */
    public function getDebtorInformation(): \Shaype\Client\Model\GetMandateActionsDetailsCreationDebtorInformationDto
    {
        return $this->container['debtor_information'];
    }

    /**
     * Sets debtor_information
     *
     * @param \Shaype\Client\Model\GetMandateActionsDetailsCreationDebtorInformationDto $debtor_information debtor_information
     *
     * @return $this
     */
    public function setDebtorInformation(\Shaype\Client\Model\GetMandateActionsDetailsCreationDebtorInformationDto $debtor_information): static
    {
        if (is_null($debtor_information)) {
            throw new InvalidArgumentException('non-nullable debtor_information cannot be null');
        }
        $this->container['debtor_information'] = $debtor_information;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Reason for the mandate setup as narrative text.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 140)) {
            throw new InvalidArgumentException('invalid length for $description when calling GetMandateActionsDetailsCreationDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new InvalidArgumentException('invalid length for $description when calling GetMandateActionsDetailsCreationDto., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets establishment_scheme
     *
     * @return string
     */
    public function getEstablishmentScheme(): string
    {
        return $this->container['establishment_scheme'];
    }

    /**
     * Sets establishment_scheme
     *
     * @param string $establishment_scheme Identifies the arrangement (unilateral or bilateral) and party that established the mandate. * **AUTHORISED_PAYMENT_MANDATE**: Established bilaterally as Authorised Payment Mandate. * **MIGRATED_BY_CREDITOR**: Established by migration from legacy service by Creditor. * **UNILATERAL_BY_DEBTOR**: UnilateralByDebtor - Established unilaterally by Debtor.
     *
     * @return $this
     */
    public function setEstablishmentScheme(string $establishment_scheme): static
    {
        if (is_null($establishment_scheme)) {
            throw new InvalidArgumentException('non-nullable establishment_scheme cannot be null');
        }
        $allowedValues = $this->getEstablishmentSchemeAllowableValues();
        if (!in_array($establishment_scheme, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'establishment_scheme', must be one of '%s'",
                    $establishment_scheme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['establishment_scheme'] = $establishment_scheme;

        return $this;
    }

    /**
     * Gets initiation_request_identification
     *
     * @return string
     */
    public function getInitiationRequestIdentification(): string
    {
        return $this->container['initiation_request_identification'];
    }

    /**
     * Sets initiation_request_identification
     *
     * @param string $initiation_request_identification Identification for the mandate request, as originally assigned by the initiating party.
     *
     * @return $this
     */
    public function setInitiationRequestIdentification(string $initiation_request_identification): static
    {
        if (is_null($initiation_request_identification)) {
            throw new InvalidArgumentException('non-nullable initiation_request_identification cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,35}$/", ObjectSerializer::toString($initiation_request_identification)))) {
            throw new InvalidArgumentException("invalid value for \$initiation_request_identification when calling GetMandateActionsDetailsCreationDto., must conform to the pattern /^[ -~]{1,35}$/.");
        }

        $this->container['initiation_request_identification'] = $initiation_request_identification;

        return $this;
    }

    /**
     * Gets mandate_purpose_code
     *
     * @return string|null
     */
    public function getMandatePurposeCode(): ?string
    {
        return $this->container['mandate_purpose_code'];
    }

    /**
     * Sets mandate_purpose_code
     *
     * @param string|null $mandate_purpose_code Specifies the high level purpose of the mandate based on a set of pre-defined categories. * **MORTGAGE**: Mortgage Payments * **UTILITY**: Utility Payments * **LOAN**: Loan Payments * **DEPENDANT**: Dependant Support Payments * **GAMBLING**: Gambling Payments * **RETAIL**: Retail Payments * **SALARY**: Salary Payments * **PERSONAL**: Personal Payment * **GOVERNMENT**: Government Payments * **PENSION**: Pension Payments * **TAX**: Tax Payments * **OTHER**: Other Service Payments
     *
     * @return $this
     */
    public function setMandatePurposeCode(?string $mandate_purpose_code): static
    {
        if (is_null($mandate_purpose_code)) {
            throw new InvalidArgumentException('non-nullable mandate_purpose_code cannot be null');
        }
        $allowedValues = $this->getMandatePurposeCodeAllowableValues();
        if (!in_array($mandate_purpose_code, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mandate_purpose_code', must be one of '%s'",
                    $mandate_purpose_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mandate_purpose_code'] = $mandate_purpose_code;

        return $this;
    }

    /**
     * Gets mandate_type
     *
     * @return string
     */
    public function getMandateType(): string
    {
        return $this->container['mandate_type'];
    }

    /**
     * Sets mandate_type
     *
     * @param string $mandate_type Identifies the type of mandate. * **DIRECT_DEBIT**: Mandate type relates to Direct Debit payment instrument. * **STANDING_ORDER**: Mandate type relates to Standing Order payment instrument.
     *
     * @return $this
     */
    public function setMandateType(string $mandate_type): static
    {
        if (is_null($mandate_type)) {
            throw new InvalidArgumentException('non-nullable mandate_type cannot be null');
        }
        $allowedValues = $this->getMandateTypeAllowableValues();
        if (!in_array($mandate_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mandate_type', must be one of '%s'",
                    $mandate_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mandate_type'] = $mandate_type;

        return $this;
    }

    /**
     * Gets npp_backoffice_service
     *
     * @return string|null
     */
    public function getNppBackofficeService(): ?string
    {
        return $this->container['npp_backoffice_service'];
    }

    /**
     * Sets npp_backoffice_service
     *
     * @param string|null $npp_backoffice_service Specifies a NPP backoffice service identification under which the mandate resides.
     *
     * @return $this
     */
    public function setNppBackofficeService(?string $npp_backoffice_service): static
    {
        if (is_null($npp_backoffice_service)) {
            throw new InvalidArgumentException('non-nullable npp_backoffice_service cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,35}$/", ObjectSerializer::toString($npp_backoffice_service)))) {
            throw new InvalidArgumentException("invalid value for \$npp_backoffice_service when calling GetMandateActionsDetailsCreationDto., must conform to the pattern /^[ -~]{1,35}$/.");
        }

        $this->container['npp_backoffice_service'] = $npp_backoffice_service;

        return $this;
    }

    /**
     * Gets payment_information
     *
     * @return \Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInformationDto
     */
    public function getPaymentInformation(): \Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInformationDto
    {
        return $this->container['payment_information'];
    }

    /**
     * Sets payment_information
     *
     * @param \Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInformationDto $payment_information payment_information
     *
     * @return $this
     */
    public function setPaymentInformation(\Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInformationDto $payment_information): static
    {
        if (is_null($payment_information)) {
            throw new InvalidArgumentException('non-nullable payment_information cannot be null');
        }
        $this->container['payment_information'] = $payment_information;

        return $this;
    }

    /**
     * Gets payment_initiator_information
     *
     * @return \Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInitiatorInformationDto
     */
    public function getPaymentInitiatorInformation(): \Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInitiatorInformationDto
    {
        return $this->container['payment_initiator_information'];
    }

    /**
     * Sets payment_initiator_information
     *
     * @param \Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInitiatorInformationDto $payment_initiator_information payment_initiator_information
     *
     * @return $this
     */
    public function setPaymentInitiatorInformation(\Shaype\Client\Model\GetMandateActionsDetailsCreationPaymentInitiatorInformationDto $payment_initiator_information): static
    {
        if (is_null($payment_initiator_information)) {
            throw new InvalidArgumentException('non-nullable payment_initiator_information cannot be null');
        }
        $this->container['payment_initiator_information'] = $payment_initiator_information;

        return $this;
    }

    /**
     * Gets resolution_requested_by
     *
     * @return string|null
     */
    public function getResolutionRequestedBy(): ?string
    {
        return $this->container['resolution_requested_by'];
    }

    /**
     * Sets resolution_requested_by
     *
     * @param string|null $resolution_requested_by Optional time used to indicate by when resolution of a bilateral action is requested from the other party to the mandate. It will be ignored if the resulting amendment action is not bilateral. For bilateral amendments, it will be provided in any notification sent to the counterparty. This time is for informational purposes only and does not affect the expiry time imposed by the MMS.
     *
     * @return $this
     */
    public function setResolutionRequestedBy(?string $resolution_requested_by): static
    {
        if (is_null($resolution_requested_by)) {
            throw new InvalidArgumentException('non-nullable resolution_requested_by cannot be null');
        }

        if ((!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/", ObjectSerializer::toString($resolution_requested_by)))) {
            throw new InvalidArgumentException("invalid value for \$resolution_requested_by when calling GetMandateActionsDetailsCreationDto., must conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/.");
        }

        $this->container['resolution_requested_by'] = $resolution_requested_by;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription(): ?string
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description Short description of the reason for mandate setup as narrative text.
     *
     * @return $this
     */
    public function setShortDescription(?string $short_description): static
    {
        if (is_null($short_description)) {
            throw new InvalidArgumentException('non-nullable short_description cannot be null');
        }
        if ((mb_strlen($short_description) > 35)) {
            throw new InvalidArgumentException('invalid length for $short_description when calling GetMandateActionsDetailsCreationDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($short_description) < 1)) {
            throw new InvalidArgumentException('invalid length for $short_description when calling GetMandateActionsDetailsCreationDto., must be bigger than or equal to 1.');
        }

        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets transfer_arrangement
     *
     * @return string|null
     */
    public function getTransferArrangement(): ?string
    {
        return $this->container['transfer_arrangement'];
    }

    /**
     * Sets transfer_arrangement
     *
     * @param string|null $transfer_arrangement Indication of future transfer date, conditions of sale and requirement to hold funds.
     *
     * @return $this
     */
    public function setTransferArrangement(?string $transfer_arrangement): static
    {
        if (is_null($transfer_arrangement)) {
            throw new InvalidArgumentException('non-nullable transfer_arrangement cannot be null');
        }
        if ((mb_strlen($transfer_arrangement) > 140)) {
            throw new InvalidArgumentException('invalid length for $transfer_arrangement when calling GetMandateActionsDetailsCreationDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($transfer_arrangement) < 1)) {
            throw new InvalidArgumentException('invalid length for $transfer_arrangement when calling GetMandateActionsDetailsCreationDto., must be bigger than or equal to 1.');
        }

        $this->container['transfer_arrangement'] = $transfer_arrangement;

        return $this;
    }

    /**
     * Gets validity_end_date
     *
     * @return string|null
     */
    public function getValidityEndDate(): ?string
    {
        return $this->container['validity_end_date'];
    }

    /**
     * Sets validity_end_date
     *
     * @param string|null $validity_end_date End date of the validity of the mandate. If specified, the mandate is valid until 23:59:59.999 Australia Sydney time on this date.
     *
     * @return $this
     */
    public function setValidityEndDate(?string $validity_end_date): static
    {
        if (is_null($validity_end_date)) {
            throw new InvalidArgumentException('non-nullable validity_end_date cannot be null');
        }

        if ((!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/", ObjectSerializer::toString($validity_end_date)))) {
            throw new InvalidArgumentException("invalid value for \$validity_end_date when calling GetMandateActionsDetailsCreationDto., must conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/.");
        }

        $this->container['validity_end_date'] = $validity_end_date;

        return $this;
    }

    /**
     * Gets validity_start_date
     *
     * @return string
     */
    public function getValidityStartDate(): string
    {
        return $this->container['validity_start_date'];
    }

    /**
     * Sets validity_start_date
     *
     * @param string $validity_start_date Start date of the validity of the mandate. The mandate is valid as of 00:00:00.000 Australia Sydney time on this date.
     *
     * @return $this
     */
    public function setValidityStartDate(string $validity_start_date): static
    {
        if (is_null($validity_start_date)) {
            throw new InvalidArgumentException('non-nullable validity_start_date cannot be null');
        }

        if ((!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/", ObjectSerializer::toString($validity_start_date)))) {
            throw new InvalidArgumentException("invalid value for \$validity_start_date when calling GetMandateActionsDetailsCreationDto., must conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$/.");
        }

        $this->container['validity_start_date'] = $validity_start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


