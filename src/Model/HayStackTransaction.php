<?php
/**
 * HayStackTransaction
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * HayStackTransaction Class Doc Comment
 *
 * @description Details of a stack transaction.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HayStackTransaction implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HayStackTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_hay_id' => 'string',
        'amount' => 'float',
        'counterpart_transaction_id' => 'string',
        'customer_id' => 'string',
        'hay_id' => 'string',
        'notes' => 'string',
        'origin_id' => 'string',
        'origin_type' => 'string',
        'stack' => '\Shaype\Client\Model\HayStack',
        'stack_hay_id' => 'string',
        'transaction_time_utc' => '\DateTime',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_hay_id' => 'uuid',
        'amount' => null,
        'counterpart_transaction_id' => 'uuid',
        'customer_id' => 'uuid',
        'hay_id' => 'uuid',
        'notes' => null,
        'origin_id' => 'uuid',
        'origin_type' => null,
        'stack' => null,
        'stack_hay_id' => 'uuid',
        'transaction_time_utc' => 'date-time',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_hay_id' => false,
        'amount' => false,
        'counterpart_transaction_id' => false,
        'customer_id' => false,
        'hay_id' => false,
        'notes' => false,
        'origin_id' => false,
        'origin_type' => false,
        'stack' => false,
        'stack_hay_id' => false,
        'transaction_time_utc' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_hay_id' => 'accountHayId',
        'amount' => 'amount',
        'counterpart_transaction_id' => 'counterpartTransactionId',
        'customer_id' => 'customerId',
        'hay_id' => 'hayId',
        'notes' => 'notes',
        'origin_id' => 'originId',
        'origin_type' => 'originType',
        'stack' => 'stack',
        'stack_hay_id' => 'stackHayId',
        'transaction_time_utc' => 'transactionTimeUtc',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_hay_id' => 'setAccountHayId',
        'amount' => 'setAmount',
        'counterpart_transaction_id' => 'setCounterpartTransactionId',
        'customer_id' => 'setCustomerId',
        'hay_id' => 'setHayId',
        'notes' => 'setNotes',
        'origin_id' => 'setOriginId',
        'origin_type' => 'setOriginType',
        'stack' => 'setStack',
        'stack_hay_id' => 'setStackHayId',
        'transaction_time_utc' => 'setTransactionTimeUtc',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_hay_id' => 'getAccountHayId',
        'amount' => 'getAmount',
        'counterpart_transaction_id' => 'getCounterpartTransactionId',
        'customer_id' => 'getCustomerId',
        'hay_id' => 'getHayId',
        'notes' => 'getNotes',
        'origin_id' => 'getOriginId',
        'origin_type' => 'getOriginType',
        'stack' => 'getStack',
        'stack_hay_id' => 'getStackHayId',
        'transaction_time_utc' => 'getTransactionTimeUtc',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ORIGIN_TYPE_CUSTOMER = 'CUSTOMER';
    public const ORIGIN_TYPE_SCHEDULED_PAYMENT = 'SCHEDULED_PAYMENT';
    public const ORIGIN_TYPE_HAAS_OPERATIONS = 'HAAS_OPERATIONS';
    public const ORIGIN_TYPE_OPERATIONS = 'OPERATIONS';
    public const ORIGIN_TYPE_MANDATE_PAYMENT = 'MANDATE_PAYMENT';
    public const ORIGIN_TYPE_DIRECT_DEBIT = 'DIRECT_DEBIT';
    public const ORIGIN_TYPE_TRANSACTION = 'TRANSACTION';
    public const TYPE_STANDARD = 'STANDARD';
    public const TYPE_ROUND_UP = 'ROUND_UP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginTypeAllowableValues()
    {
        return [
            self::ORIGIN_TYPE_CUSTOMER,
            self::ORIGIN_TYPE_SCHEDULED_PAYMENT,
            self::ORIGIN_TYPE_HAAS_OPERATIONS,
            self::ORIGIN_TYPE_OPERATIONS,
            self::ORIGIN_TYPE_MANDATE_PAYMENT,
            self::ORIGIN_TYPE_DIRECT_DEBIT,
            self::ORIGIN_TYPE_TRANSACTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_STANDARD,
            self::TYPE_ROUND_UP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_hay_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('counterpart_transaction_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('hay_id', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('origin_id', $data ?? [], null);
        $this->setIfExists('origin_type', $data ?? [], null);
        $this->setIfExists('stack', $data ?? [], null);
        $this->setIfExists('stack_hay_id', $data ?? [], null);
        $this->setIfExists('transaction_time_utc', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getOriginTypeAllowableValues();
        if (!is_null($this->container['origin_type']) && !in_array($this->container['origin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'origin_type', must be one of '%s'",
                $this->container['origin_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_hay_id
     *
     * @return string|null
     */
    public function getAccountHayId(): ?string
    {
        return $this->container['account_hay_id'];
    }

    /**
     * Sets account_hay_id
     *
     * @param string|null $account_hay_id Unique identifier (UUID) of the Account
     *
     * @return $this
     */
    public function setAccountHayId(?string $account_hay_id): static
    {
        if (is_null($account_hay_id)) {
            throw new InvalidArgumentException('non-nullable account_hay_id cannot be null');
        }
        $this->container['account_hay_id'] = $account_hay_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount(): ?float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Value of the Transaction, to 2 decimal places
     *
     * @return $this
     */
    public function setAmount(?float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets counterpart_transaction_id
     *
     * @return string|null
     */
    public function getCounterpartTransactionId(): ?string
    {
        return $this->container['counterpart_transaction_id'];
    }

    /**
     * Sets counterpart_transaction_id
     *
     * @param string|null $counterpart_transaction_id Unique identifier (UUID) of the counterpart transaction (Stack to Stack transactions)
     *
     * @return $this
     */
    public function setCounterpartTransactionId(?string $counterpart_transaction_id): static
    {
        if (is_null($counterpart_transaction_id)) {
            throw new InvalidArgumentException('non-nullable counterpart_transaction_id cannot be null');
        }
        $this->container['counterpart_transaction_id'] = $counterpart_transaction_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId(): ?string
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Unique identifier (UUID) of the Customer (initiator of the transfer)
     *
     * @return $this
     */
    public function setCustomerId(?string $customer_id): static
    {
        if (is_null($customer_id)) {
            throw new InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets hay_id
     *
     * @return string|null
     */
    public function getHayId(): ?string
    {
        return $this->container['hay_id'];
    }

    /**
     * Sets hay_id
     *
     * @param string|null $hay_id Unique identifier (UUID) of the Transaction
     *
     * @return $this
     */
    public function setHayId(?string $hay_id): static
    {
        if (is_null($hay_id)) {
            throw new InvalidArgumentException('non-nullable hay_id cannot be null');
        }
        $this->container['hay_id'] = $hay_id;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Transaction description
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets origin_id
     *
     * @return string|null
     */
    public function getOriginId(): ?string
    {
        return $this->container['origin_id'];
    }

    /**
     * Sets origin_id
     *
     * @param string|null $origin_id Additional identifier applied to Transaction related to origin of the request
     *
     * @return $this
     */
    public function setOriginId(?string $origin_id): static
    {
        if (is_null($origin_id)) {
            throw new InvalidArgumentException('non-nullable origin_id cannot be null');
        }
        $this->container['origin_id'] = $origin_id;

        return $this;
    }

    /**
     * Gets origin_type
     *
     * @return string|null
     */
    public function getOriginType(): ?string
    {
        return $this->container['origin_type'];
    }

    /**
     * Sets origin_type
     *
     * @param string|null $origin_type Initiator origin of the Transaction. Possible values:  * **CUSTOMER**: Transaction initiated by a customer  * **SCHEDULED_PAYMENT**: Transaction initiated by a schedule  * **HAAS_OPERATIONS**: Transaction initiated by Client Operations team  * **OPERATIONS**: Transaction initiated by Shaype Operations team * **MANDATE_PAYMENT**: Transaction initiated by mandate  * **DIRECT_DEBIT**: Transaction initiated by direct debit  * **TRANSACTION**: Transaction initiated by transaction
     *
     * @return $this
     */
    public function setOriginType(?string $origin_type): static
    {
        if (is_null($origin_type)) {
            throw new InvalidArgumentException('non-nullable origin_type cannot be null');
        }
        $allowedValues = $this->getOriginTypeAllowableValues();
        if (!in_array($origin_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'origin_type', must be one of '%s'",
                    $origin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['origin_type'] = $origin_type;

        return $this;
    }

    /**
     * Gets stack
     *
     * @return \Shaype\Client\Model\HayStack|null
     */
    public function getStack(): ?\Shaype\Client\Model\HayStack
    {
        return $this->container['stack'];
    }

    /**
     * Sets stack
     *
     * @param \Shaype\Client\Model\HayStack|null $stack stack
     *
     * @return $this
     */
    public function setStack(?\Shaype\Client\Model\HayStack $stack): static
    {
        if (is_null($stack)) {
            throw new InvalidArgumentException('non-nullable stack cannot be null');
        }
        $this->container['stack'] = $stack;

        return $this;
    }

    /**
     * Gets stack_hay_id
     *
     * @return string|null
     */
    public function getStackHayId(): ?string
    {
        return $this->container['stack_hay_id'];
    }

    /**
     * Sets stack_hay_id
     *
     * @param string|null $stack_hay_id Unique identifier (UUID) of the Stack
     *
     * @return $this
     */
    public function setStackHayId(?string $stack_hay_id): static
    {
        if (is_null($stack_hay_id)) {
            throw new InvalidArgumentException('non-nullable stack_hay_id cannot be null');
        }
        $this->container['stack_hay_id'] = $stack_hay_id;

        return $this;
    }

    /**
     * Gets transaction_time_utc
     *
     * @return \DateTime|null
     */
    public function getTransactionTimeUtc(): ?\DateTime
    {
        return $this->container['transaction_time_utc'];
    }

    /**
     * Sets transaction_time_utc
     *
     * @param \DateTime|null $transaction_time_utc DateTime in UTC format when the Transaction was initiated
     *
     * @return $this
     */
    public function setTransactionTimeUtc(?\DateTime $transaction_time_utc): static
    {
        if (is_null($transaction_time_utc)) {
            throw new InvalidArgumentException('non-nullable transaction_time_utc cannot be null');
        }
        $this->container['transaction_time_utc'] = $transaction_time_utc;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Transaction type. Possible values:  * **STANDARD**: Movement of fund to, from or between stacks triggered by customer or ops  * **ROUND_UP**: Account to Stack transfer triggered by RoundUp functionality
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


