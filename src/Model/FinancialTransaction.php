<?php
/**
 * FinancialTransaction
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * FinancialTransaction Class Doc Comment
 *
 * @description Details of a financial transaction.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FinancialTransaction implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FinancialTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_hay_id' => 'string',
        'card_id' => 'string',
        'category' => 'string',
        'clearing_time_utc' => '\DateTime',
        'counterpart_details' => '\Shaype\Client\Model\ExternalCounterpartDetails',
        'counterpart_name' => 'string',
        'country_of_expenditure' => 'string',
        'currency_amount' => '\Shaype\Client\Model\CurrencyAmount',
        'customer_id' => 'string',
        'description' => 'string',
        'mandate_payment_details' => '\Shaype\Client\Model\ExternalMandatePaymentDetails',
        'origin_channel' => 'string',
        'origin_id' => 'string',
        'origin_type' => 'string',
        'original_currency_amount' => '\Shaype\Client\Model\CurrencyAmount',
        'product_id' => 'string',
        'reference' => 'string',
        'related_hold_hay_id' => 'string',
        'reported_fraudulent' => 'bool',
        'rolling_account_balance' => 'float',
        'transaction_channel' => 'string',
        'transaction_hay_id' => 'string',
        'transaction_time_utc' => '\DateTime',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_hay_id' => 'uuid',
        'card_id' => 'uuid',
        'category' => null,
        'clearing_time_utc' => 'date-time',
        'counterpart_details' => null,
        'counterpart_name' => null,
        'country_of_expenditure' => null,
        'currency_amount' => null,
        'customer_id' => 'uuid',
        'description' => null,
        'mandate_payment_details' => null,
        'origin_channel' => null,
        'origin_id' => 'uuid',
        'origin_type' => null,
        'original_currency_amount' => null,
        'product_id' => 'uuid',
        'reference' => null,
        'related_hold_hay_id' => 'uuid',
        'reported_fraudulent' => null,
        'rolling_account_balance' => null,
        'transaction_channel' => null,
        'transaction_hay_id' => 'uuid',
        'transaction_time_utc' => 'date-time',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_hay_id' => false,
        'card_id' => false,
        'category' => false,
        'clearing_time_utc' => false,
        'counterpart_details' => false,
        'counterpart_name' => false,
        'country_of_expenditure' => false,
        'currency_amount' => false,
        'customer_id' => false,
        'description' => false,
        'mandate_payment_details' => false,
        'origin_channel' => false,
        'origin_id' => false,
        'origin_type' => false,
        'original_currency_amount' => false,
        'product_id' => false,
        'reference' => false,
        'related_hold_hay_id' => false,
        'reported_fraudulent' => false,
        'rolling_account_balance' => false,
        'transaction_channel' => false,
        'transaction_hay_id' => false,
        'transaction_time_utc' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_hay_id' => 'accountHayId',
        'card_id' => 'cardId',
        'category' => 'category',
        'clearing_time_utc' => 'clearingTimeUtc',
        'counterpart_details' => 'counterpartDetails',
        'counterpart_name' => 'counterpartName',
        'country_of_expenditure' => 'countryOfExpenditure',
        'currency_amount' => 'currencyAmount',
        'customer_id' => 'customerId',
        'description' => 'description',
        'mandate_payment_details' => 'mandatePaymentDetails',
        'origin_channel' => 'originChannel',
        'origin_id' => 'originId',
        'origin_type' => 'originType',
        'original_currency_amount' => 'originalCurrencyAmount',
        'product_id' => 'productId',
        'reference' => 'reference',
        'related_hold_hay_id' => 'relatedHoldHayId',
        'reported_fraudulent' => 'reportedFraudulent',
        'rolling_account_balance' => 'rollingAccountBalance',
        'transaction_channel' => 'transactionChannel',
        'transaction_hay_id' => 'transactionHayId',
        'transaction_time_utc' => 'transactionTimeUtc',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_hay_id' => 'setAccountHayId',
        'card_id' => 'setCardId',
        'category' => 'setCategory',
        'clearing_time_utc' => 'setClearingTimeUtc',
        'counterpart_details' => 'setCounterpartDetails',
        'counterpart_name' => 'setCounterpartName',
        'country_of_expenditure' => 'setCountryOfExpenditure',
        'currency_amount' => 'setCurrencyAmount',
        'customer_id' => 'setCustomerId',
        'description' => 'setDescription',
        'mandate_payment_details' => 'setMandatePaymentDetails',
        'origin_channel' => 'setOriginChannel',
        'origin_id' => 'setOriginId',
        'origin_type' => 'setOriginType',
        'original_currency_amount' => 'setOriginalCurrencyAmount',
        'product_id' => 'setProductId',
        'reference' => 'setReference',
        'related_hold_hay_id' => 'setRelatedHoldHayId',
        'reported_fraudulent' => 'setReportedFraudulent',
        'rolling_account_balance' => 'setRollingAccountBalance',
        'transaction_channel' => 'setTransactionChannel',
        'transaction_hay_id' => 'setTransactionHayId',
        'transaction_time_utc' => 'setTransactionTimeUtc',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_hay_id' => 'getAccountHayId',
        'card_id' => 'getCardId',
        'category' => 'getCategory',
        'clearing_time_utc' => 'getClearingTimeUtc',
        'counterpart_details' => 'getCounterpartDetails',
        'counterpart_name' => 'getCounterpartName',
        'country_of_expenditure' => 'getCountryOfExpenditure',
        'currency_amount' => 'getCurrencyAmount',
        'customer_id' => 'getCustomerId',
        'description' => 'getDescription',
        'mandate_payment_details' => 'getMandatePaymentDetails',
        'origin_channel' => 'getOriginChannel',
        'origin_id' => 'getOriginId',
        'origin_type' => 'getOriginType',
        'original_currency_amount' => 'getOriginalCurrencyAmount',
        'product_id' => 'getProductId',
        'reference' => 'getReference',
        'related_hold_hay_id' => 'getRelatedHoldHayId',
        'reported_fraudulent' => 'getReportedFraudulent',
        'rolling_account_balance' => 'getRollingAccountBalance',
        'transaction_channel' => 'getTransactionChannel',
        'transaction_hay_id' => 'getTransactionHayId',
        'transaction_time_utc' => 'getTransactionTimeUtc',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const COUNTRY_OF_EXPENDITURE_AFGHANISTAN = 'AFGHANISTAN';
    public const COUNTRY_OF_EXPENDITURE_ALAND_ISLANDS = 'ALAND_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_ALBANIA = 'ALBANIA';
    public const COUNTRY_OF_EXPENDITURE_ALGERIA = 'ALGERIA';
    public const COUNTRY_OF_EXPENDITURE_AMERICAN_SAMOA = 'AMERICAN_SAMOA';
    public const COUNTRY_OF_EXPENDITURE_ANDORRA = 'ANDORRA';
    public const COUNTRY_OF_EXPENDITURE_ANGOLA = 'ANGOLA';
    public const COUNTRY_OF_EXPENDITURE_ANGUILLA = 'ANGUILLA';
    public const COUNTRY_OF_EXPENDITURE_ANTARCTICA = 'ANTARCTICA';
    public const COUNTRY_OF_EXPENDITURE_ANTIGUA_AND_BARBUDA = 'ANTIGUA_AND_BARBUDA';
    public const COUNTRY_OF_EXPENDITURE_ARGENTINA = 'ARGENTINA';
    public const COUNTRY_OF_EXPENDITURE_ARMENIA = 'ARMENIA';
    public const COUNTRY_OF_EXPENDITURE_ARUBA = 'ARUBA';
    public const COUNTRY_OF_EXPENDITURE_AUSTRALIA = 'AUSTRALIA';
    public const COUNTRY_OF_EXPENDITURE_AUSTRIA = 'AUSTRIA';
    public const COUNTRY_OF_EXPENDITURE_AZERBAIJAN = 'AZERBAIJAN';
    public const COUNTRY_OF_EXPENDITURE_BAHAMAS = 'BAHAMAS';
    public const COUNTRY_OF_EXPENDITURE_BAHRAIN = 'BAHRAIN';
    public const COUNTRY_OF_EXPENDITURE_BANGLADESH = 'BANGLADESH';
    public const COUNTRY_OF_EXPENDITURE_BARBADOS = 'BARBADOS';
    public const COUNTRY_OF_EXPENDITURE_BELARUS = 'BELARUS';
    public const COUNTRY_OF_EXPENDITURE_BELGIUM = 'BELGIUM';
    public const COUNTRY_OF_EXPENDITURE_BELIZE = 'BELIZE';
    public const COUNTRY_OF_EXPENDITURE_BENIN = 'BENIN';
    public const COUNTRY_OF_EXPENDITURE_BERMUDA = 'BERMUDA';
    public const COUNTRY_OF_EXPENDITURE_BHUTAN = 'BHUTAN';
    public const COUNTRY_OF_EXPENDITURE_BOLIVIA = 'BOLIVIA';
    public const COUNTRY_OF_EXPENDITURE_CARIBBEAN_NETHERLANDS = 'CARIBBEAN_NETHERLANDS';
    public const COUNTRY_OF_EXPENDITURE_BOSNIA_AND_HERZEGOVINA = 'BOSNIA_AND_HERZEGOVINA';
    public const COUNTRY_OF_EXPENDITURE_BOTSWANA = 'BOTSWANA';
    public const COUNTRY_OF_EXPENDITURE_BOUVET_ISLAND = 'BOUVET_ISLAND';
    public const COUNTRY_OF_EXPENDITURE_BRAZIL = 'BRAZIL';
    public const COUNTRY_OF_EXPENDITURE_BRITISH_INDIAN_OCEAN_TERRITORY = 'BRITISH_INDIAN_OCEAN_TERRITORY';
    public const COUNTRY_OF_EXPENDITURE_BRUNEI = 'BRUNEI';
    public const COUNTRY_OF_EXPENDITURE_BULGARIA = 'BULGARIA';
    public const COUNTRY_OF_EXPENDITURE_BURKINA_FASO = 'BURKINA_FASO';
    public const COUNTRY_OF_EXPENDITURE_BURUNDI = 'BURUNDI';
    public const COUNTRY_OF_EXPENDITURE_CAPE_VERDE = 'CAPE_VERDE';
    public const COUNTRY_OF_EXPENDITURE_CAMBODIA = 'CAMBODIA';
    public const COUNTRY_OF_EXPENDITURE_CAMEROON = 'CAMEROON';
    public const COUNTRY_OF_EXPENDITURE_CANADA = 'CANADA';
    public const COUNTRY_OF_EXPENDITURE_CAYMAN_ISLANDS = 'CAYMAN_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_CENTRAL_AFRICAN_REPUBLIC = 'CENTRAL_AFRICAN_REPUBLIC';
    public const COUNTRY_OF_EXPENDITURE_CHAD = 'CHAD';
    public const COUNTRY_OF_EXPENDITURE_CHILE = 'CHILE';
    public const COUNTRY_OF_EXPENDITURE_CHINA = 'CHINA';
    public const COUNTRY_OF_EXPENDITURE_CHRISTMAS_ISLAND = 'CHRISTMAS_ISLAND';
    public const COUNTRY_OF_EXPENDITURE_COCOS_ISLANDS = 'COCOS_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_COLOMBIA = 'COLOMBIA';
    public const COUNTRY_OF_EXPENDITURE_COMOROS = 'COMOROS';
    public const COUNTRY_OF_EXPENDITURE_REPUBLIC_OF_THE_CONGO = 'REPUBLIC_OF_THE_CONGO';
    public const COUNTRY_OF_EXPENDITURE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO = 'DEMOCRATIC_REPUBLIC_OF_THE_CONGO';
    public const COUNTRY_OF_EXPENDITURE_COOK_ISLANDS = 'COOK_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_COSTA_RICA = 'COSTA_RICA';
    public const COUNTRY_OF_EXPENDITURE_IVORY_COAST = 'IVORY_COAST';
    public const COUNTRY_OF_EXPENDITURE_CROATIA = 'CROATIA';
    public const COUNTRY_OF_EXPENDITURE_CUBA = 'CUBA';
    public const COUNTRY_OF_EXPENDITURE_CURACAO = 'CURACAO';
    public const COUNTRY_OF_EXPENDITURE_CYPRUS = 'CYPRUS';
    public const COUNTRY_OF_EXPENDITURE_CZECHIA = 'CZECHIA';
    public const COUNTRY_OF_EXPENDITURE_DENMARK = 'DENMARK';
    public const COUNTRY_OF_EXPENDITURE_DJIBOUTI = 'DJIBOUTI';
    public const COUNTRY_OF_EXPENDITURE_DOMINICA = 'DOMINICA';
    public const COUNTRY_OF_EXPENDITURE_DOMINICAN_REPUBLIC = 'DOMINICAN_REPUBLIC';
    public const COUNTRY_OF_EXPENDITURE_ECUADOR = 'ECUADOR';
    public const COUNTRY_OF_EXPENDITURE_EGYPT = 'EGYPT';
    public const COUNTRY_OF_EXPENDITURE_EL_SALVADOR = 'EL_SALVADOR';
    public const COUNTRY_OF_EXPENDITURE_EQUATORIAL_GUINEA = 'EQUATORIAL_GUINEA';
    public const COUNTRY_OF_EXPENDITURE_ERITREA = 'ERITREA';
    public const COUNTRY_OF_EXPENDITURE_ESTONIA = 'ESTONIA';
    public const COUNTRY_OF_EXPENDITURE_ESWATINI = 'ESWATINI';
    public const COUNTRY_OF_EXPENDITURE_ETHIOPIA = 'ETHIOPIA';
    public const COUNTRY_OF_EXPENDITURE_FALKLAND_ISLANDS = 'FALKLAND_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_FAROE_ISLANDS = 'FAROE_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_FIJI = 'FIJI';
    public const COUNTRY_OF_EXPENDITURE_FINLAND = 'FINLAND';
    public const COUNTRY_OF_EXPENDITURE_FRANCE = 'FRANCE';
    public const COUNTRY_OF_EXPENDITURE_FRENCH_GUIANA = 'FRENCH_GUIANA';
    public const COUNTRY_OF_EXPENDITURE_FRENCH_POLYNESIA = 'FRENCH_POLYNESIA';
    public const COUNTRY_OF_EXPENDITURE_FRENCH_SOUTHERN_AND_ANTARCTIC_LANDS = 'FRENCH_SOUTHERN_AND_ANTARCTIC_LANDS';
    public const COUNTRY_OF_EXPENDITURE_GABON = 'GABON';
    public const COUNTRY_OF_EXPENDITURE_THE_GAMBIA = 'THE_GAMBIA';
    public const COUNTRY_OF_EXPENDITURE_GEORGIA = 'GEORGIA';
    public const COUNTRY_OF_EXPENDITURE_GERMANY = 'GERMANY';
    public const COUNTRY_OF_EXPENDITURE_GHANA = 'GHANA';
    public const COUNTRY_OF_EXPENDITURE_GIBRALTAR = 'GIBRALTAR';
    public const COUNTRY_OF_EXPENDITURE_GREECE = 'GREECE';
    public const COUNTRY_OF_EXPENDITURE_GREENLAND = 'GREENLAND';
    public const COUNTRY_OF_EXPENDITURE_GRENADA = 'GRENADA';
    public const COUNTRY_OF_EXPENDITURE_GUADELOUPE = 'GUADELOUPE';
    public const COUNTRY_OF_EXPENDITURE_GUAM = 'GUAM';
    public const COUNTRY_OF_EXPENDITURE_GUATEMALA = 'GUATEMALA';
    public const COUNTRY_OF_EXPENDITURE_GUERNSEY = 'GUERNSEY';
    public const COUNTRY_OF_EXPENDITURE_GUINEA = 'GUINEA';
    public const COUNTRY_OF_EXPENDITURE_GUINEA_BISSAU = 'GUINEA_BISSAU';
    public const COUNTRY_OF_EXPENDITURE_GUYANA = 'GUYANA';
    public const COUNTRY_OF_EXPENDITURE_HAITI = 'HAITI';
    public const COUNTRY_OF_EXPENDITURE_HEARD_ISLAND_AND_MCDONALD_ISLANDS = 'HEARD_ISLAND_AND_MCDONALD_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_VATICAN_CITY = 'VATICAN_CITY';
    public const COUNTRY_OF_EXPENDITURE_HONDURAS = 'HONDURAS';
    public const COUNTRY_OF_EXPENDITURE_HONG_KONG = 'HONG_KONG';
    public const COUNTRY_OF_EXPENDITURE_HUNGARY = 'HUNGARY';
    public const COUNTRY_OF_EXPENDITURE_ICELAND = 'ICELAND';
    public const COUNTRY_OF_EXPENDITURE_INDIA = 'INDIA';
    public const COUNTRY_OF_EXPENDITURE_INDONESIA = 'INDONESIA';
    public const COUNTRY_OF_EXPENDITURE_IRAN = 'IRAN';
    public const COUNTRY_OF_EXPENDITURE_IRAQ = 'IRAQ';
    public const COUNTRY_OF_EXPENDITURE_IRELAND = 'IRELAND';
    public const COUNTRY_OF_EXPENDITURE_ISLE_OF_MAN = 'ISLE_OF_MAN';
    public const COUNTRY_OF_EXPENDITURE_ISRAEL = 'ISRAEL';
    public const COUNTRY_OF_EXPENDITURE_ITALY = 'ITALY';
    public const COUNTRY_OF_EXPENDITURE_JAMAICA = 'JAMAICA';
    public const COUNTRY_OF_EXPENDITURE_JAPAN = 'JAPAN';
    public const COUNTRY_OF_EXPENDITURE_JERSEY = 'JERSEY';
    public const COUNTRY_OF_EXPENDITURE_JORDAN = 'JORDAN';
    public const COUNTRY_OF_EXPENDITURE_KAZAKHSTAN = 'KAZAKHSTAN';
    public const COUNTRY_OF_EXPENDITURE_KENYA = 'KENYA';
    public const COUNTRY_OF_EXPENDITURE_KIRIBATI = 'KIRIBATI';
    public const COUNTRY_OF_EXPENDITURE_NORTH_KOREA = 'NORTH_KOREA';
    public const COUNTRY_OF_EXPENDITURE_SOUTH_KOREA = 'SOUTH_KOREA';
    public const COUNTRY_OF_EXPENDITURE_KUWAIT = 'KUWAIT';
    public const COUNTRY_OF_EXPENDITURE_KYRGYZSTAN = 'KYRGYZSTAN';
    public const COUNTRY_OF_EXPENDITURE_LAOS = 'LAOS';
    public const COUNTRY_OF_EXPENDITURE_LATVIA = 'LATVIA';
    public const COUNTRY_OF_EXPENDITURE_LEBANON = 'LEBANON';
    public const COUNTRY_OF_EXPENDITURE_LESOTHO = 'LESOTHO';
    public const COUNTRY_OF_EXPENDITURE_LIBERIA = 'LIBERIA';
    public const COUNTRY_OF_EXPENDITURE_LIBYA = 'LIBYA';
    public const COUNTRY_OF_EXPENDITURE_LIECHTENSTEIN = 'LIECHTENSTEIN';
    public const COUNTRY_OF_EXPENDITURE_LITHUANIA = 'LITHUANIA';
    public const COUNTRY_OF_EXPENDITURE_LUXEMBOURG = 'LUXEMBOURG';
    public const COUNTRY_OF_EXPENDITURE_MACAU = 'MACAU';
    public const COUNTRY_OF_EXPENDITURE_MACEDONIA = 'MACEDONIA';
    public const COUNTRY_OF_EXPENDITURE_MADAGASCAR = 'MADAGASCAR';
    public const COUNTRY_OF_EXPENDITURE_MALAWI = 'MALAWI';
    public const COUNTRY_OF_EXPENDITURE_MALAYSIA = 'MALAYSIA';
    public const COUNTRY_OF_EXPENDITURE_MALDIVES = 'MALDIVES';
    public const COUNTRY_OF_EXPENDITURE_MALI = 'MALI';
    public const COUNTRY_OF_EXPENDITURE_MALTA = 'MALTA';
    public const COUNTRY_OF_EXPENDITURE_MARSHALL_ISLANDS = 'MARSHALL_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_MARTINIQUE = 'MARTINIQUE';
    public const COUNTRY_OF_EXPENDITURE_MAURITANIA = 'MAURITANIA';
    public const COUNTRY_OF_EXPENDITURE_MAURITIUS = 'MAURITIUS';
    public const COUNTRY_OF_EXPENDITURE_MAYOTTE = 'MAYOTTE';
    public const COUNTRY_OF_EXPENDITURE_MEXICO = 'MEXICO';
    public const COUNTRY_OF_EXPENDITURE_MICRONESIA = 'MICRONESIA';
    public const COUNTRY_OF_EXPENDITURE_MOLDOVA = 'MOLDOVA';
    public const COUNTRY_OF_EXPENDITURE_MONACO = 'MONACO';
    public const COUNTRY_OF_EXPENDITURE_MONGOLIA = 'MONGOLIA';
    public const COUNTRY_OF_EXPENDITURE_MONTENEGRO = 'MONTENEGRO';
    public const COUNTRY_OF_EXPENDITURE_MONTSERRAT = 'MONTSERRAT';
    public const COUNTRY_OF_EXPENDITURE_MOROCCO = 'MOROCCO';
    public const COUNTRY_OF_EXPENDITURE_MOZAMBIQUE = 'MOZAMBIQUE';
    public const COUNTRY_OF_EXPENDITURE_MYANMAR = 'MYANMAR';
    public const COUNTRY_OF_EXPENDITURE_NAMIBIA = 'NAMIBIA';
    public const COUNTRY_OF_EXPENDITURE_NAURU = 'NAURU';
    public const COUNTRY_OF_EXPENDITURE_NEPAL = 'NEPAL';
    public const COUNTRY_OF_EXPENDITURE_NETHERLANDS = 'NETHERLANDS';
    public const COUNTRY_OF_EXPENDITURE_NEW_CALEDONIA = 'NEW_CALEDONIA';
    public const COUNTRY_OF_EXPENDITURE_NEW_ZEALAND = 'NEW_ZEALAND';
    public const COUNTRY_OF_EXPENDITURE_NICARAGUA = 'NICARAGUA';
    public const COUNTRY_OF_EXPENDITURE_NIGER = 'NIGER';
    public const COUNTRY_OF_EXPENDITURE_NIGERIA = 'NIGERIA';
    public const COUNTRY_OF_EXPENDITURE_NIUE = 'NIUE';
    public const COUNTRY_OF_EXPENDITURE_NORFOLK_ISLAND = 'NORFOLK_ISLAND';
    public const COUNTRY_OF_EXPENDITURE_NORTHERN_MARIANA_ISLANDS = 'NORTHERN_MARIANA_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_NORWAY = 'NORWAY';
    public const COUNTRY_OF_EXPENDITURE_OMAN = 'OMAN';
    public const COUNTRY_OF_EXPENDITURE_PAKISTAN = 'PAKISTAN';
    public const COUNTRY_OF_EXPENDITURE_PALAU = 'PALAU';
    public const COUNTRY_OF_EXPENDITURE_PALESTINE = 'PALESTINE';
    public const COUNTRY_OF_EXPENDITURE_PANAMA = 'PANAMA';
    public const COUNTRY_OF_EXPENDITURE_PAPUA_NEW_GUINEA = 'PAPUA_NEW_GUINEA';
    public const COUNTRY_OF_EXPENDITURE_PARAGUAY = 'PARAGUAY';
    public const COUNTRY_OF_EXPENDITURE_PERU = 'PERU';
    public const COUNTRY_OF_EXPENDITURE_PHILIPPINES = 'PHILIPPINES';
    public const COUNTRY_OF_EXPENDITURE_PITCAIRN_ISLANDS = 'PITCAIRN_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_POLAND = 'POLAND';
    public const COUNTRY_OF_EXPENDITURE_PORTUGAL = 'PORTUGAL';
    public const COUNTRY_OF_EXPENDITURE_PUERTO_RICO = 'PUERTO_RICO';
    public const COUNTRY_OF_EXPENDITURE_QATAR = 'QATAR';
    public const COUNTRY_OF_EXPENDITURE_REUNION = 'REUNION';
    public const COUNTRY_OF_EXPENDITURE_ROMANIA = 'ROMANIA';
    public const COUNTRY_OF_EXPENDITURE_RUSSIA = 'RUSSIA';
    public const COUNTRY_OF_EXPENDITURE_RWANDA = 'RWANDA';
    public const COUNTRY_OF_EXPENDITURE_SAINT_BARTHELEMY = 'SAINT_BARTHELEMY';
    public const COUNTRY_OF_EXPENDITURE_SAINT_HELENA = 'SAINT_HELENA';
    public const COUNTRY_OF_EXPENDITURE_SAINT_KITTS_AND_NEVIS = 'SAINT_KITTS_AND_NEVIS';
    public const COUNTRY_OF_EXPENDITURE_SAINT_LUCIA = 'SAINT_LUCIA';
    public const COUNTRY_OF_EXPENDITURE_SAINT_MARTIN_FRENCH_PART = 'SAINT_MARTIN_FRENCH_PART';
    public const COUNTRY_OF_EXPENDITURE_SAINT_PIERRE_AND_MIQUELON = 'SAINT_PIERRE_AND_MIQUELON';
    public const COUNTRY_OF_EXPENDITURE_SAINT_VINCENT_AND_THE_GRENADINES = 'SAINT_VINCENT_AND_THE_GRENADINES';
    public const COUNTRY_OF_EXPENDITURE_SAMOA = 'SAMOA';
    public const COUNTRY_OF_EXPENDITURE_SAN_MARINO = 'SAN_MARINO';
    public const COUNTRY_OF_EXPENDITURE_SAO_TOME_AND_PRINCIPE = 'SAO_TOME_AND_PRINCIPE';
    public const COUNTRY_OF_EXPENDITURE_SAUDI_ARABIA = 'SAUDI_ARABIA';
    public const COUNTRY_OF_EXPENDITURE_SENEGAL = 'SENEGAL';
    public const COUNTRY_OF_EXPENDITURE_SERBIA = 'SERBIA';
    public const COUNTRY_OF_EXPENDITURE_SEYCHELLES = 'SEYCHELLES';
    public const COUNTRY_OF_EXPENDITURE_SIERRA_LEONE = 'SIERRA_LEONE';
    public const COUNTRY_OF_EXPENDITURE_SINGAPORE = 'SINGAPORE';
    public const COUNTRY_OF_EXPENDITURE_SAINT_MARTIN_DUTCH_PART = 'SAINT_MARTIN_DUTCH_PART';
    public const COUNTRY_OF_EXPENDITURE_SLOVAKIA = 'SLOVAKIA';
    public const COUNTRY_OF_EXPENDITURE_SLOVENIA = 'SLOVENIA';
    public const COUNTRY_OF_EXPENDITURE_SOLOMON_ISLANDS = 'SOLOMON_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_SOMALIA = 'SOMALIA';
    public const COUNTRY_OF_EXPENDITURE_SOUTH_AFRICA = 'SOUTH_AFRICA';
    public const COUNTRY_OF_EXPENDITURE_SOUTH_GEORGIA = 'SOUTH_GEORGIA';
    public const COUNTRY_OF_EXPENDITURE_SOUTH_SUDAN = 'SOUTH_SUDAN';
    public const COUNTRY_OF_EXPENDITURE_SPAIN = 'SPAIN';
    public const COUNTRY_OF_EXPENDITURE_SRI_LANKA = 'SRI_LANKA';
    public const COUNTRY_OF_EXPENDITURE_SUDAN = 'SUDAN';
    public const COUNTRY_OF_EXPENDITURE_SURINAME = 'SURINAME';
    public const COUNTRY_OF_EXPENDITURE_SVALBARD_AND_JAN_MAYEN = 'SVALBARD_AND_JAN_MAYEN';
    public const COUNTRY_OF_EXPENDITURE_SWEDEN = 'SWEDEN';
    public const COUNTRY_OF_EXPENDITURE_SWITZERLAND = 'SWITZERLAND';
    public const COUNTRY_OF_EXPENDITURE_SYRIA = 'SYRIA';
    public const COUNTRY_OF_EXPENDITURE_TAIWAN = 'TAIWAN';
    public const COUNTRY_OF_EXPENDITURE_TAJIKISTAN = 'TAJIKISTAN';
    public const COUNTRY_OF_EXPENDITURE_TANZANIA = 'TANZANIA';
    public const COUNTRY_OF_EXPENDITURE_THAILAND = 'THAILAND';
    public const COUNTRY_OF_EXPENDITURE_TIMOR_LESTE = 'TIMOR_LESTE';
    public const COUNTRY_OF_EXPENDITURE_TOGO = 'TOGO';
    public const COUNTRY_OF_EXPENDITURE_TOKELAU = 'TOKELAU';
    public const COUNTRY_OF_EXPENDITURE_TONGA = 'TONGA';
    public const COUNTRY_OF_EXPENDITURE_TRINIDAD_AND_TOBAGO = 'TRINIDAD_AND_TOBAGO';
    public const COUNTRY_OF_EXPENDITURE_TUNISIA = 'TUNISIA';
    public const COUNTRY_OF_EXPENDITURE_TURKEY = 'TURKEY';
    public const COUNTRY_OF_EXPENDITURE_TURKMENISTAN = 'TURKMENISTAN';
    public const COUNTRY_OF_EXPENDITURE_TURKS_AND_CAICOS_ISLANDS = 'TURKS_AND_CAICOS_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_TUVALU = 'TUVALU';
    public const COUNTRY_OF_EXPENDITURE_UGANDA = 'UGANDA';
    public const COUNTRY_OF_EXPENDITURE_UKRAINE = 'UKRAINE';
    public const COUNTRY_OF_EXPENDITURE_UNITED_ARAB_EMIRATES = 'UNITED_ARAB_EMIRATES';
    public const COUNTRY_OF_EXPENDITURE_UNITED_KINGDOM = 'UNITED_KINGDOM';
    public const COUNTRY_OF_EXPENDITURE_UNITED_STATES_OF_AMERICA = 'UNITED_STATES_OF_AMERICA';
    public const COUNTRY_OF_EXPENDITURE_UNITED_STATES_MINOR_OUTLYING_ISLANDS = 'UNITED_STATES_MINOR_OUTLYING_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_URUGUAY = 'URUGUAY';
    public const COUNTRY_OF_EXPENDITURE_UZBEKISTAN = 'UZBEKISTAN';
    public const COUNTRY_OF_EXPENDITURE_VANUATU = 'VANUATU';
    public const COUNTRY_OF_EXPENDITURE_VENEZUELA = 'VENEZUELA';
    public const COUNTRY_OF_EXPENDITURE_VIETNAM = 'VIETNAM';
    public const COUNTRY_OF_EXPENDITURE_BRITISH_VIRGIN_ISLANDS = 'BRITISH_VIRGIN_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_UNITED_STATES_VIRGIN_ISLANDS = 'UNITED_STATES_VIRGIN_ISLANDS';
    public const COUNTRY_OF_EXPENDITURE_WALLIS_AND_FUTUNA = 'WALLIS_AND_FUTUNA';
    public const COUNTRY_OF_EXPENDITURE_WESTERN_SAHARA = 'WESTERN_SAHARA';
    public const COUNTRY_OF_EXPENDITURE_YEMEN = 'YEMEN';
    public const COUNTRY_OF_EXPENDITURE_ZAMBIA = 'ZAMBIA';
    public const COUNTRY_OF_EXPENDITURE_ZIMBABWE = 'ZIMBABWE';
    public const ORIGIN_CHANNEL_ATM_CASH = 'ATM_CASH';
    public const ORIGIN_CHANNEL_POS_DEBIT = 'POS_DEBIT';
    public const ORIGIN_CHANNEL_VENUE = 'VENUE';
    public const ORIGIN_TYPE_CUSTOMER = 'CUSTOMER';
    public const ORIGIN_TYPE_SCHEDULED_PAYMENT = 'SCHEDULED_PAYMENT';
    public const ORIGIN_TYPE_HAAS_OPERATIONS = 'HAAS_OPERATIONS';
    public const ORIGIN_TYPE_OPERATIONS = 'OPERATIONS';
    public const ORIGIN_TYPE_MANDATE_PAYMENT = 'MANDATE_PAYMENT';
    public const ORIGIN_TYPE_DIRECT_DEBIT = 'DIRECT_DEBIT';
    public const TRANSACTION_CHANNEL_VISA_LEGACY = 'VISA_LEGACY';
    public const TRANSACTION_CHANNEL_VISA_REFUNDS_LEGACY = 'VISA_REFUNDS_LEGACY';
    public const TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT = 'VISA_CARD_NOT_PRESENT';
    public const TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT_INTERNATIONAL = 'VISA_CARD_NOT_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_VISA_CARD_PRESENT = 'VISA_CARD_PRESENT';
    public const TRANSACTION_CHANNEL_VISA_CARD_PRESENT_INTERNATIONAL = 'VISA_CARD_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT = 'APPLE_PAY_CARD_NOT_PRESENT';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL = 'APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT = 'APPLE_PAY_CARD_PRESENT';
    public const TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT_INTERNATIONAL = 'APPLE_PAY_CARD_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT = 'GOOGLE_PAY_CARD_NOT_PRESENT';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL = 'GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT = 'GOOGLE_PAY_CARD_PRESENT';
    public const TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL = 'GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_VISA_CONTACTLESS = 'VISA_CONTACTLESS';
    public const TRANSACTION_CHANNEL_VISA_CONTACTLESS_INTERNATIONAL = 'VISA_CONTACTLESS_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_VISA_ATM = 'VISA_ATM';
    public const TRANSACTION_CHANNEL_VISA_ATM_INTERNATIONAL = 'VISA_ATM_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_CARD_REFUNDS = 'CARD_REFUNDS';
    public const TRANSACTION_CHANNEL_VISA_OTHER = 'VISA_OTHER';
    public const TRANSACTION_CHANNEL_CUSCAL_LEGACY = 'CUSCAL_LEGACY';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_IN = 'CUSCAL_DE_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_IN = 'CUSCAL_DE_DEBIT_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_IN = 'CUSCAL_DE_CREDIT_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_IN = 'CUSCAL_NPP_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_IN = 'CUSCAL_BPAY_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_FAT_ZEBRA_TRANSFER_IN = 'FAT_ZEBRA_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_IN = 'HAY_TO_HAY_TRANSFER_IN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT = 'CUSCAL_DE_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_OUT = 'CUSCAL_DE_DEBIT_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_OUT = 'CUSCAL_DE_CREDIT_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_OUT = 'CUSCAL_NPP_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_OUT = 'CUSCAL_BPAY_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_OUT = 'HAY_TO_HAY_TRANSFER_OUT';
    public const TRANSACTION_CHANNEL_CUSCAL_NPP_SOLICITED_RETURN = 'CUSCAL_NPP_SOLICITED_RETURN';
    public const TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT_RETURN = 'CUSCAL_DE_TRANSFER_OUT_RETURN';
    public const TRANSACTION_CHANNEL_DE_DEBIT_RETURN_IN = 'DE_DEBIT_RETURN_IN';
    public const TRANSACTION_CHANNEL_NPP_RETURN_IN = 'NPP_RETURN_IN';
    public const TRANSACTION_CHANNEL_NPP_RETURN_OUT = 'NPP_RETURN_OUT';
    public const TRANSACTION_CHANNEL_HAY_CREDIT = 'HAY_CREDIT';
    public const TRANSACTION_CHANNEL_APPLE_REWARD = 'APPLE_REWARD';
    public const TRANSACTION_CHANNEL_VALUE_TRANSFER = 'VALUE_TRANSFER';
    public const TRANSACTION_CHANNEL_LOAN_REPAYMENT = 'LOAN_REPAYMENT';
    public const TRANSACTION_CHANNEL_MANUAL_ADJUSTMENT = 'MANUAL_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_INTEREST_ADJUSTMENT = 'INTEREST_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_LOAN_ADJUSTMENT = 'LOAN_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_VISA_OCT_DOMESTIC = 'VISA_OCT_DOMESTIC';
    public const TRANSACTION_CHANNEL_VISA_OCT_INTERNATIONAL = 'VISA_OCT_INTERNATIONAL';
    public const TRANSACTION_CHANNEL_ACCOUNT_ADJUSTMENT = 'ACCOUNT_ADJUSTMENT';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_IN = 'HAAS_TRANSFER_EXTERNAL_IN';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_OUT = 'HAAS_TRANSFER_EXTERNAL_OUT';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_IN = 'HAAS_TRANSFER_INTERNAL_IN';
    public const TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_OUT = 'HAAS_TRANSFER_INTERNAL_OUT';
    public const TRANSACTION_CHANNEL_SERVICE_FEE = 'SERVICE_FEE';
    public const TRANSACTION_CHANNEL_BPAY_IN_REJECT = 'BPAY_IN_REJECT';
    public const TRANSACTION_CHANNEL_VISA_REFUND_DOMESTIC = 'VISA_REFUND_DOMESTIC';
    public const TRANSACTION_CHANNEL_VISA_REFUND_INTERNATIONAL = 'VISA_REFUND_INTERNATIONAL';
    public const TYPE_CARD_PRESENT_PAYMENT = 'CARD_PRESENT_PAYMENT';
    public const TYPE_CARD_NOT_PRESENT_PAYMENT = 'CARD_NOT_PRESENT_PAYMENT';
    public const TYPE_INTRABANK_TRANSFER_IN = 'INTRABANK_TRANSFER_IN';
    public const TYPE_INTRABANK_TRANSFER_OUT = 'INTRABANK_TRANSFER_OUT';
    public const TYPE_INTERBANK_TRANSFER_IN = 'INTERBANK_TRANSFER_IN';
    public const TYPE_INTERBANK_TRANSFER_OUT = 'INTERBANK_TRANSFER_OUT';
    public const TYPE_DIRECT_DEBIT_TRANSFER = 'DIRECT_DEBIT_TRANSFER';
    public const TYPE_ATM_WITHDRAWAL = 'ATM_WITHDRAWAL';
    public const TYPE_CARD_PAYMENT_REVERSAL = 'CARD_PAYMENT_REVERSAL';
    public const TYPE_INTERBANK_TRANSFER_OUT_REVERSAL = 'INTERBANK_TRANSFER_OUT_REVERSAL';
    public const TYPE_GENERAL_CREDIT = 'GENERAL_CREDIT';
    public const TYPE_GENERAL_DEBIT = 'GENERAL_DEBIT';
    public const TYPE_ORIGINAL_CREDIT = 'ORIGINAL_CREDIT';
    public const TYPE_BPAY_TRANSFER_OUT = 'BPAY_TRANSFER_OUT';
    public const TYPE_BPAY_TRANSFER_IN = 'BPAY_TRANSFER_IN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryOfExpenditureAllowableValues()
    {
        return [
            self::COUNTRY_OF_EXPENDITURE_AFGHANISTAN,
            self::COUNTRY_OF_EXPENDITURE_ALAND_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_ALBANIA,
            self::COUNTRY_OF_EXPENDITURE_ALGERIA,
            self::COUNTRY_OF_EXPENDITURE_AMERICAN_SAMOA,
            self::COUNTRY_OF_EXPENDITURE_ANDORRA,
            self::COUNTRY_OF_EXPENDITURE_ANGOLA,
            self::COUNTRY_OF_EXPENDITURE_ANGUILLA,
            self::COUNTRY_OF_EXPENDITURE_ANTARCTICA,
            self::COUNTRY_OF_EXPENDITURE_ANTIGUA_AND_BARBUDA,
            self::COUNTRY_OF_EXPENDITURE_ARGENTINA,
            self::COUNTRY_OF_EXPENDITURE_ARMENIA,
            self::COUNTRY_OF_EXPENDITURE_ARUBA,
            self::COUNTRY_OF_EXPENDITURE_AUSTRALIA,
            self::COUNTRY_OF_EXPENDITURE_AUSTRIA,
            self::COUNTRY_OF_EXPENDITURE_AZERBAIJAN,
            self::COUNTRY_OF_EXPENDITURE_BAHAMAS,
            self::COUNTRY_OF_EXPENDITURE_BAHRAIN,
            self::COUNTRY_OF_EXPENDITURE_BANGLADESH,
            self::COUNTRY_OF_EXPENDITURE_BARBADOS,
            self::COUNTRY_OF_EXPENDITURE_BELARUS,
            self::COUNTRY_OF_EXPENDITURE_BELGIUM,
            self::COUNTRY_OF_EXPENDITURE_BELIZE,
            self::COUNTRY_OF_EXPENDITURE_BENIN,
            self::COUNTRY_OF_EXPENDITURE_BERMUDA,
            self::COUNTRY_OF_EXPENDITURE_BHUTAN,
            self::COUNTRY_OF_EXPENDITURE_BOLIVIA,
            self::COUNTRY_OF_EXPENDITURE_CARIBBEAN_NETHERLANDS,
            self::COUNTRY_OF_EXPENDITURE_BOSNIA_AND_HERZEGOVINA,
            self::COUNTRY_OF_EXPENDITURE_BOTSWANA,
            self::COUNTRY_OF_EXPENDITURE_BOUVET_ISLAND,
            self::COUNTRY_OF_EXPENDITURE_BRAZIL,
            self::COUNTRY_OF_EXPENDITURE_BRITISH_INDIAN_OCEAN_TERRITORY,
            self::COUNTRY_OF_EXPENDITURE_BRUNEI,
            self::COUNTRY_OF_EXPENDITURE_BULGARIA,
            self::COUNTRY_OF_EXPENDITURE_BURKINA_FASO,
            self::COUNTRY_OF_EXPENDITURE_BURUNDI,
            self::COUNTRY_OF_EXPENDITURE_CAPE_VERDE,
            self::COUNTRY_OF_EXPENDITURE_CAMBODIA,
            self::COUNTRY_OF_EXPENDITURE_CAMEROON,
            self::COUNTRY_OF_EXPENDITURE_CANADA,
            self::COUNTRY_OF_EXPENDITURE_CAYMAN_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_CENTRAL_AFRICAN_REPUBLIC,
            self::COUNTRY_OF_EXPENDITURE_CHAD,
            self::COUNTRY_OF_EXPENDITURE_CHILE,
            self::COUNTRY_OF_EXPENDITURE_CHINA,
            self::COUNTRY_OF_EXPENDITURE_CHRISTMAS_ISLAND,
            self::COUNTRY_OF_EXPENDITURE_COCOS_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_COLOMBIA,
            self::COUNTRY_OF_EXPENDITURE_COMOROS,
            self::COUNTRY_OF_EXPENDITURE_REPUBLIC_OF_THE_CONGO,
            self::COUNTRY_OF_EXPENDITURE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO,
            self::COUNTRY_OF_EXPENDITURE_COOK_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_COSTA_RICA,
            self::COUNTRY_OF_EXPENDITURE_IVORY_COAST,
            self::COUNTRY_OF_EXPENDITURE_CROATIA,
            self::COUNTRY_OF_EXPENDITURE_CUBA,
            self::COUNTRY_OF_EXPENDITURE_CURACAO,
            self::COUNTRY_OF_EXPENDITURE_CYPRUS,
            self::COUNTRY_OF_EXPENDITURE_CZECHIA,
            self::COUNTRY_OF_EXPENDITURE_DENMARK,
            self::COUNTRY_OF_EXPENDITURE_DJIBOUTI,
            self::COUNTRY_OF_EXPENDITURE_DOMINICA,
            self::COUNTRY_OF_EXPENDITURE_DOMINICAN_REPUBLIC,
            self::COUNTRY_OF_EXPENDITURE_ECUADOR,
            self::COUNTRY_OF_EXPENDITURE_EGYPT,
            self::COUNTRY_OF_EXPENDITURE_EL_SALVADOR,
            self::COUNTRY_OF_EXPENDITURE_EQUATORIAL_GUINEA,
            self::COUNTRY_OF_EXPENDITURE_ERITREA,
            self::COUNTRY_OF_EXPENDITURE_ESTONIA,
            self::COUNTRY_OF_EXPENDITURE_ESWATINI,
            self::COUNTRY_OF_EXPENDITURE_ETHIOPIA,
            self::COUNTRY_OF_EXPENDITURE_FALKLAND_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_FAROE_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_FIJI,
            self::COUNTRY_OF_EXPENDITURE_FINLAND,
            self::COUNTRY_OF_EXPENDITURE_FRANCE,
            self::COUNTRY_OF_EXPENDITURE_FRENCH_GUIANA,
            self::COUNTRY_OF_EXPENDITURE_FRENCH_POLYNESIA,
            self::COUNTRY_OF_EXPENDITURE_FRENCH_SOUTHERN_AND_ANTARCTIC_LANDS,
            self::COUNTRY_OF_EXPENDITURE_GABON,
            self::COUNTRY_OF_EXPENDITURE_THE_GAMBIA,
            self::COUNTRY_OF_EXPENDITURE_GEORGIA,
            self::COUNTRY_OF_EXPENDITURE_GERMANY,
            self::COUNTRY_OF_EXPENDITURE_GHANA,
            self::COUNTRY_OF_EXPENDITURE_GIBRALTAR,
            self::COUNTRY_OF_EXPENDITURE_GREECE,
            self::COUNTRY_OF_EXPENDITURE_GREENLAND,
            self::COUNTRY_OF_EXPENDITURE_GRENADA,
            self::COUNTRY_OF_EXPENDITURE_GUADELOUPE,
            self::COUNTRY_OF_EXPENDITURE_GUAM,
            self::COUNTRY_OF_EXPENDITURE_GUATEMALA,
            self::COUNTRY_OF_EXPENDITURE_GUERNSEY,
            self::COUNTRY_OF_EXPENDITURE_GUINEA,
            self::COUNTRY_OF_EXPENDITURE_GUINEA_BISSAU,
            self::COUNTRY_OF_EXPENDITURE_GUYANA,
            self::COUNTRY_OF_EXPENDITURE_HAITI,
            self::COUNTRY_OF_EXPENDITURE_HEARD_ISLAND_AND_MCDONALD_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_VATICAN_CITY,
            self::COUNTRY_OF_EXPENDITURE_HONDURAS,
            self::COUNTRY_OF_EXPENDITURE_HONG_KONG,
            self::COUNTRY_OF_EXPENDITURE_HUNGARY,
            self::COUNTRY_OF_EXPENDITURE_ICELAND,
            self::COUNTRY_OF_EXPENDITURE_INDIA,
            self::COUNTRY_OF_EXPENDITURE_INDONESIA,
            self::COUNTRY_OF_EXPENDITURE_IRAN,
            self::COUNTRY_OF_EXPENDITURE_IRAQ,
            self::COUNTRY_OF_EXPENDITURE_IRELAND,
            self::COUNTRY_OF_EXPENDITURE_ISLE_OF_MAN,
            self::COUNTRY_OF_EXPENDITURE_ISRAEL,
            self::COUNTRY_OF_EXPENDITURE_ITALY,
            self::COUNTRY_OF_EXPENDITURE_JAMAICA,
            self::COUNTRY_OF_EXPENDITURE_JAPAN,
            self::COUNTRY_OF_EXPENDITURE_JERSEY,
            self::COUNTRY_OF_EXPENDITURE_JORDAN,
            self::COUNTRY_OF_EXPENDITURE_KAZAKHSTAN,
            self::COUNTRY_OF_EXPENDITURE_KENYA,
            self::COUNTRY_OF_EXPENDITURE_KIRIBATI,
            self::COUNTRY_OF_EXPENDITURE_NORTH_KOREA,
            self::COUNTRY_OF_EXPENDITURE_SOUTH_KOREA,
            self::COUNTRY_OF_EXPENDITURE_KUWAIT,
            self::COUNTRY_OF_EXPENDITURE_KYRGYZSTAN,
            self::COUNTRY_OF_EXPENDITURE_LAOS,
            self::COUNTRY_OF_EXPENDITURE_LATVIA,
            self::COUNTRY_OF_EXPENDITURE_LEBANON,
            self::COUNTRY_OF_EXPENDITURE_LESOTHO,
            self::COUNTRY_OF_EXPENDITURE_LIBERIA,
            self::COUNTRY_OF_EXPENDITURE_LIBYA,
            self::COUNTRY_OF_EXPENDITURE_LIECHTENSTEIN,
            self::COUNTRY_OF_EXPENDITURE_LITHUANIA,
            self::COUNTRY_OF_EXPENDITURE_LUXEMBOURG,
            self::COUNTRY_OF_EXPENDITURE_MACAU,
            self::COUNTRY_OF_EXPENDITURE_MACEDONIA,
            self::COUNTRY_OF_EXPENDITURE_MADAGASCAR,
            self::COUNTRY_OF_EXPENDITURE_MALAWI,
            self::COUNTRY_OF_EXPENDITURE_MALAYSIA,
            self::COUNTRY_OF_EXPENDITURE_MALDIVES,
            self::COUNTRY_OF_EXPENDITURE_MALI,
            self::COUNTRY_OF_EXPENDITURE_MALTA,
            self::COUNTRY_OF_EXPENDITURE_MARSHALL_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_MARTINIQUE,
            self::COUNTRY_OF_EXPENDITURE_MAURITANIA,
            self::COUNTRY_OF_EXPENDITURE_MAURITIUS,
            self::COUNTRY_OF_EXPENDITURE_MAYOTTE,
            self::COUNTRY_OF_EXPENDITURE_MEXICO,
            self::COUNTRY_OF_EXPENDITURE_MICRONESIA,
            self::COUNTRY_OF_EXPENDITURE_MOLDOVA,
            self::COUNTRY_OF_EXPENDITURE_MONACO,
            self::COUNTRY_OF_EXPENDITURE_MONGOLIA,
            self::COUNTRY_OF_EXPENDITURE_MONTENEGRO,
            self::COUNTRY_OF_EXPENDITURE_MONTSERRAT,
            self::COUNTRY_OF_EXPENDITURE_MOROCCO,
            self::COUNTRY_OF_EXPENDITURE_MOZAMBIQUE,
            self::COUNTRY_OF_EXPENDITURE_MYANMAR,
            self::COUNTRY_OF_EXPENDITURE_NAMIBIA,
            self::COUNTRY_OF_EXPENDITURE_NAURU,
            self::COUNTRY_OF_EXPENDITURE_NEPAL,
            self::COUNTRY_OF_EXPENDITURE_NETHERLANDS,
            self::COUNTRY_OF_EXPENDITURE_NEW_CALEDONIA,
            self::COUNTRY_OF_EXPENDITURE_NEW_ZEALAND,
            self::COUNTRY_OF_EXPENDITURE_NICARAGUA,
            self::COUNTRY_OF_EXPENDITURE_NIGER,
            self::COUNTRY_OF_EXPENDITURE_NIGERIA,
            self::COUNTRY_OF_EXPENDITURE_NIUE,
            self::COUNTRY_OF_EXPENDITURE_NORFOLK_ISLAND,
            self::COUNTRY_OF_EXPENDITURE_NORTHERN_MARIANA_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_NORWAY,
            self::COUNTRY_OF_EXPENDITURE_OMAN,
            self::COUNTRY_OF_EXPENDITURE_PAKISTAN,
            self::COUNTRY_OF_EXPENDITURE_PALAU,
            self::COUNTRY_OF_EXPENDITURE_PALESTINE,
            self::COUNTRY_OF_EXPENDITURE_PANAMA,
            self::COUNTRY_OF_EXPENDITURE_PAPUA_NEW_GUINEA,
            self::COUNTRY_OF_EXPENDITURE_PARAGUAY,
            self::COUNTRY_OF_EXPENDITURE_PERU,
            self::COUNTRY_OF_EXPENDITURE_PHILIPPINES,
            self::COUNTRY_OF_EXPENDITURE_PITCAIRN_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_POLAND,
            self::COUNTRY_OF_EXPENDITURE_PORTUGAL,
            self::COUNTRY_OF_EXPENDITURE_PUERTO_RICO,
            self::COUNTRY_OF_EXPENDITURE_QATAR,
            self::COUNTRY_OF_EXPENDITURE_REUNION,
            self::COUNTRY_OF_EXPENDITURE_ROMANIA,
            self::COUNTRY_OF_EXPENDITURE_RUSSIA,
            self::COUNTRY_OF_EXPENDITURE_RWANDA,
            self::COUNTRY_OF_EXPENDITURE_SAINT_BARTHELEMY,
            self::COUNTRY_OF_EXPENDITURE_SAINT_HELENA,
            self::COUNTRY_OF_EXPENDITURE_SAINT_KITTS_AND_NEVIS,
            self::COUNTRY_OF_EXPENDITURE_SAINT_LUCIA,
            self::COUNTRY_OF_EXPENDITURE_SAINT_MARTIN_FRENCH_PART,
            self::COUNTRY_OF_EXPENDITURE_SAINT_PIERRE_AND_MIQUELON,
            self::COUNTRY_OF_EXPENDITURE_SAINT_VINCENT_AND_THE_GRENADINES,
            self::COUNTRY_OF_EXPENDITURE_SAMOA,
            self::COUNTRY_OF_EXPENDITURE_SAN_MARINO,
            self::COUNTRY_OF_EXPENDITURE_SAO_TOME_AND_PRINCIPE,
            self::COUNTRY_OF_EXPENDITURE_SAUDI_ARABIA,
            self::COUNTRY_OF_EXPENDITURE_SENEGAL,
            self::COUNTRY_OF_EXPENDITURE_SERBIA,
            self::COUNTRY_OF_EXPENDITURE_SEYCHELLES,
            self::COUNTRY_OF_EXPENDITURE_SIERRA_LEONE,
            self::COUNTRY_OF_EXPENDITURE_SINGAPORE,
            self::COUNTRY_OF_EXPENDITURE_SAINT_MARTIN_DUTCH_PART,
            self::COUNTRY_OF_EXPENDITURE_SLOVAKIA,
            self::COUNTRY_OF_EXPENDITURE_SLOVENIA,
            self::COUNTRY_OF_EXPENDITURE_SOLOMON_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_SOMALIA,
            self::COUNTRY_OF_EXPENDITURE_SOUTH_AFRICA,
            self::COUNTRY_OF_EXPENDITURE_SOUTH_GEORGIA,
            self::COUNTRY_OF_EXPENDITURE_SOUTH_SUDAN,
            self::COUNTRY_OF_EXPENDITURE_SPAIN,
            self::COUNTRY_OF_EXPENDITURE_SRI_LANKA,
            self::COUNTRY_OF_EXPENDITURE_SUDAN,
            self::COUNTRY_OF_EXPENDITURE_SURINAME,
            self::COUNTRY_OF_EXPENDITURE_SVALBARD_AND_JAN_MAYEN,
            self::COUNTRY_OF_EXPENDITURE_SWEDEN,
            self::COUNTRY_OF_EXPENDITURE_SWITZERLAND,
            self::COUNTRY_OF_EXPENDITURE_SYRIA,
            self::COUNTRY_OF_EXPENDITURE_TAIWAN,
            self::COUNTRY_OF_EXPENDITURE_TAJIKISTAN,
            self::COUNTRY_OF_EXPENDITURE_TANZANIA,
            self::COUNTRY_OF_EXPENDITURE_THAILAND,
            self::COUNTRY_OF_EXPENDITURE_TIMOR_LESTE,
            self::COUNTRY_OF_EXPENDITURE_TOGO,
            self::COUNTRY_OF_EXPENDITURE_TOKELAU,
            self::COUNTRY_OF_EXPENDITURE_TONGA,
            self::COUNTRY_OF_EXPENDITURE_TRINIDAD_AND_TOBAGO,
            self::COUNTRY_OF_EXPENDITURE_TUNISIA,
            self::COUNTRY_OF_EXPENDITURE_TURKEY,
            self::COUNTRY_OF_EXPENDITURE_TURKMENISTAN,
            self::COUNTRY_OF_EXPENDITURE_TURKS_AND_CAICOS_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_TUVALU,
            self::COUNTRY_OF_EXPENDITURE_UGANDA,
            self::COUNTRY_OF_EXPENDITURE_UKRAINE,
            self::COUNTRY_OF_EXPENDITURE_UNITED_ARAB_EMIRATES,
            self::COUNTRY_OF_EXPENDITURE_UNITED_KINGDOM,
            self::COUNTRY_OF_EXPENDITURE_UNITED_STATES_OF_AMERICA,
            self::COUNTRY_OF_EXPENDITURE_UNITED_STATES_MINOR_OUTLYING_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_URUGUAY,
            self::COUNTRY_OF_EXPENDITURE_UZBEKISTAN,
            self::COUNTRY_OF_EXPENDITURE_VANUATU,
            self::COUNTRY_OF_EXPENDITURE_VENEZUELA,
            self::COUNTRY_OF_EXPENDITURE_VIETNAM,
            self::COUNTRY_OF_EXPENDITURE_BRITISH_VIRGIN_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_UNITED_STATES_VIRGIN_ISLANDS,
            self::COUNTRY_OF_EXPENDITURE_WALLIS_AND_FUTUNA,
            self::COUNTRY_OF_EXPENDITURE_WESTERN_SAHARA,
            self::COUNTRY_OF_EXPENDITURE_YEMEN,
            self::COUNTRY_OF_EXPENDITURE_ZAMBIA,
            self::COUNTRY_OF_EXPENDITURE_ZIMBABWE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginChannelAllowableValues()
    {
        return [
            self::ORIGIN_CHANNEL_ATM_CASH,
            self::ORIGIN_CHANNEL_POS_DEBIT,
            self::ORIGIN_CHANNEL_VENUE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginTypeAllowableValues()
    {
        return [
            self::ORIGIN_TYPE_CUSTOMER,
            self::ORIGIN_TYPE_SCHEDULED_PAYMENT,
            self::ORIGIN_TYPE_HAAS_OPERATIONS,
            self::ORIGIN_TYPE_OPERATIONS,
            self::ORIGIN_TYPE_MANDATE_PAYMENT,
            self::ORIGIN_TYPE_DIRECT_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionChannelAllowableValues()
    {
        return [
            self::TRANSACTION_CHANNEL_VISA_LEGACY,
            self::TRANSACTION_CHANNEL_VISA_REFUNDS_LEGACY,
            self::TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT,
            self::TRANSACTION_CHANNEL_VISA_CARD_NOT_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_VISA_CARD_PRESENT,
            self::TRANSACTION_CHANNEL_VISA_CARD_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT,
            self::TRANSACTION_CHANNEL_APPLE_PAY_CARD_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT,
            self::TRANSACTION_CHANNEL_GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_VISA_CONTACTLESS,
            self::TRANSACTION_CHANNEL_VISA_CONTACTLESS_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_VISA_ATM,
            self::TRANSACTION_CHANNEL_VISA_ATM_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_CARD_REFUNDS,
            self::TRANSACTION_CHANNEL_VISA_OTHER,
            self::TRANSACTION_CHANNEL_CUSCAL_LEGACY,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_FAT_ZEBRA_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_IN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_DEBIT_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_CREDIT_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_NPP_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_BPAY_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_HAY_TO_HAY_TRANSFER_OUT,
            self::TRANSACTION_CHANNEL_CUSCAL_NPP_SOLICITED_RETURN,
            self::TRANSACTION_CHANNEL_CUSCAL_DE_TRANSFER_OUT_RETURN,
            self::TRANSACTION_CHANNEL_DE_DEBIT_RETURN_IN,
            self::TRANSACTION_CHANNEL_NPP_RETURN_IN,
            self::TRANSACTION_CHANNEL_NPP_RETURN_OUT,
            self::TRANSACTION_CHANNEL_HAY_CREDIT,
            self::TRANSACTION_CHANNEL_APPLE_REWARD,
            self::TRANSACTION_CHANNEL_VALUE_TRANSFER,
            self::TRANSACTION_CHANNEL_LOAN_REPAYMENT,
            self::TRANSACTION_CHANNEL_MANUAL_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_INTEREST_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_LOAN_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_VISA_OCT_DOMESTIC,
            self::TRANSACTION_CHANNEL_VISA_OCT_INTERNATIONAL,
            self::TRANSACTION_CHANNEL_ACCOUNT_ADJUSTMENT,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_IN,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_EXTERNAL_OUT,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_IN,
            self::TRANSACTION_CHANNEL_HAAS_TRANSFER_INTERNAL_OUT,
            self::TRANSACTION_CHANNEL_SERVICE_FEE,
            self::TRANSACTION_CHANNEL_BPAY_IN_REJECT,
            self::TRANSACTION_CHANNEL_VISA_REFUND_DOMESTIC,
            self::TRANSACTION_CHANNEL_VISA_REFUND_INTERNATIONAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD_PRESENT_PAYMENT,
            self::TYPE_CARD_NOT_PRESENT_PAYMENT,
            self::TYPE_INTRABANK_TRANSFER_IN,
            self::TYPE_INTRABANK_TRANSFER_OUT,
            self::TYPE_INTERBANK_TRANSFER_IN,
            self::TYPE_INTERBANK_TRANSFER_OUT,
            self::TYPE_DIRECT_DEBIT_TRANSFER,
            self::TYPE_ATM_WITHDRAWAL,
            self::TYPE_CARD_PAYMENT_REVERSAL,
            self::TYPE_INTERBANK_TRANSFER_OUT_REVERSAL,
            self::TYPE_GENERAL_CREDIT,
            self::TYPE_GENERAL_DEBIT,
            self::TYPE_ORIGINAL_CREDIT,
            self::TYPE_BPAY_TRANSFER_OUT,
            self::TYPE_BPAY_TRANSFER_IN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_hay_id', $data ?? [], null);
        $this->setIfExists('card_id', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('clearing_time_utc', $data ?? [], null);
        $this->setIfExists('counterpart_details', $data ?? [], null);
        $this->setIfExists('counterpart_name', $data ?? [], null);
        $this->setIfExists('country_of_expenditure', $data ?? [], null);
        $this->setIfExists('currency_amount', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mandate_payment_details', $data ?? [], null);
        $this->setIfExists('origin_channel', $data ?? [], null);
        $this->setIfExists('origin_id', $data ?? [], null);
        $this->setIfExists('origin_type', $data ?? [], null);
        $this->setIfExists('original_currency_amount', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('related_hold_hay_id', $data ?? [], null);
        $this->setIfExists('reported_fraudulent', $data ?? [], null);
        $this->setIfExists('rolling_account_balance', $data ?? [], null);
        $this->setIfExists('transaction_channel', $data ?? [], null);
        $this->setIfExists('transaction_hay_id', $data ?? [], null);
        $this->setIfExists('transaction_time_utc', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getCountryOfExpenditureAllowableValues();
        if (!is_null($this->container['country_of_expenditure']) && !in_array($this->container['country_of_expenditure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'country_of_expenditure', must be one of '%s'",
                $this->container['country_of_expenditure'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOriginChannelAllowableValues();
        if (!is_null($this->container['origin_channel']) && !in_array($this->container['origin_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'origin_channel', must be one of '%s'",
                $this->container['origin_channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOriginTypeAllowableValues();
        if (!is_null($this->container['origin_type']) && !in_array($this->container['origin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'origin_type', must be one of '%s'",
                $this->container['origin_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionChannelAllowableValues();
        if (!is_null($this->container['transaction_channel']) && !in_array($this->container['transaction_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_channel', must be one of '%s'",
                $this->container['transaction_channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_hay_id
     *
     * @return string|null
     */
    public function getAccountHayId(): ?string
    {
        return $this->container['account_hay_id'];
    }

    /**
     * Sets account_hay_id
     *
     * @param string|null $account_hay_id Unique identifier (UUID) of the Account
     *
     * @return $this
     */
    public function setAccountHayId(?string $account_hay_id): static
    {
        if (is_null($account_hay_id)) {
            throw new InvalidArgumentException('non-nullable account_hay_id cannot be null');
        }
        $this->container['account_hay_id'] = $account_hay_id;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string|null
     */
    public function getCardId(): ?string
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string|null $card_id Unique identifier (UUID) of the Card
     *
     * @return $this
     */
    public function setCardId(?string $card_id): static
    {
        if (is_null($card_id)) {
            throw new InvalidArgumentException('non-nullable card_id cannot be null');
        }
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory(): ?string
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category assigned to the Transaction
     *
     * @return $this
     */
    public function setCategory(?string $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets clearing_time_utc
     *
     * @return \DateTime|null
     */
    public function getClearingTimeUtc(): ?\DateTime
    {
        return $this->container['clearing_time_utc'];
    }

    /**
     * Sets clearing_time_utc
     *
     * @param \DateTime|null $clearing_time_utc DateTime in UTC format when Transaction was posted to Account
     *
     * @return $this
     */
    public function setClearingTimeUtc(?\DateTime $clearing_time_utc): static
    {
        if (is_null($clearing_time_utc)) {
            throw new InvalidArgumentException('non-nullable clearing_time_utc cannot be null');
        }
        $this->container['clearing_time_utc'] = $clearing_time_utc;

        return $this;
    }

    /**
     * Gets counterpart_details
     *
     * @return \Shaype\Client\Model\ExternalCounterpartDetails|null
     */
    public function getCounterpartDetails(): ?\Shaype\Client\Model\ExternalCounterpartDetails
    {
        return $this->container['counterpart_details'];
    }

    /**
     * Sets counterpart_details
     *
     * @param \Shaype\Client\Model\ExternalCounterpartDetails|null $counterpart_details counterpart_details
     *
     * @return $this
     */
    public function setCounterpartDetails(?\Shaype\Client\Model\ExternalCounterpartDetails $counterpart_details): static
    {
        if (is_null($counterpart_details)) {
            throw new InvalidArgumentException('non-nullable counterpart_details cannot be null');
        }
        $this->container['counterpart_details'] = $counterpart_details;

        return $this;
    }

    /**
     * Gets counterpart_name
     *
     * @return string|null
     * @deprecated
     */
    public function getCounterpartName(): ?string
    {
        return $this->container['counterpart_name'];
    }

    /**
     * Sets counterpart_name
     *
     * @param string|null $counterpart_name Counterpart name
     *
     * @return $this
     * @deprecated
     */
    public function setCounterpartName(?string $counterpart_name): static
    {
        if (is_null($counterpart_name)) {
            throw new InvalidArgumentException('non-nullable counterpart_name cannot be null');
        }
        $this->container['counterpart_name'] = $counterpart_name;

        return $this;
    }

    /**
     * Gets country_of_expenditure
     *
     * @return string|null
     */
    public function getCountryOfExpenditure(): ?string
    {
        return $this->container['country_of_expenditure'];
    }

    /**
     * Sets country_of_expenditure
     *
     * @param string|null $country_of_expenditure Country of the expenditure (applicable for card transactions)
     *
     * @return $this
     */
    public function setCountryOfExpenditure(?string $country_of_expenditure): static
    {
        if (is_null($country_of_expenditure)) {
            throw new InvalidArgumentException('non-nullable country_of_expenditure cannot be null');
        }
        $allowedValues = $this->getCountryOfExpenditureAllowableValues();
        if (!in_array($country_of_expenditure, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'country_of_expenditure', must be one of '%s'",
                    $country_of_expenditure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country_of_expenditure'] = $country_of_expenditure;

        return $this;
    }

    /**
     * Gets currency_amount
     *
     * @return \Shaype\Client\Model\CurrencyAmount|null
     */
    public function getCurrencyAmount(): ?\Shaype\Client\Model\CurrencyAmount
    {
        return $this->container['currency_amount'];
    }

    /**
     * Sets currency_amount
     *
     * @param \Shaype\Client\Model\CurrencyAmount|null $currency_amount currency_amount
     *
     * @return $this
     */
    public function setCurrencyAmount(?\Shaype\Client\Model\CurrencyAmount $currency_amount): static
    {
        if (is_null($currency_amount)) {
            throw new InvalidArgumentException('non-nullable currency_amount cannot be null');
        }
        $this->container['currency_amount'] = $currency_amount;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId(): ?string
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Unique identifier (UUID) of the Customer
     *
     * @return $this
     */
    public function setCustomerId(?string $customer_id): static
    {
        if (is_null($customer_id)) {
            throw new InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description on the Transaction
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mandate_payment_details
     *
     * @return \Shaype\Client\Model\ExternalMandatePaymentDetails|null
     */
    public function getMandatePaymentDetails(): ?\Shaype\Client\Model\ExternalMandatePaymentDetails
    {
        return $this->container['mandate_payment_details'];
    }

    /**
     * Sets mandate_payment_details
     *
     * @param \Shaype\Client\Model\ExternalMandatePaymentDetails|null $mandate_payment_details mandate_payment_details
     *
     * @return $this
     */
    public function setMandatePaymentDetails(?\Shaype\Client\Model\ExternalMandatePaymentDetails $mandate_payment_details): static
    {
        if (is_null($mandate_payment_details)) {
            throw new InvalidArgumentException('non-nullable mandate_payment_details cannot be null');
        }
        $this->container['mandate_payment_details'] = $mandate_payment_details;

        return $this;
    }

    /**
     * Gets origin_channel
     *
     * @return string|null
     */
    public function getOriginChannel(): ?string
    {
        return $this->container['origin_channel'];
    }

    /**
     * Sets origin_channel
     *
     * @param string|null $origin_channel Origin source of the Transaction (only applicable if specifically used by Client). Possible values:  * **ATM_CASH**  * **POS_DEBIT**  * **VENUE**
     *
     * @return $this
     */
    public function setOriginChannel(?string $origin_channel): static
    {
        if (is_null($origin_channel)) {
            throw new InvalidArgumentException('non-nullable origin_channel cannot be null');
        }
        $allowedValues = $this->getOriginChannelAllowableValues();
        if (!in_array($origin_channel, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'origin_channel', must be one of '%s'",
                    $origin_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['origin_channel'] = $origin_channel;

        return $this;
    }

    /**
     * Gets origin_id
     *
     * @return string|null
     */
    public function getOriginId(): ?string
    {
        return $this->container['origin_id'];
    }

    /**
     * Sets origin_id
     *
     * @param string|null $origin_id Additional identifier applied to Transaction related to origin of the request
     *
     * @return $this
     */
    public function setOriginId(?string $origin_id): static
    {
        if (is_null($origin_id)) {
            throw new InvalidArgumentException('non-nullable origin_id cannot be null');
        }
        $this->container['origin_id'] = $origin_id;

        return $this;
    }

    /**
     * Gets origin_type
     *
     * @return string|null
     */
    public function getOriginType(): ?string
    {
        return $this->container['origin_type'];
    }

    /**
     * Sets origin_type
     *
     * @param string|null $origin_type Initiator origin of the Transaction. Possible values:  * **CUSTOMER**: Transaction initiated by a customer  * **SCHEDULED_PAYMENT**: Transaction initiated by a schedule  * **HAAS_OPERATIONS**: Transaction initiated by Client Operations team  * **OPERATIONS**: Transaction initiated by Shaype Operations team
     *
     * @return $this
     */
    public function setOriginType(?string $origin_type): static
    {
        if (is_null($origin_type)) {
            throw new InvalidArgumentException('non-nullable origin_type cannot be null');
        }
        $allowedValues = $this->getOriginTypeAllowableValues();
        if (!in_array($origin_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'origin_type', must be one of '%s'",
                    $origin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['origin_type'] = $origin_type;

        return $this;
    }

    /**
     * Gets original_currency_amount
     *
     * @return \Shaype\Client\Model\CurrencyAmount|null
     */
    public function getOriginalCurrencyAmount(): ?\Shaype\Client\Model\CurrencyAmount
    {
        return $this->container['original_currency_amount'];
    }

    /**
     * Sets original_currency_amount
     *
     * @param \Shaype\Client\Model\CurrencyAmount|null $original_currency_amount original_currency_amount
     *
     * @return $this
     */
    public function setOriginalCurrencyAmount(?\Shaype\Client\Model\CurrencyAmount $original_currency_amount): static
    {
        if (is_null($original_currency_amount)) {
            throw new InvalidArgumentException('non-nullable original_currency_amount cannot be null');
        }
        $this->container['original_currency_amount'] = $original_currency_amount;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId(): ?string
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Unique identifier (UUID) of the Product of the account associated with the event
     *
     * @return $this
     */
    public function setProductId(?string $product_id): static
    {
        if (is_null($product_id)) {
            throw new InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference on the transaction (only applicable to NPP transactions), maximum 35 alphanumeric characters in length
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets related_hold_hay_id
     *
     * @return string|null
     */
    public function getRelatedHoldHayId(): ?string
    {
        return $this->container['related_hold_hay_id'];
    }

    /**
     * Sets related_hold_hay_id
     *
     * @param string|null $related_hold_hay_id Unique identifier (UUID) of the Hold settled for the Transaction (only applicable to card transactions)
     *
     * @return $this
     */
    public function setRelatedHoldHayId(?string $related_hold_hay_id): static
    {
        if (is_null($related_hold_hay_id)) {
            throw new InvalidArgumentException('non-nullable related_hold_hay_id cannot be null');
        }
        $this->container['related_hold_hay_id'] = $related_hold_hay_id;

        return $this;
    }

    /**
     * Gets reported_fraudulent
     *
     * @return bool|null
     */
    public function getReportedFraudulent(): ?bool
    {
        return $this->container['reported_fraudulent'];
    }

    /**
     * Sets reported_fraudulent
     *
     * @param bool|null $reported_fraudulent (NOT CURRENTLY IN USE) Indicates the Transaction has been reported as fraudulent
     *
     * @return $this
     */
    public function setReportedFraudulent(?bool $reported_fraudulent): static
    {
        if (is_null($reported_fraudulent)) {
            throw new InvalidArgumentException('non-nullable reported_fraudulent cannot be null');
        }
        $this->container['reported_fraudulent'] = $reported_fraudulent;

        return $this;
    }

    /**
     * Gets rolling_account_balance
     *
     * @return float|null
     */
    public function getRollingAccountBalance(): ?float
    {
        return $this->container['rolling_account_balance'];
    }

    /**
     * Sets rolling_account_balance
     *
     * @param float|null $rolling_account_balance Total Account balance after the transaction posted to Account
     *
     * @return $this
     */
    public function setRollingAccountBalance(?float $rolling_account_balance): static
    {
        if (is_null($rolling_account_balance)) {
            throw new InvalidArgumentException('non-nullable rolling_account_balance cannot be null');
        }
        $this->container['rolling_account_balance'] = $rolling_account_balance;

        return $this;
    }

    /**
     * Gets transaction_channel
     *
     * @return string|null
     */
    public function getTransactionChannel(): ?string
    {
        return $this->container['transaction_channel'];
    }

    /**
     * Sets transaction_channel
     *
     * @param string|null $transaction_channel Transaction channels applicable to Shaype operated functions:  * **APPLEPAY_CARD_NOT_PRESENT**  * **APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**  * **APPLE_PAY_CARD_PRESENT**  * **APPLE_PAY_CARD_PRESENT_INTERNATIONAL**  * **BPAY_IN_REJECT**  * **CUSCAL_BPAY_TRANSFER_OUT**  * **CUSCAL_DE_CREDIT_IN**  * **CUSCAL_DE_CREDIT_OUT**  * **CUSCAL_DE_DEBIT_IN**  * **CUSCAL_DE_DEBIT_OUT**  * **CUSCAL_NPP_TRANSFER_IN**  * **CUSCAL_NPP_TRANSFER_OUT**  * **DE_DEBIT_RETURN_IN**  * **GOOGLE_PAY_CARD_NOT_PRESENT**  * **GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**  * **GOOGLE_PAY_CARD_PRESENT**  * **GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL**  * **HAAS_TRANSFER_EXTERNAL_IN**  * **HAAS_TRANSFER_EXTERNAL_OUT**  * **HAAS_TRANSFER_INTERNAL_IN**  * **HAAS_TRANSFER_INTERNAL_OUT**  * **NPP_RETURN_IN**  * **VISA_ATM DOMESTIC**  * **VISA_ATM_INTERNATIONAL**  * **VISA_CARD_NOT_PRESENT**  * **VISA_CARD_NOT_PRESENT_INTERNATIONAL**  * **VISA_CARD_PRESENT**  * **VISA_CARD_PRESENT_INTERNATIONAL**  * **VISA_CONTACTLESS**  * **VISA_CONTACTLESS_INTERNATIONAL**  * **VISA_OCT_DOMESTIC**  * **VISA_OCT_INTERNATIONAL**  * **VISA_OTHER**  * **VISA_REFUND_DOMESTIC**  * **VISA_REFUND_INTERNATIONAL**  Transaction channels available for use by Shaype Clients:  * **ACCOUNT_ADJUSTMENT**  * **APPLE_REWARD**  * **INTEREST_ADJUSTMENT**  * **LOAN_ADJUSTMENT**  * **LOAN_REPAYMENT**  * **MANUAL_ADJUSTMENT**  * **SERVICE_FEE**  Transaction channels for Shaype internal use only:  * **HAY_CREDIT**  * **HAY_TO_HAY_TRANSFER_IN**  * **HAY_TO_HAY_TRANSFER_OUT**  * **VALUE_TRANSFER**  Transaction channels not in use:  * **CUSCAL_BPAY_TRANSFER_IN**  * **CUSCAL_DE_TRANSFER_IN**  * **CUSCAL_DE_TRANSFER_OUT**  * **CUSCAL_DE_TRANSFER_OUT_RETURN**  * **CARD_REFUNDS**  * **CUSCAL_LEGACY**  * **CUSCAL_NPP_SOLICITED_RETURN**  * **FAT_ZEBRA_TRANSFER_IN**  * **NPP_RETURN_OUT**  * **VISA_ATM**  * **VISA_LEGACY**  * **VISA_REFUNDS_LEGACY**
     *
     * @return $this
     */
    public function setTransactionChannel(?string $transaction_channel): static
    {
        if (is_null($transaction_channel)) {
            throw new InvalidArgumentException('non-nullable transaction_channel cannot be null');
        }
        $allowedValues = $this->getTransactionChannelAllowableValues();
        if (!in_array($transaction_channel, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_channel', must be one of '%s'",
                    $transaction_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_channel'] = $transaction_channel;

        return $this;
    }

    /**
     * Gets transaction_hay_id
     *
     * @return string|null
     */
    public function getTransactionHayId(): ?string
    {
        return $this->container['transaction_hay_id'];
    }

    /**
     * Sets transaction_hay_id
     *
     * @param string|null $transaction_hay_id Unique identifier (UUID) of the Transaction
     *
     * @return $this
     */
    public function setTransactionHayId(?string $transaction_hay_id): static
    {
        if (is_null($transaction_hay_id)) {
            throw new InvalidArgumentException('non-nullable transaction_hay_id cannot be null');
        }
        $this->container['transaction_hay_id'] = $transaction_hay_id;

        return $this;
    }

    /**
     * Gets transaction_time_utc
     *
     * @return \DateTime|null
     */
    public function getTransactionTimeUtc(): ?\DateTime
    {
        return $this->container['transaction_time_utc'];
    }

    /**
     * Sets transaction_time_utc
     *
     * @param \DateTime|null $transaction_time_utc DateTime in UTC format when Transaction was initiated / received on the Account
     *
     * @return $this
     */
    public function setTransactionTimeUtc(?\DateTime $transaction_time_utc): static
    {
        if (is_null($transaction_time_utc)) {
            throw new InvalidArgumentException('non-nullable transaction_time_utc cannot be null');
        }
        $this->container['transaction_time_utc'] = $transaction_time_utc;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Transaction type. Possible values:  * **ATM_WITHDRAWAL **: Cash withdrawal from ATM  * **BPAY_TRANSFER_IN **: (not currently in use)  * **BPAY_TRANSFER_OUT **: BPAY payment made out of Account  * **CARD_NOT_PRESENT_PAYMENT **: Payment online using card details, Apple Pay or Google Pay  * **CARD_PAYMENT_REVERSAL **: Refund for previous card payment  * **CARD_PRESENT_PAYMENT **: Payment using physical card, Apple device or Android device at physical terminal  * **DIRECT_DEBIT_TRANSFER **: Cash transfer out of Account via Direct Debit  * **INTERBANK_TRANSFER_IN **: Cash transfer into Account via Direct Credit or NPP  * **INTERBANK_TRANSFER_OUT **: Cash transfer out of Account via Direct Credit or NPP  * **INTRABANK_TRANSFER_IN **: Cash transfer into Account via ShaypePay  * **INTRABANK_TRANSFER_OUT **: Cash transfer out of Account via ShaypePay  * **INTERBANK_TRANSFER_OUT_REVERSAL **: (not currently in use)  * **GENERAL_CREDIT **: General purpose credit on Account  * **GENERAL_DEBIT **: General purpose debit on Account  * **ORIGINAL_CREDIT **: Cash transfer to card via Visa OCT payment
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


