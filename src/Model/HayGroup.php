<?php
/**
 * HayGroup
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * HayGroup Class Doc Comment
 *
 * @description Details of a Group
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HayGroup implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HayGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'business_identifiers' => '\Shaype\Client\Model\BusinessIdentifiers',
        'customer_hay_ids' => 'string[]',
        'group_hay_id' => 'string',
        'group_name' => 'string',
        'group_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'business_identifiers' => null,
        'customer_hay_ids' => 'uuid',
        'group_hay_id' => 'uuid',
        'group_name' => null,
        'group_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'business_identifiers' => false,
        'customer_hay_ids' => false,
        'group_hay_id' => false,
        'group_name' => false,
        'group_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'business_identifiers' => 'businessIdentifiers',
        'customer_hay_ids' => 'customerHayIds',
        'group_hay_id' => 'groupHayId',
        'group_name' => 'groupName',
        'group_type' => 'groupType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'business_identifiers' => 'setBusinessIdentifiers',
        'customer_hay_ids' => 'setCustomerHayIds',
        'group_hay_id' => 'setGroupHayId',
        'group_name' => 'setGroupName',
        'group_type' => 'setGroupType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'business_identifiers' => 'getBusinessIdentifiers',
        'customer_hay_ids' => 'getCustomerHayIds',
        'group_hay_id' => 'getGroupHayId',
        'group_name' => 'getGroupName',
        'group_type' => 'getGroupType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const GROUP_TYPE_PERSONAL = 'PERSONAL';
    public const GROUP_TYPE_BUSINESS = 'BUSINESS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupTypeAllowableValues()
    {
        return [
            self::GROUP_TYPE_PERSONAL,
            self::GROUP_TYPE_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_identifiers', $data ?? [], null);
        $this->setIfExists('customer_hay_ids', $data ?? [], null);
        $this->setIfExists('group_hay_id', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('group_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($this->container['group_type']) && !in_array($this->container['group_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_type', must be one of '%s'",
                $this->container['group_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_identifiers
     *
     * @return \Shaype\Client\Model\BusinessIdentifiers|null
     */
    public function getBusinessIdentifiers(): ?\Shaype\Client\Model\BusinessIdentifiers
    {
        return $this->container['business_identifiers'];
    }

    /**
     * Sets business_identifiers
     *
     * @param \Shaype\Client\Model\BusinessIdentifiers|null $business_identifiers business_identifiers
     *
     * @return $this
     */
    public function setBusinessIdentifiers(?\Shaype\Client\Model\BusinessIdentifiers $business_identifiers): static
    {
        if (is_null($business_identifiers)) {
            throw new InvalidArgumentException('non-nullable business_identifiers cannot be null');
        }
        $this->container['business_identifiers'] = $business_identifiers;

        return $this;
    }

    /**
     * Gets customer_hay_ids
     *
     * @return string[]|null
     */
    public function getCustomerHayIds(): ?array
    {
        return $this->container['customer_hay_ids'];
    }

    /**
     * Sets customer_hay_ids
     *
     * @param string[]|null $customer_hay_ids Unique identifiers (UUID) of the Customer(s) associated to this Group
     *
     * @return $this
     */
    public function setCustomerHayIds(?array $customer_hay_ids): static
    {
        if (is_null($customer_hay_ids)) {
            throw new InvalidArgumentException('non-nullable customer_hay_ids cannot be null');
        }
        $this->container['customer_hay_ids'] = $customer_hay_ids;

        return $this;
    }

    /**
     * Gets group_hay_id
     *
     * @return string|null
     */
    public function getGroupHayId(): ?string
    {
        return $this->container['group_hay_id'];
    }

    /**
     * Sets group_hay_id
     *
     * @param string|null $group_hay_id Unique identifier (UUID) of the Group
     *
     * @return $this
     */
    public function setGroupHayId(?string $group_hay_id): static
    {
        if (is_null($group_hay_id)) {
            throw new InvalidArgumentException('non-nullable group_hay_id cannot be null');
        }
        $this->container['group_hay_id'] = $group_hay_id;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName(): ?string
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name Name of the Group, if not provided a generic name associated with the client will be generated
     *
     * @return $this
     */
    public function setGroupName(?string $group_name): static
    {
        if (is_null($group_name)) {
            throw new InvalidArgumentException('non-nullable group_name cannot be null');
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return string|null
     */
    public function getGroupType(): ?string
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param string|null $group_type Group type. Possible values:  * **BUSINESS**: Non-individual / joint entity  * **PERSONAL**: Joint account entity (default if no option selected)
     *
     * @return $this
     */
    public function setGroupType(?string $group_type): static
    {
        if (is_null($group_type)) {
            throw new InvalidArgumentException('non-nullable group_type cannot be null');
        }
        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!in_array($group_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_type', must be one of '%s'",
                    $group_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_type'] = $group_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


