<?php
/**
 * GeneratePayerMandateNotificationRequestBody
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * GeneratePayerMandateNotificationRequestBody Class Doc Comment
 *
 * @description Body of a request to notify payer about mandate operation preformed.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GeneratePayerMandateNotificationRequestBody implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GeneratePayerMandateNotificationRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'action_details' => '\Shaype\Client\Model\GenerateMandateNotificationActionDetailsDto',
        'mandate_details' => '\Shaype\Client\Model\GenerateMandateNotificationMandateDetailsDto',
        'trigger' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'action_details' => null,
        'mandate_details' => null,
        'trigger' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'action_details' => false,
        'mandate_details' => false,
        'trigger' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'action_details' => 'actionDetails',
        'mandate_details' => 'mandateDetails',
        'trigger' => 'trigger'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'action_details' => 'setActionDetails',
        'mandate_details' => 'setMandateDetails',
        'trigger' => 'setTrigger'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'action_details' => 'getActionDetails',
        'mandate_details' => 'getMandateDetails',
        'trigger' => 'getTrigger'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TRIGGER_MCRXMCRTMCRPMAMNMAMPMAMRMAMXMSCH = 'MCRX,MCRT,MCRP,MAMN,MAMP,MAMR,MAMX,MSCH';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerAllowableValues()
    {
        return [
            self::TRIGGER_MCRXMCRTMCRPMAMNMAMPMAMRMAMXMSCH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action_details', $data ?? [], null);
        $this->setIfExists('mandate_details', $data ?? [], null);
        $this->setIfExists('trigger', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['action_details'] === null) {
            $invalidProperties[] = "'action_details' can't be null";
        }
        if ($this->container['mandate_details'] === null) {
            $invalidProperties[] = "'mandate_details' can't be null";
        }
        if ($this->container['trigger'] === null) {
            $invalidProperties[] = "'trigger' can't be null";
        }
        $allowedValues = $this->getTriggerAllowableValues();
        if (!is_null($this->container['trigger']) && !in_array($this->container['trigger'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trigger', must be one of '%s'",
                $this->container['trigger'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['trigger']) > 4)) {
            $invalidProperties[] = "invalid value for 'trigger', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['trigger']) < 4)) {
            $invalidProperties[] = "invalid value for 'trigger', the character length must be bigger than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_details
     *
     * @return \Shaype\Client\Model\GenerateMandateNotificationActionDetailsDto
     */
    public function getActionDetails(): \Shaype\Client\Model\GenerateMandateNotificationActionDetailsDto
    {
        return $this->container['action_details'];
    }

    /**
     * Sets action_details
     *
     * @param \Shaype\Client\Model\GenerateMandateNotificationActionDetailsDto $action_details action_details
     *
     * @return $this
     */
    public function setActionDetails(\Shaype\Client\Model\GenerateMandateNotificationActionDetailsDto $action_details): static
    {
        if (is_null($action_details)) {
            throw new InvalidArgumentException('non-nullable action_details cannot be null');
        }
        $this->container['action_details'] = $action_details;

        return $this;
    }

    /**
     * Gets mandate_details
     *
     * @return \Shaype\Client\Model\GenerateMandateNotificationMandateDetailsDto
     */
    public function getMandateDetails(): \Shaype\Client\Model\GenerateMandateNotificationMandateDetailsDto
    {
        return $this->container['mandate_details'];
    }

    /**
     * Sets mandate_details
     *
     * @param \Shaype\Client\Model\GenerateMandateNotificationMandateDetailsDto $mandate_details mandate_details
     *
     * @return $this
     */
    public function setMandateDetails(\Shaype\Client\Model\GenerateMandateNotificationMandateDetailsDto $mandate_details): static
    {
        if (is_null($mandate_details)) {
            throw new InvalidArgumentException('non-nullable mandate_details cannot be null');
        }
        $this->container['mandate_details'] = $mandate_details;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return string
     */
    public function getTrigger(): string
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param string $trigger Notification trigger. * **MCRX**: Mandate Create Expired * **MCRT**: Mandate Created * **MCRP**: Mandate Create Proposed * **MAMN**: Mandate Amended * **MAMP**: Mandate Amend Proposed * **MAMR**: Mandate Amended Recalled * **MAMX**: Mandate Amend Expired * **MSCH**: Mandate Status Changed
     *
     * @return $this
     */
    public function setTrigger(string $trigger): static
    {
        if (is_null($trigger)) {
            throw new InvalidArgumentException('non-nullable trigger cannot be null');
        }
        $allowedValues = $this->getTriggerAllowableValues();
        if (!in_array($trigger, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trigger', must be one of '%s'",
                    $trigger,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($trigger) > 4)) {
            throw new InvalidArgumentException('invalid length for $trigger when calling GeneratePayerMandateNotificationRequestBody., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($trigger) < 4)) {
            throw new InvalidArgumentException('invalid length for $trigger when calling GeneratePayerMandateNotificationRequestBody., must be bigger than or equal to 4.');
        }

        $this->container['trigger'] = $trigger;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


