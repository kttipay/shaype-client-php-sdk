<?php
/**
 * GenerateRapRequestBody
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * GenerateRapRequestBody Class Doc Comment
 *
 * @description Encapsulates payment data for payment initiated by the payer directly into payee&#39;s account
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GenerateRapRequestBody implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GenerateRapRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'creditor_information' => '\Shaype\Client\Model\GenerateRapCreditorInformation',
        'debtor_information' => '\Shaype\Client\Model\GenerateRapDebtorInformation',
        'initg_pty_id_org_id' => 'string',
        'mandate_information' => '\Shaype\Client\Model\GenerateRapMandateInformation',
        'payment_id' => 'string',
        'payment_information' => '\Shaype\Client\Model\GenerateRapPaymentInformation',
        'payment_return_information' => '\Shaype\Client\Model\GenerateRapPaymentReturnInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'creditor_information' => null,
        'debtor_information' => null,
        'initg_pty_id_org_id' => null,
        'mandate_information' => null,
        'payment_id' => null,
        'payment_information' => null,
        'payment_return_information' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'creditor_information' => false,
        'debtor_information' => false,
        'initg_pty_id_org_id' => false,
        'mandate_information' => false,
        'payment_id' => false,
        'payment_information' => false,
        'payment_return_information' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'creditor_information' => 'creditorInformation',
        'debtor_information' => 'debtorInformation',
        'initg_pty_id_org_id' => 'initgPtyIdOrgId',
        'mandate_information' => 'mandateInformation',
        'payment_id' => 'paymentId',
        'payment_information' => 'paymentInformation',
        'payment_return_information' => 'paymentReturnInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'creditor_information' => 'setCreditorInformation',
        'debtor_information' => 'setDebtorInformation',
        'initg_pty_id_org_id' => 'setInitgPtyIdOrgId',
        'mandate_information' => 'setMandateInformation',
        'payment_id' => 'setPaymentId',
        'payment_information' => 'setPaymentInformation',
        'payment_return_information' => 'setPaymentReturnInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'creditor_information' => 'getCreditorInformation',
        'debtor_information' => 'getDebtorInformation',
        'initg_pty_id_org_id' => 'getInitgPtyIdOrgId',
        'mandate_information' => 'getMandateInformation',
        'payment_id' => 'getPaymentId',
        'payment_information' => 'getPaymentInformation',
        'payment_return_information' => 'getPaymentReturnInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('creditor_information', $data ?? [], null);
        $this->setIfExists('debtor_information', $data ?? [], null);
        $this->setIfExists('initg_pty_id_org_id', $data ?? [], null);
        $this->setIfExists('mandate_information', $data ?? [], null);
        $this->setIfExists('payment_id', $data ?? [], null);
        $this->setIfExists('payment_information', $data ?? [], null);
        $this->setIfExists('payment_return_information', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['creditor_information'] === null) {
            $invalidProperties[] = "'creditor_information' can't be null";
        }
        if ($this->container['debtor_information'] === null) {
            $invalidProperties[] = "'debtor_information' can't be null";
        }
        if ($this->container['initg_pty_id_org_id'] === null) {
            $invalidProperties[] = "'initg_pty_id_org_id' can't be null";
        }
        if (!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", $this->container['initg_pty_id_org_id'])) {
            $invalidProperties[] = "invalid value for 'initg_pty_id_org_id', must be conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.";
        }

        if ($this->container['payment_id'] === null) {
            $invalidProperties[] = "'payment_id' can't be null";
        }
        if (!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}[0-9]{23}$/", $this->container['payment_id'])) {
            $invalidProperties[] = "invalid value for 'payment_id', must be conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}[0-9]{23}$/.";
        }

        if ($this->container['payment_information'] === null) {
            $invalidProperties[] = "'payment_information' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creditor_information
     *
     * @return \Shaype\Client\Model\GenerateRapCreditorInformation
     */
    public function getCreditorInformation(): \Shaype\Client\Model\GenerateRapCreditorInformation
    {
        return $this->container['creditor_information'];
    }

    /**
     * Sets creditor_information
     *
     * @param \Shaype\Client\Model\GenerateRapCreditorInformation $creditor_information creditor_information
     *
     * @return $this
     */
    public function setCreditorInformation(\Shaype\Client\Model\GenerateRapCreditorInformation $creditor_information): static
    {
        if (is_null($creditor_information)) {
            throw new InvalidArgumentException('non-nullable creditor_information cannot be null');
        }
        $this->container['creditor_information'] = $creditor_information;

        return $this;
    }

    /**
     * Gets debtor_information
     *
     * @return \Shaype\Client\Model\GenerateRapDebtorInformation
     */
    public function getDebtorInformation(): \Shaype\Client\Model\GenerateRapDebtorInformation
    {
        return $this->container['debtor_information'];
    }

    /**
     * Sets debtor_information
     *
     * @param \Shaype\Client\Model\GenerateRapDebtorInformation $debtor_information debtor_information
     *
     * @return $this
     */
    public function setDebtorInformation(\Shaype\Client\Model\GenerateRapDebtorInformation $debtor_information): static
    {
        if (is_null($debtor_information)) {
            throw new InvalidArgumentException('non-nullable debtor_information cannot be null');
        }
        $this->container['debtor_information'] = $debtor_information;

        return $this;
    }

    /**
     * Gets initg_pty_id_org_id
     *
     * @return string
     */
    public function getInitgPtyIdOrgId(): string
    {
        return $this->container['initg_pty_id_org_id'];
    }

    /**
     * Sets initg_pty_id_org_id
     *
     * @param string $initg_pty_id_org_id InitgPtyIdOrgId is the BIC11 of the client sending the payment instruction to Cuscal. Please note this value will be provided to you by Cuscal as part of on-boarding
     *
     * @return $this
     */
    public function setInitgPtyIdOrgId(string $initg_pty_id_org_id): static
    {
        if (is_null($initg_pty_id_org_id)) {
            throw new InvalidArgumentException('non-nullable initg_pty_id_org_id cannot be null');
        }

        if ((!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", ObjectSerializer::toString($initg_pty_id_org_id)))) {
            throw new InvalidArgumentException("invalid value for \$initg_pty_id_org_id when calling GenerateRapRequestBody., must conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.");
        }

        $this->container['initg_pty_id_org_id'] = $initg_pty_id_org_id;

        return $this;
    }

    /**
     * Gets mandate_information
     *
     * @return \Shaype\Client\Model\GenerateRapMandateInformation|null
     */
    public function getMandateInformation(): ?\Shaype\Client\Model\GenerateRapMandateInformation
    {
        return $this->container['mandate_information'];
    }

    /**
     * Sets mandate_information
     *
     * @param \Shaype\Client\Model\GenerateRapMandateInformation|null $mandate_information mandate_information
     *
     * @return $this
     */
    public function setMandateInformation(?\Shaype\Client\Model\GenerateRapMandateInformation $mandate_information): static
    {
        if (is_null($mandate_information)) {
            throw new InvalidArgumentException('non-nullable mandate_information cannot be null');
        }
        $this->container['mandate_information'] = $mandate_information;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId(): string
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string $payment_id paymentId is the unique Payment Transaction ID of a payment that has been previously submitted to Cuscal.
     *
     * @return $this
     */
    public function setPaymentId(string $payment_id): static
    {
        if (is_null($payment_id)) {
            throw new InvalidArgumentException('non-nullable payment_id cannot be null');
        }

        if ((!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}[0-9]{23}$/", ObjectSerializer::toString($payment_id)))) {
            throw new InvalidArgumentException("invalid value for \$payment_id when calling GenerateRapRequestBody., must conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}[0-9]{23}$/.");
        }

        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets payment_information
     *
     * @return \Shaype\Client\Model\GenerateRapPaymentInformation
     */
    public function getPaymentInformation(): \Shaype\Client\Model\GenerateRapPaymentInformation
    {
        return $this->container['payment_information'];
    }

    /**
     * Sets payment_information
     *
     * @param \Shaype\Client\Model\GenerateRapPaymentInformation $payment_information payment_information
     *
     * @return $this
     */
    public function setPaymentInformation(\Shaype\Client\Model\GenerateRapPaymentInformation $payment_information): static
    {
        if (is_null($payment_information)) {
            throw new InvalidArgumentException('non-nullable payment_information cannot be null');
        }
        $this->container['payment_information'] = $payment_information;

        return $this;
    }

    /**
     * Gets payment_return_information
     *
     * @return \Shaype\Client\Model\GenerateRapPaymentReturnInformation|null
     */
    public function getPaymentReturnInformation(): ?\Shaype\Client\Model\GenerateRapPaymentReturnInformation
    {
        return $this->container['payment_return_information'];
    }

    /**
     * Sets payment_return_information
     *
     * @param \Shaype\Client\Model\GenerateRapPaymentReturnInformation|null $payment_return_information payment_return_information
     *
     * @return $this
     */
    public function setPaymentReturnInformation(?\Shaype\Client\Model\GenerateRapPaymentReturnInformation $payment_return_information): static
    {
        if (is_null($payment_return_information)) {
            throw new InvalidArgumentException('non-nullable payment_return_information cannot be null');
        }
        $this->container['payment_return_information'] = $payment_return_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


