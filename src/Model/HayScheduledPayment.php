<?php
/**
 * HayScheduledPayment
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * HayScheduledPayment Class Doc Comment
 *
 * @description Details of the scheduled or recurring payment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HayScheduledPayment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HayScheduledPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_id' => 'string',
        'amount' => '\OpenAPI\Client\Model\CurrencyAmount',
        'creation_date_time_utc' => '\DateTime',
        'customer_hay_id' => 'string',
        'description' => 'string',
        'end_date' => '\DateTime',
        'frequency' => 'string',
        'hay_id' => 'string',
        'last_processed_date_time_utc' => '\DateTime',
        'number_of_payments' => 'int',
        'number_of_processed_payments' => 'int',
        'previous_versions' => '\OpenAPI\Client\Model\HayArchivedScheduledPayment[]',
        'recipient' => '\OpenAPI\Client\Model\ScheduledPaymentRecipient',
        'reference' => 'string',
        'should_cancel_on_failure' => 'bool',
        'start_date' => '\DateTime',
        'status' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_id' => 'uuid',
        'amount' => null,
        'creation_date_time_utc' => 'date-time',
        'customer_hay_id' => 'uuid',
        'description' => null,
        'end_date' => 'date',
        'frequency' => null,
        'hay_id' => 'uuid',
        'last_processed_date_time_utc' => 'date-time',
        'number_of_payments' => 'int32',
        'number_of_processed_payments' => 'int32',
        'previous_versions' => null,
        'recipient' => null,
        'reference' => null,
        'should_cancel_on_failure' => null,
        'start_date' => 'date',
        'status' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'amount' => false,
        'creation_date_time_utc' => false,
        'customer_hay_id' => false,
        'description' => false,
        'end_date' => false,
        'frequency' => false,
        'hay_id' => false,
        'last_processed_date_time_utc' => false,
        'number_of_payments' => false,
        'number_of_processed_payments' => false,
        'previous_versions' => false,
        'recipient' => false,
        'reference' => false,
        'should_cancel_on_failure' => false,
        'start_date' => false,
        'status' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_id' => 'accountId',
        'amount' => 'amount',
        'creation_date_time_utc' => 'creationDateTimeUtc',
        'customer_hay_id' => 'customerHayId',
        'description' => 'description',
        'end_date' => 'endDate',
        'frequency' => 'frequency',
        'hay_id' => 'hayId',
        'last_processed_date_time_utc' => 'lastProcessedDateTimeUtc',
        'number_of_payments' => 'numberOfPayments',
        'number_of_processed_payments' => 'numberOfProcessedPayments',
        'previous_versions' => 'previousVersions',
        'recipient' => 'recipient',
        'reference' => 'reference',
        'should_cancel_on_failure' => 'shouldCancelOnFailure',
        'start_date' => 'startDate',
        'status' => 'status',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_id' => 'setAccountId',
        'amount' => 'setAmount',
        'creation_date_time_utc' => 'setCreationDateTimeUtc',
        'customer_hay_id' => 'setCustomerHayId',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'frequency' => 'setFrequency',
        'hay_id' => 'setHayId',
        'last_processed_date_time_utc' => 'setLastProcessedDateTimeUtc',
        'number_of_payments' => 'setNumberOfPayments',
        'number_of_processed_payments' => 'setNumberOfProcessedPayments',
        'previous_versions' => 'setPreviousVersions',
        'recipient' => 'setRecipient',
        'reference' => 'setReference',
        'should_cancel_on_failure' => 'setShouldCancelOnFailure',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_id' => 'getAccountId',
        'amount' => 'getAmount',
        'creation_date_time_utc' => 'getCreationDateTimeUtc',
        'customer_hay_id' => 'getCustomerHayId',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'frequency' => 'getFrequency',
        'hay_id' => 'getHayId',
        'last_processed_date_time_utc' => 'getLastProcessedDateTimeUtc',
        'number_of_payments' => 'getNumberOfPayments',
        'number_of_processed_payments' => 'getNumberOfProcessedPayments',
        'previous_versions' => 'getPreviousVersions',
        'recipient' => 'getRecipient',
        'reference' => 'getReference',
        'should_cancel_on_failure' => 'getShouldCancelOnFailure',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const FREQUENCY_WEEKLY = 'WEEKLY';
    public const FREQUENCY_FORTNIGHTLY = 'FORTNIGHTLY';
    public const FREQUENCY_MONTHLY = 'MONTHLY';
    public const FREQUENCY_QUARTERLY = 'QUARTERLY';
    public const STATUS_ACTIVE = 'ACTIVE';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_DELETED = 'DELETED';
    public const STATUS_FAILED = 'FAILED';
    public const STATUS_REJECTED = 'REJECTED';
    public const STATUS_COMPLETED = 'COMPLETED';
    public const STATUS_REPLACED = 'REPLACED';
    public const TYPE_RECURRING = 'RECURRING';
    public const TYPE_ONE_TIME = 'ONE_TIME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_WEEKLY,
            self::FREQUENCY_FORTNIGHTLY,
            self::FREQUENCY_MONTHLY,
            self::FREQUENCY_QUARTERLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_CANCELLED,
            self::STATUS_DELETED,
            self::STATUS_FAILED,
            self::STATUS_REJECTED,
            self::STATUS_COMPLETED,
            self::STATUS_REPLACED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_RECURRING,
            self::TYPE_ONE_TIME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('creation_date_time_utc', $data ?? [], null);
        $this->setIfExists('customer_hay_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('hay_id', $data ?? [], null);
        $this->setIfExists('last_processed_date_time_utc', $data ?? [], null);
        $this->setIfExists('number_of_payments', $data ?? [], null);
        $this->setIfExists('number_of_processed_payments', $data ?? [], null);
        $this->setIfExists('previous_versions', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('should_cancel_on_failure', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($this->container['frequency']) && !in_array($this->container['frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'frequency', must be one of '%s'",
                $this->container['frequency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id Unique identifier (UUID) of the Account
     *
     * @return $this
     */
    public function setAccountId(?string $account_id): static
    {
        if (is_null($account_id)) {
            throw new InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \OpenAPI\Client\Model\CurrencyAmount|null
     */
    public function getAmount(): ?\OpenAPI\Client\Model\CurrencyAmount
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \OpenAPI\Client\Model\CurrencyAmount|null $amount amount
     *
     * @return $this
     */
    public function setAmount(?\OpenAPI\Client\Model\CurrencyAmount $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets creation_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getCreationDateTimeUtc(): ?\DateTime
    {
        return $this->container['creation_date_time_utc'];
    }

    /**
     * Sets creation_date_time_utc
     *
     * @param \DateTime|null $creation_date_time_utc DateTime in UTC format when a scheduled or recurring payment schedule has been created
     *
     * @return $this
     */
    public function setCreationDateTimeUtc(?\DateTime $creation_date_time_utc): static
    {
        if (is_null($creation_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable creation_date_time_utc cannot be null');
        }
        $this->container['creation_date_time_utc'] = $creation_date_time_utc;

        return $this;
    }

    /**
     * Gets customer_hay_id
     *
     * @return string|null
     */
    public function getCustomerHayId(): ?string
    {
        return $this->container['customer_hay_id'];
    }

    /**
     * Sets customer_hay_id
     *
     * @param string|null $customer_hay_id Unique identifier (UUID) of the Customer (initiator of the transfer)
     *
     * @return $this
     */
    public function setCustomerHayId(?string $customer_hay_id): static
    {
        if (is_null($customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable customer_hay_id cannot be null');
        }
        $this->container['customer_hay_id'] = $customer_hay_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description on the transaction
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Recurring payment processing end date
     *
     * @return $this
     */
    public function setEndDate(?\DateTime $end_date): static
    {
        if (is_null($end_date)) {
            throw new InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string|null
     */
    public function getFrequency(): ?string
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string|null $frequency Payment frequency for recurring payments. Possible values:  * **WEEKLY**: Payment is processed every week, starting on the startDate  * **FORTNIGHTLY**: Payment is processed every two weeks, starting on the startDate  * **MONTHLY**: Payment is processed every month, starting on the startDate (payment triggered on next available date where invalid date is encountered in schedule i.e. 30th February)  * **QUARTERLY**: Payment is processed every quarter, starting on the startDate (payment triggered on next available date where invalid date is encountered in schedule i.e. 30th February)
     *
     * @return $this
     */
    public function setFrequency(?string $frequency): static
    {
        if (is_null($frequency)) {
            throw new InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!in_array($frequency, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'frequency', must be one of '%s'",
                    $frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets hay_id
     *
     * @return string|null
     */
    public function getHayId(): ?string
    {
        return $this->container['hay_id'];
    }

    /**
     * Sets hay_id
     *
     * @param string|null $hay_id Unique identifier (UUID) of the payment schedule
     *
     * @return $this
     */
    public function setHayId(?string $hay_id): static
    {
        if (is_null($hay_id)) {
            throw new InvalidArgumentException('non-nullable hay_id cannot be null');
        }
        $this->container['hay_id'] = $hay_id;

        return $this;
    }

    /**
     * Gets last_processed_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getLastProcessedDateTimeUtc(): ?\DateTime
    {
        return $this->container['last_processed_date_time_utc'];
    }

    /**
     * Sets last_processed_date_time_utc
     *
     * @param \DateTime|null $last_processed_date_time_utc DateTime in UTC format when a scheduled or recurring payment has been last processed
     *
     * @return $this
     */
    public function setLastProcessedDateTimeUtc(?\DateTime $last_processed_date_time_utc): static
    {
        if (is_null($last_processed_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable last_processed_date_time_utc cannot be null');
        }
        $this->container['last_processed_date_time_utc'] = $last_processed_date_time_utc;

        return $this;
    }

    /**
     * Gets number_of_payments
     *
     * @return int|null
     */
    public function getNumberOfPayments(): ?int
    {
        return $this->container['number_of_payments'];
    }

    /**
     * Sets number_of_payments
     *
     * @param int|null $number_of_payments Total number of times a recurring payment will be processed
     *
     * @return $this
     */
    public function setNumberOfPayments(?int $number_of_payments): static
    {
        if (is_null($number_of_payments)) {
            throw new InvalidArgumentException('non-nullable number_of_payments cannot be null');
        }
        $this->container['number_of_payments'] = $number_of_payments;

        return $this;
    }

    /**
     * Gets number_of_processed_payments
     *
     * @return int|null
     */
    public function getNumberOfProcessedPayments(): ?int
    {
        return $this->container['number_of_processed_payments'];
    }

    /**
     * Sets number_of_processed_payments
     *
     * @param int|null $number_of_processed_payments Total number of times the payment has been processed
     *
     * @return $this
     */
    public function setNumberOfProcessedPayments(?int $number_of_processed_payments): static
    {
        if (is_null($number_of_processed_payments)) {
            throw new InvalidArgumentException('non-nullable number_of_processed_payments cannot be null');
        }
        $this->container['number_of_processed_payments'] = $number_of_processed_payments;

        return $this;
    }

    /**
     * Gets previous_versions
     *
     * @return \OpenAPI\Client\Model\HayArchivedScheduledPayment[]|null
     */
    public function getPreviousVersions(): ?array
    {
        return $this->container['previous_versions'];
    }

    /**
     * Sets previous_versions
     *
     * @param \OpenAPI\Client\Model\HayArchivedScheduledPayment[]|null $previous_versions Any previous versions of this payment schedule that has subsequently been updated
     *
     * @return $this
     */
    public function setPreviousVersions(?array $previous_versions): static
    {
        if (is_null($previous_versions)) {
            throw new InvalidArgumentException('non-nullable previous_versions cannot be null');
        }
        $this->container['previous_versions'] = $previous_versions;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \OpenAPI\Client\Model\ScheduledPaymentRecipient|null
     */
    public function getRecipient(): ?\OpenAPI\Client\Model\ScheduledPaymentRecipient
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \OpenAPI\Client\Model\ScheduledPaymentRecipient|null $recipient recipient
     *
     * @return $this
     */
    public function setRecipient(?\OpenAPI\Client\Model\ScheduledPaymentRecipient $recipient): static
    {
        if (is_null($recipient)) {
            throw new InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference to be included with the transfer
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets should_cancel_on_failure
     *
     * @return bool|null
     */
    public function getShouldCancelOnFailure(): ?bool
    {
        return $this->container['should_cancel_on_failure'];
    }

    /**
     * Sets should_cancel_on_failure
     *
     * @param bool|null $should_cancel_on_failure Indicates whether a recurring payment schedule should be cancelled if a payment fails (i.e. insufficient funds in Account or rejected by the receiving party)
     *
     * @return $this
     */
    public function setShouldCancelOnFailure(?bool $should_cancel_on_failure): static
    {
        if (is_null($should_cancel_on_failure)) {
            throw new InvalidArgumentException('non-nullable should_cancel_on_failure cannot be null');
        }
        $this->container['should_cancel_on_failure'] = $should_cancel_on_failure;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date First processing date for a recurring payment, or the processing date for a scheduled single payment
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $start_date): static
    {
        if (is_null($start_date)) {
            throw new InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the recurring or scheduled payment definition:  * **ACTIVE**: Payment schedule is active and has outstanding payments to be processed in the future  * **CANCELLED**: Payment schedule has been cancelled, the schedule is no longer active (triggered via 'Cancel Scheduled Payment' method)  * **COMPLETED**: All payments scheduled have been completed, the schedule is no longer active  * **DELETED**: Payment schedule has been deleted, the schedule is no longer active (triggered via UI exposed endpoint)  * **FAILED**: Payment has failed to be processed, any further scheduled payments will not be processed (only used for payments with the shouldCancelOnFailure flag set to true)  * **REJECTED**: Payment has been rejected by recipient, any further scheduled payments will not be processed (only used for payments with the shouldCancelOnFailure flag set to true)  * **REPLACED**: Payment schedule has been replaced with a newer version
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Scheduled payment type. Possible values:  * **RECURRING**: Payment scheduled to be performed multiple times in the future  * **ONE_TIME**: Payment scheduled to be performed once in the future
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


