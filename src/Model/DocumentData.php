<?php
/**
 * DocumentData
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * DocumentData Class Doc Comment
 *
 * @description Document data of the customer. When provided will be updated as a whole, setting the not provided fields to null.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DocumentData implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'DocumentData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'identity_document_card_number' => 'string',
        'identity_document_issuing_country' => 'string',
        'identity_document_number' => 'string',
        'identity_document_region' => 'string',
        'identity_document_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'identity_document_card_number' => null,
        'identity_document_issuing_country' => null,
        'identity_document_number' => null,
        'identity_document_region' => null,
        'identity_document_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'identity_document_card_number' => false,
        'identity_document_issuing_country' => false,
        'identity_document_number' => false,
        'identity_document_region' => false,
        'identity_document_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'identity_document_card_number' => 'identityDocumentCardNumber',
        'identity_document_issuing_country' => 'identityDocumentIssuingCountry',
        'identity_document_number' => 'identityDocumentNumber',
        'identity_document_region' => 'identityDocumentRegion',
        'identity_document_type' => 'identityDocumentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'identity_document_card_number' => 'setIdentityDocumentCardNumber',
        'identity_document_issuing_country' => 'setIdentityDocumentIssuingCountry',
        'identity_document_number' => 'setIdentityDocumentNumber',
        'identity_document_region' => 'setIdentityDocumentRegion',
        'identity_document_type' => 'setIdentityDocumentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'identity_document_card_number' => 'getIdentityDocumentCardNumber',
        'identity_document_issuing_country' => 'getIdentityDocumentIssuingCountry',
        'identity_document_number' => 'getIdentityDocumentNumber',
        'identity_document_region' => 'getIdentityDocumentRegion',
        'identity_document_type' => 'getIdentityDocumentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const IDENTITY_DOCUMENT_TYPE_DRIVING_LICENSE = 'DRIVING_LICENSE';
    public const IDENTITY_DOCUMENT_TYPE_PASSPORT = 'PASSPORT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentityDocumentTypeAllowableValues()
    {
        return [
            self::IDENTITY_DOCUMENT_TYPE_DRIVING_LICENSE,
            self::IDENTITY_DOCUMENT_TYPE_PASSPORT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('identity_document_card_number', $data ?? [], null);
        $this->setIfExists('identity_document_issuing_country', $data ?? [], null);
        $this->setIfExists('identity_document_number', $data ?? [], null);
        $this->setIfExists('identity_document_region', $data ?? [], null);
        $this->setIfExists('identity_document_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['identity_document_card_number']) && !preg_match("/^[a-zA-Z0-9]{6,10}$/", $this->container['identity_document_card_number'])) {
            $invalidProperties[] = "invalid value for 'identity_document_card_number', must be conform to the pattern /^[a-zA-Z0-9]{6,10}$/.";
        }

        if ($this->container['identity_document_issuing_country'] === null) {
            $invalidProperties[] = "'identity_document_issuing_country' can't be null";
        }
        if ($this->container['identity_document_number'] === null) {
            $invalidProperties[] = "'identity_document_number' can't be null";
        }
        if (!is_null($this->container['identity_document_region']) && !preg_match("/NSW|QLD|SA|TAS|VIC|WA|ACT|NT/", $this->container['identity_document_region'])) {
            $invalidProperties[] = "invalid value for 'identity_document_region', must be conform to the pattern /NSW|QLD|SA|TAS|VIC|WA|ACT|NT/.";
        }

        if ($this->container['identity_document_type'] === null) {
            $invalidProperties[] = "'identity_document_type' can't be null";
        }
        $allowedValues = $this->getIdentityDocumentTypeAllowableValues();
        if (!is_null($this->container['identity_document_type']) && !in_array($this->container['identity_document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'identity_document_type', must be one of '%s'",
                $this->container['identity_document_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identity_document_card_number
     *
     * @return string|null
     */
    public function getIdentityDocumentCardNumber(): ?string
    {
        return $this->container['identity_document_card_number'];
    }

    /**
     * Sets identity_document_card_number
     *
     * @param string|null $identity_document_card_number Optional identity document card number. Between 6 to 10 characters which can be either just numeric or alphanumeric characters based on the state. Should be specified for Driver's Licenses that provide it.
     *
     * @return $this
     */
    public function setIdentityDocumentCardNumber(?string $identity_document_card_number): static
    {
        if (is_null($identity_document_card_number)) {
            throw new InvalidArgumentException('non-nullable identity_document_card_number cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9]{6,10}$/", ObjectSerializer::toString($identity_document_card_number)))) {
            throw new InvalidArgumentException("invalid value for \$identity_document_card_number when calling DocumentData., must conform to the pattern /^[a-zA-Z0-9]{6,10}$/.");
        }

        $this->container['identity_document_card_number'] = $identity_document_card_number;

        return $this;
    }

    /**
     * Gets identity_document_issuing_country
     *
     * @return string
     */
    public function getIdentityDocumentIssuingCountry(): string
    {
        return $this->container['identity_document_issuing_country'];
    }

    /**
     * Sets identity_document_issuing_country
     *
     * @param string $identity_document_issuing_country Three-letter ISO country code of the customer's identity document issuing country
     *
     * @return $this
     */
    public function setIdentityDocumentIssuingCountry(string $identity_document_issuing_country): static
    {
        if (is_null($identity_document_issuing_country)) {
            throw new InvalidArgumentException('non-nullable identity_document_issuing_country cannot be null');
        }
        $this->container['identity_document_issuing_country'] = $identity_document_issuing_country;

        return $this;
    }

    /**
     * Gets identity_document_number
     *
     * @return string
     */
    public function getIdentityDocumentNumber(): string
    {
        return $this->container['identity_document_number'];
    }

    /**
     * Sets identity_document_number
     *
     * @param string $identity_document_number Number of the Customer's identity document (if supplied)
     *
     * @return $this
     */
    public function setIdentityDocumentNumber(string $identity_document_number): static
    {
        if (is_null($identity_document_number)) {
            throw new InvalidArgumentException('non-nullable identity_document_number cannot be null');
        }
        $this->container['identity_document_number'] = $identity_document_number;

        return $this;
    }

    /**
     * Gets identity_document_region
     *
     * @return string|null
     */
    public function getIdentityDocumentRegion(): ?string
    {
        return $this->container['identity_document_region'];
    }

    /**
     * Sets identity_document_region
     *
     * @param string|null $identity_document_region Optional identity document region, one of: NSW, QLD, SA, TAS, VIC, WA, ACT, NT. (uppercase only) Should be specified for Driver's Licenses.
     *
     * @return $this
     */
    public function setIdentityDocumentRegion(?string $identity_document_region): static
    {
        if (is_null($identity_document_region)) {
            throw new InvalidArgumentException('non-nullable identity_document_region cannot be null');
        }

        if ((!preg_match("/NSW|QLD|SA|TAS|VIC|WA|ACT|NT/", ObjectSerializer::toString($identity_document_region)))) {
            throw new InvalidArgumentException("invalid value for \$identity_document_region when calling DocumentData., must conform to the pattern /NSW|QLD|SA|TAS|VIC|WA|ACT|NT/.");
        }

        $this->container['identity_document_region'] = $identity_document_region;

        return $this;
    }

    /**
     * Gets identity_document_type
     *
     * @return string
     */
    public function getIdentityDocumentType(): string
    {
        return $this->container['identity_document_type'];
    }

    /**
     * Sets identity_document_type
     *
     * @param string $identity_document_type Type of Customer's identity document (if supplied). Possible values:  * **DRIVING_LICENSE**  * **PASSPORT**
     *
     * @return $this
     */
    public function setIdentityDocumentType(string $identity_document_type): static
    {
        if (is_null($identity_document_type)) {
            throw new InvalidArgumentException('non-nullable identity_document_type cannot be null');
        }
        $allowedValues = $this->getIdentityDocumentTypeAllowableValues();
        if (!in_array($identity_document_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'identity_document_type', must be one of '%s'",
                    $identity_document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['identity_document_type'] = $identity_document_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


