<?php
/**
 * GetMandateActionsCreationEventDto
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GetMandateActionsCreationEventDto Class Doc Comment
 *
 * @description Specification of the creation event for a mandate action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetMandateActionsCreationEventDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetMandateActionsCreationEventDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'party_role' => 'string',
        'servicer_bic' => 'string',
        'sponsor_bic' => 'string',
        'time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'party_role' => null,
        'servicer_bic' => null,
        'sponsor_bic' => null,
        'time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'party_role' => false,
        'servicer_bic' => false,
        'sponsor_bic' => false,
        'time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'party_role' => 'partyRole',
        'servicer_bic' => 'servicerBic',
        'sponsor_bic' => 'sponsorBic',
        'time' => 'time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'party_role' => 'setPartyRole',
        'servicer_bic' => 'setServicerBic',
        'sponsor_bic' => 'setSponsorBic',
        'time' => 'setTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'party_role' => 'getPartyRole',
        'servicer_bic' => 'getServicerBic',
        'sponsor_bic' => 'getSponsorBic',
        'time' => 'getTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const PARTY_ROLE_DEBTORPAYMENT_INITIATOR = 'DEBTOR,PAYMENT_INITIATOR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartyRoleAllowableValues()
    {
        return [
            self::PARTY_ROLE_DEBTORPAYMENT_INITIATOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('party_role', $data ?? [], null);
        $this->setIfExists('servicer_bic', $data ?? [], null);
        $this->setIfExists('sponsor_bic', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['party_role'] === null) {
            $invalidProperties[] = "'party_role' can't be null";
        }
        $allowedValues = $this->getPartyRoleAllowableValues();
        if (!is_null($this->container['party_role']) && !in_array($this->container['party_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'party_role', must be one of '%s'",
                $this->container['party_role'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['servicer_bic'] === null) {
            $invalidProperties[] = "'servicer_bic' can't be null";
        }
        if (!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", $this->container['servicer_bic'])) {
            $invalidProperties[] = "invalid value for 'servicer_bic', must be conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.";
        }

        if ($this->container['sponsor_bic'] === null) {
            $invalidProperties[] = "'sponsor_bic' can't be null";
        }
        if (!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", $this->container['sponsor_bic'])) {
            $invalidProperties[] = "invalid value for 'sponsor_bic', must be conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.";
        }

        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if (!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/", $this->container['time'])) {
            $invalidProperties[] = "invalid value for 'time', must be conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets party_role
     *
     * @return string
     */
    public function getPartyRole(): string
    {
        return $this->container['party_role'];
    }

    /**
     * Sets party_role
     *
     * @param string $party_role Party role of the mandate that triggered the event. Enumeration of the party roles that can initiate an action on a mandate: * **DEBTOR**: Debtor party role. * **PAYMENT_INITIATOR**: Payment Initiator party role.
     *
     * @return $this
     */
    public function setPartyRole(string $party_role): static
    {
        if (is_null($party_role)) {
            throw new InvalidArgumentException('non-nullable party_role cannot be null');
        }
        $allowedValues = $this->getPartyRoleAllowableValues();
        if (!in_array($party_role, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'party_role', must be one of '%s'",
                    $party_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['party_role'] = $party_role;

        return $this;
    }

    /**
     * Gets servicer_bic
     *
     * @return string
     */
    public function getServicerBic(): string
    {
        return $this->container['servicer_bic'];
    }

    /**
     * Sets servicer_bic
     *
     * @param string $servicer_bic Identification of the party who triggered the event on the action.
     *
     * @return $this
     */
    public function setServicerBic(string $servicer_bic): static
    {
        if (is_null($servicer_bic)) {
            throw new InvalidArgumentException('non-nullable servicer_bic cannot be null');
        }

        if ((!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", ObjectSerializer::toString($servicer_bic)))) {
            throw new InvalidArgumentException("invalid value for \$servicer_bic when calling GetMandateActionsCreationEventDto., must conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.");
        }

        $this->container['servicer_bic'] = $servicer_bic;

        return $this;
    }

    /**
     * Gets sponsor_bic
     *
     * @return string
     */
    public function getSponsorBic(): string
    {
        return $this->container['sponsor_bic'];
    }

    /**
     * Sets sponsor_bic
     *
     * @param string $sponsor_bic Identification of the agent that sponsors the servicer at the moment the event was triggered.
     *
     * @return $this
     */
    public function setSponsorBic(string $sponsor_bic): static
    {
        if (is_null($sponsor_bic)) {
            throw new InvalidArgumentException('non-nullable sponsor_bic cannot be null');
        }

        if ((!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", ObjectSerializer::toString($sponsor_bic)))) {
            throw new InvalidArgumentException("invalid value for \$sponsor_bic when calling GetMandateActionsCreationEventDto., must conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.");
        }

        $this->container['sponsor_bic'] = $sponsor_bic;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime(): string
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time Timestamp of when the event occurred on the mandate action. UTC expressed without offset, i.e. YYYY-MM-DDThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setTime(string $time): static
    {
        if (is_null($time)) {
            throw new InvalidArgumentException('non-nullable time cannot be null');
        }

        if ((!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/", ObjectSerializer::toString($time)))) {
            throw new InvalidArgumentException("invalid value for \$time when calling GetMandateActionsCreationEventDto., must conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/.");
        }

        $this->container['time'] = $time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


