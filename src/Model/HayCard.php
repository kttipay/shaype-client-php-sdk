<?php
/**
 * HayCard
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * HayCard Class Doc Comment
 *
 * @description Details of a card
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HayCard implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HayCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_hay_id' => 'string',
        'blocked_by' => 'string',
        'card_hay_id' => 'string',
        'card_status' => 'string',
        'card_token' => 'string',
        'card_type' => 'string',
        'customer_hay_id' => 'string',
        'expiry_date' => '\DateTime',
        'issued_date_time_utc' => '\DateTime',
        'last_four_digits' => 'string',
        'name_on_card' => 'string',
        'renewed_into_card_id' => 'string',
        'void_date_time_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_hay_id' => 'uuid',
        'blocked_by' => null,
        'card_hay_id' => 'uuid',
        'card_status' => null,
        'card_token' => null,
        'card_type' => null,
        'customer_hay_id' => 'uuid',
        'expiry_date' => 'date',
        'issued_date_time_utc' => 'date-time',
        'last_four_digits' => null,
        'name_on_card' => null,
        'renewed_into_card_id' => 'uuid',
        'void_date_time_utc' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_hay_id' => false,
        'blocked_by' => false,
        'card_hay_id' => false,
        'card_status' => false,
        'card_token' => false,
        'card_type' => false,
        'customer_hay_id' => false,
        'expiry_date' => false,
        'issued_date_time_utc' => false,
        'last_four_digits' => false,
        'name_on_card' => false,
        'renewed_into_card_id' => false,
        'void_date_time_utc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_hay_id' => 'accountHayId',
        'blocked_by' => 'blockedBy',
        'card_hay_id' => 'cardHayId',
        'card_status' => 'cardStatus',
        'card_token' => 'cardToken',
        'card_type' => 'cardType',
        'customer_hay_id' => 'customerHayId',
        'expiry_date' => 'expiryDate',
        'issued_date_time_utc' => 'issuedDateTimeUtc',
        'last_four_digits' => 'lastFourDigits',
        'name_on_card' => 'nameOnCard',
        'renewed_into_card_id' => 'renewedIntoCardId',
        'void_date_time_utc' => 'voidDateTimeUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_hay_id' => 'setAccountHayId',
        'blocked_by' => 'setBlockedBy',
        'card_hay_id' => 'setCardHayId',
        'card_status' => 'setCardStatus',
        'card_token' => 'setCardToken',
        'card_type' => 'setCardType',
        'customer_hay_id' => 'setCustomerHayId',
        'expiry_date' => 'setExpiryDate',
        'issued_date_time_utc' => 'setIssuedDateTimeUtc',
        'last_four_digits' => 'setLastFourDigits',
        'name_on_card' => 'setNameOnCard',
        'renewed_into_card_id' => 'setRenewedIntoCardId',
        'void_date_time_utc' => 'setVoidDateTimeUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_hay_id' => 'getAccountHayId',
        'blocked_by' => 'getBlockedBy',
        'card_hay_id' => 'getCardHayId',
        'card_status' => 'getCardStatus',
        'card_token' => 'getCardToken',
        'card_type' => 'getCardType',
        'customer_hay_id' => 'getCustomerHayId',
        'expiry_date' => 'getExpiryDate',
        'issued_date_time_utc' => 'getIssuedDateTimeUtc',
        'last_four_digits' => 'getLastFourDigits',
        'name_on_card' => 'getNameOnCard',
        'renewed_into_card_id' => 'getRenewedIntoCardId',
        'void_date_time_utc' => 'getVoidDateTimeUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const BLOCKED_BY_CLIENT = 'CLIENT';
    public const BLOCKED_BY_PLATFORM = 'PLATFORM';
    public const CARD_STATUS_ACTIVE = 'ACTIVE';
    public const CARD_STATUS_AWAITING_ACTIVATION = 'AWAITING_ACTIVATION';
    public const CARD_STATUS_BLOCKED = 'BLOCKED';
    public const CARD_STATUS_INACTIVE = 'INACTIVE';
    public const CARD_STATUS_EXPIRED = 'EXPIRED';
    public const CARD_TYPE_PHYSICAL = 'PHYSICAL';
    public const CARD_TYPE_VIRTUAL = 'VIRTUAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockedByAllowableValues()
    {
        return [
            self::BLOCKED_BY_CLIENT,
            self::BLOCKED_BY_PLATFORM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardStatusAllowableValues()
    {
        return [
            self::CARD_STATUS_ACTIVE,
            self::CARD_STATUS_AWAITING_ACTIVATION,
            self::CARD_STATUS_BLOCKED,
            self::CARD_STATUS_INACTIVE,
            self::CARD_STATUS_EXPIRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_PHYSICAL,
            self::CARD_TYPE_VIRTUAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_hay_id', $data ?? [], null);
        $this->setIfExists('blocked_by', $data ?? [], null);
        $this->setIfExists('card_hay_id', $data ?? [], null);
        $this->setIfExists('card_status', $data ?? [], null);
        $this->setIfExists('card_token', $data ?? [], null);
        $this->setIfExists('card_type', $data ?? [], null);
        $this->setIfExists('customer_hay_id', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('issued_date_time_utc', $data ?? [], null);
        $this->setIfExists('last_four_digits', $data ?? [], null);
        $this->setIfExists('name_on_card', $data ?? [], null);
        $this->setIfExists('renewed_into_card_id', $data ?? [], null);
        $this->setIfExists('void_date_time_utc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getBlockedByAllowableValues();
        if (!is_null($this->container['blocked_by']) && !in_array($this->container['blocked_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blocked_by', must be one of '%s'",
                $this->container['blocked_by'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardStatusAllowableValues();
        if (!is_null($this->container['card_status']) && !in_array($this->container['card_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_status', must be one of '%s'",
                $this->container['card_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_type', must be one of '%s'",
                $this->container['card_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_hay_id
     *
     * @return string|null
     */
    public function getAccountHayId(): ?string
    {
        return $this->container['account_hay_id'];
    }

    /**
     * Sets account_hay_id
     *
     * @param string|null $account_hay_id Unique identifier (UUID) of the Account
     *
     * @return $this
     */
    public function setAccountHayId(?string $account_hay_id): static
    {
        if (is_null($account_hay_id)) {
            throw new InvalidArgumentException('non-nullable account_hay_id cannot be null');
        }
        $this->container['account_hay_id'] = $account_hay_id;

        return $this;
    }

    /**
     * Gets blocked_by
     *
     * @return string|null
     */
    public function getBlockedBy(): ?string
    {
        return $this->container['blocked_by'];
    }

    /**
     * Sets blocked_by
     *
     * @param string|null $blocked_by The type of entity that is responsible for the blocked card. Possible values:  * **CLIENT**: The card was blocked by the Client.  * **PLATFORM**: The card was blocked by the Platform
     *
     * @return $this
     */
    public function setBlockedBy(?string $blocked_by): static
    {
        if (is_null($blocked_by)) {
            throw new InvalidArgumentException('non-nullable blocked_by cannot be null');
        }
        $allowedValues = $this->getBlockedByAllowableValues();
        if (!in_array($blocked_by, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blocked_by', must be one of '%s'",
                    $blocked_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blocked_by'] = $blocked_by;

        return $this;
    }

    /**
     * Gets card_hay_id
     *
     * @return string|null
     */
    public function getCardHayId(): ?string
    {
        return $this->container['card_hay_id'];
    }

    /**
     * Sets card_hay_id
     *
     * @param string|null $card_hay_id Unique identifier (UUID) of the Card
     *
     * @return $this
     */
    public function setCardHayId(?string $card_hay_id): static
    {
        if (is_null($card_hay_id)) {
            throw new InvalidArgumentException('non-nullable card_hay_id cannot be null');
        }
        $this->container['card_hay_id'] = $card_hay_id;

        return $this;
    }

    /**
     * Gets card_status
     *
     * @return string|null
     */
    public function getCardStatus(): ?string
    {
        return $this->container['card_status'];
    }

    /**
     * Sets card_status
     *
     * @param string|null $card_status Current Card status. Possible values:  * **ACTIVE**: Card is active and available for use  * **AWAITING_ACTIVATION**: Card is yet to be activated and unable to be used  * **BLOCKED**: Card has been blocked  * **EXPIRED**: Card has expired  * **INACTIVE**: Card has been cancelled / voided and can no longer be used
     *
     * @return $this
     */
    public function setCardStatus(?string $card_status): static
    {
        if (is_null($card_status)) {
            throw new InvalidArgumentException('non-nullable card_status cannot be null');
        }
        $allowedValues = $this->getCardStatusAllowableValues();
        if (!in_array($card_status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_status', must be one of '%s'",
                    $card_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_status'] = $card_status;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string|null
     */
    public function getCardToken(): ?string
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string|null $card_token Public token of the Card, maximum 9 digits in length
     *
     * @return $this
     */
    public function setCardToken(?string $card_token): static
    {
        if (is_null($card_token)) {
            throw new InvalidArgumentException('non-nullable card_token cannot be null');
        }
        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType(): ?string
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type Type of card. Possible values:  * **PHYSICAL**: Physical card has been issued  * **VIRTUAL**: Card is virtual only. No physical card has been issued
     *
     * @return $this
     */
    public function setCardType(?string $card_type): static
    {
        if (is_null($card_type)) {
            throw new InvalidArgumentException('non-nullable card_type cannot be null');
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($card_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_type', must be one of '%s'",
                    $card_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets customer_hay_id
     *
     * @return string|null
     */
    public function getCustomerHayId(): ?string
    {
        return $this->container['customer_hay_id'];
    }

    /**
     * Sets customer_hay_id
     *
     * @param string|null $customer_hay_id Unique identifier (UUID) of the Customer (cardholder)
     *
     * @return $this
     */
    public function setCustomerHayId(?string $customer_hay_id): static
    {
        if (is_null($customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable customer_hay_id cannot be null');
        }
        $this->container['customer_hay_id'] = $customer_hay_id;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime|null
     */
    public function getExpiryDate(): ?\DateTime
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime|null $expiry_date Expiry date of the Card (date of the last day of the expiry month and year)
     *
     * @return $this
     */
    public function setExpiryDate(?\DateTime $expiry_date): static
    {
        if (is_null($expiry_date)) {
            throw new InvalidArgumentException('non-nullable expiry_date cannot be null');
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets issued_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getIssuedDateTimeUtc(): ?\DateTime
    {
        return $this->container['issued_date_time_utc'];
    }

    /**
     * Sets issued_date_time_utc
     *
     * @param \DateTime|null $issued_date_time_utc DateTime in UTC format when the Card was issued
     *
     * @return $this
     */
    public function setIssuedDateTimeUtc(?\DateTime $issued_date_time_utc): static
    {
        if (is_null($issued_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable issued_date_time_utc cannot be null');
        }
        $this->container['issued_date_time_utc'] = $issued_date_time_utc;

        return $this;
    }

    /**
     * Gets last_four_digits
     *
     * @return string|null
     */
    public function getLastFourDigits(): ?string
    {
        return $this->container['last_four_digits'];
    }

    /**
     * Sets last_four_digits
     *
     * @param string|null $last_four_digits Last four digits of the Card number, also known as primary account number (PAN)
     *
     * @return $this
     */
    public function setLastFourDigits(?string $last_four_digits): static
    {
        if (is_null($last_four_digits)) {
            throw new InvalidArgumentException('non-nullable last_four_digits cannot be null');
        }
        $this->container['last_four_digits'] = $last_four_digits;

        return $this;
    }

    /**
     * Gets name_on_card
     *
     * @return string|null
     */
    public function getNameOnCard(): ?string
    {
        return $this->container['name_on_card'];
    }

    /**
     * Sets name_on_card
     *
     * @param string|null $name_on_card Cardholder name as printed on the Card
     *
     * @return $this
     */
    public function setNameOnCard(?string $name_on_card): static
    {
        if (is_null($name_on_card)) {
            throw new InvalidArgumentException('non-nullable name_on_card cannot be null');
        }
        $this->container['name_on_card'] = $name_on_card;

        return $this;
    }

    /**
     * Gets renewed_into_card_id
     *
     * @return string|null
     */
    public function getRenewedIntoCardId(): ?string
    {
        return $this->container['renewed_into_card_id'];
    }

    /**
     * Sets renewed_into_card_id
     *
     * @param string|null $renewed_into_card_id Unique ID of the new card, if this card has been renewed
     *
     * @return $this
     */
    public function setRenewedIntoCardId(?string $renewed_into_card_id): static
    {
        if (is_null($renewed_into_card_id)) {
            throw new InvalidArgumentException('non-nullable renewed_into_card_id cannot be null');
        }
        $this->container['renewed_into_card_id'] = $renewed_into_card_id;

        return $this;
    }

    /**
     * Gets void_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getVoidDateTimeUtc(): ?\DateTime
    {
        return $this->container['void_date_time_utc'];
    }

    /**
     * Sets void_date_time_utc
     *
     * @param \DateTime|null $void_date_time_utc DateTime in UTC format when the Card was cancelled / voided
     *
     * @return $this
     */
    public function setVoidDateTimeUtc(?\DateTime $void_date_time_utc): static
    {
        if (is_null($void_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable void_date_time_utc cannot be null');
        }
        $this->container['void_date_time_utc'] = $void_date_time_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


