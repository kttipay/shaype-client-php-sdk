<?php
/**
 * GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto Class Doc Comment
 *
 * @description This schema maps to the fields provided in other schemas e.g. MandateDetails1, for related CX label and respective display value. Respective field names are prefixed with CX and suffixed with either _label or _display for easy referencing.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'cx_amount_display' => 'string',
        'cx_amount_label' => 'string',
        'cx_automatic_extension_indicator_label' => 'string',
        'cx_debtor_account_identification_label' => 'string',
        'cx_debtor_account_identification_type_code_display' => 'string',
        'cx_debtor_account_identification_type_code_label' => 'string',
        'cx_debtor_party_name_label' => 'string',
        'cx_debtor_party_reference_label' => 'string',
        'cx_debtor_ultimate_party_name_label' => 'string',
        'cx_description_label' => 'string',
        'cx_first_payment_amount_label' => 'string',
        'cx_initiator_party_name_display' => 'string',
        'cx_initiator_party_name_label' => 'string',
        'cx_last_payment_amount_label' => 'string',
        'cx_mandate_purpose_code_display' => 'string',
        'cx_mandate_purpose_code_label' => 'string',
        'cx_mandate_status' => 'string',
        'cx_mandate_status_display' => 'string',
        'cx_mandate_status_label' => 'string',
        'cx_payment_amount_type_display' => 'string',
        'cx_payment_amount_type_label' => 'string',
        'cx_payment_execute_not_before_time_label' => 'string',
        'cx_payment_frequency_display' => 'string',
        'cx_payment_frequency_label' => 'string',
        'cx_porting_identification_label' => 'string',
        'cx_short_description_label' => 'string',
        'cx_transfer_arrangement_label' => 'string',
        'cx_validity_end_date_label' => 'string',
        'cx_validity_start_date_label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'cx_amount_display' => null,
        'cx_amount_label' => null,
        'cx_automatic_extension_indicator_label' => null,
        'cx_debtor_account_identification_label' => null,
        'cx_debtor_account_identification_type_code_display' => null,
        'cx_debtor_account_identification_type_code_label' => null,
        'cx_debtor_party_name_label' => null,
        'cx_debtor_party_reference_label' => null,
        'cx_debtor_ultimate_party_name_label' => null,
        'cx_description_label' => null,
        'cx_first_payment_amount_label' => null,
        'cx_initiator_party_name_display' => null,
        'cx_initiator_party_name_label' => null,
        'cx_last_payment_amount_label' => null,
        'cx_mandate_purpose_code_display' => null,
        'cx_mandate_purpose_code_label' => null,
        'cx_mandate_status' => null,
        'cx_mandate_status_display' => null,
        'cx_mandate_status_label' => null,
        'cx_payment_amount_type_display' => null,
        'cx_payment_amount_type_label' => null,
        'cx_payment_execute_not_before_time_label' => null,
        'cx_payment_frequency_display' => null,
        'cx_payment_frequency_label' => null,
        'cx_porting_identification_label' => null,
        'cx_short_description_label' => null,
        'cx_transfer_arrangement_label' => null,
        'cx_validity_end_date_label' => null,
        'cx_validity_start_date_label' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'cx_amount_display' => false,
        'cx_amount_label' => false,
        'cx_automatic_extension_indicator_label' => false,
        'cx_debtor_account_identification_label' => false,
        'cx_debtor_account_identification_type_code_display' => false,
        'cx_debtor_account_identification_type_code_label' => false,
        'cx_debtor_party_name_label' => false,
        'cx_debtor_party_reference_label' => false,
        'cx_debtor_ultimate_party_name_label' => false,
        'cx_description_label' => false,
        'cx_first_payment_amount_label' => false,
        'cx_initiator_party_name_display' => false,
        'cx_initiator_party_name_label' => false,
        'cx_last_payment_amount_label' => false,
        'cx_mandate_purpose_code_display' => false,
        'cx_mandate_purpose_code_label' => false,
        'cx_mandate_status' => false,
        'cx_mandate_status_display' => false,
        'cx_mandate_status_label' => false,
        'cx_payment_amount_type_display' => false,
        'cx_payment_amount_type_label' => false,
        'cx_payment_execute_not_before_time_label' => false,
        'cx_payment_frequency_display' => false,
        'cx_payment_frequency_label' => false,
        'cx_porting_identification_label' => false,
        'cx_short_description_label' => false,
        'cx_transfer_arrangement_label' => false,
        'cx_validity_end_date_label' => false,
        'cx_validity_start_date_label' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'cx_amount_display' => 'cxAmountDisplay',
        'cx_amount_label' => 'cxAmountLabel',
        'cx_automatic_extension_indicator_label' => 'cxAutomaticExtensionIndicatorLabel',
        'cx_debtor_account_identification_label' => 'cxDebtorAccountIdentificationLabel',
        'cx_debtor_account_identification_type_code_display' => 'cxDebtorAccountIdentificationTypeCodeDisplay',
        'cx_debtor_account_identification_type_code_label' => 'cxDebtorAccountIdentificationTypeCodeLabel',
        'cx_debtor_party_name_label' => 'cxDebtorPartyNameLabel',
        'cx_debtor_party_reference_label' => 'cxDebtorPartyReferenceLabel',
        'cx_debtor_ultimate_party_name_label' => 'cxDebtorUltimatePartyNameLabel',
        'cx_description_label' => 'cxDescriptionLabel',
        'cx_first_payment_amount_label' => 'cxFirstPaymentAmountLabel',
        'cx_initiator_party_name_display' => 'cxInitiatorPartyNameDisplay',
        'cx_initiator_party_name_label' => 'cxInitiatorPartyNameLabel',
        'cx_last_payment_amount_label' => 'cxLastPaymentAmountLabel',
        'cx_mandate_purpose_code_display' => 'cxMandatePurposeCodeDisplay',
        'cx_mandate_purpose_code_label' => 'cxMandatePurposeCodeLabel',
        'cx_mandate_status' => 'cxMandateStatus',
        'cx_mandate_status_display' => 'cxMandateStatusDisplay',
        'cx_mandate_status_label' => 'cxMandateStatusLabel',
        'cx_payment_amount_type_display' => 'cxPaymentAmountTypeDisplay',
        'cx_payment_amount_type_label' => 'cxPaymentAmountTypeLabel',
        'cx_payment_execute_not_before_time_label' => 'cxPaymentExecuteNotBeforeTimeLabel',
        'cx_payment_frequency_display' => 'cxPaymentFrequencyDisplay',
        'cx_payment_frequency_label' => 'cxPaymentFrequencyLabel',
        'cx_porting_identification_label' => 'cxPortingIdentificationLabel',
        'cx_short_description_label' => 'cxShortDescriptionLabel',
        'cx_transfer_arrangement_label' => 'cxTransferArrangementLabel',
        'cx_validity_end_date_label' => 'cxValidityEndDateLabel',
        'cx_validity_start_date_label' => 'cxValidityStartDateLabel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'cx_amount_display' => 'setCxAmountDisplay',
        'cx_amount_label' => 'setCxAmountLabel',
        'cx_automatic_extension_indicator_label' => 'setCxAutomaticExtensionIndicatorLabel',
        'cx_debtor_account_identification_label' => 'setCxDebtorAccountIdentificationLabel',
        'cx_debtor_account_identification_type_code_display' => 'setCxDebtorAccountIdentificationTypeCodeDisplay',
        'cx_debtor_account_identification_type_code_label' => 'setCxDebtorAccountIdentificationTypeCodeLabel',
        'cx_debtor_party_name_label' => 'setCxDebtorPartyNameLabel',
        'cx_debtor_party_reference_label' => 'setCxDebtorPartyReferenceLabel',
        'cx_debtor_ultimate_party_name_label' => 'setCxDebtorUltimatePartyNameLabel',
        'cx_description_label' => 'setCxDescriptionLabel',
        'cx_first_payment_amount_label' => 'setCxFirstPaymentAmountLabel',
        'cx_initiator_party_name_display' => 'setCxInitiatorPartyNameDisplay',
        'cx_initiator_party_name_label' => 'setCxInitiatorPartyNameLabel',
        'cx_last_payment_amount_label' => 'setCxLastPaymentAmountLabel',
        'cx_mandate_purpose_code_display' => 'setCxMandatePurposeCodeDisplay',
        'cx_mandate_purpose_code_label' => 'setCxMandatePurposeCodeLabel',
        'cx_mandate_status' => 'setCxMandateStatus',
        'cx_mandate_status_display' => 'setCxMandateStatusDisplay',
        'cx_mandate_status_label' => 'setCxMandateStatusLabel',
        'cx_payment_amount_type_display' => 'setCxPaymentAmountTypeDisplay',
        'cx_payment_amount_type_label' => 'setCxPaymentAmountTypeLabel',
        'cx_payment_execute_not_before_time_label' => 'setCxPaymentExecuteNotBeforeTimeLabel',
        'cx_payment_frequency_display' => 'setCxPaymentFrequencyDisplay',
        'cx_payment_frequency_label' => 'setCxPaymentFrequencyLabel',
        'cx_porting_identification_label' => 'setCxPortingIdentificationLabel',
        'cx_short_description_label' => 'setCxShortDescriptionLabel',
        'cx_transfer_arrangement_label' => 'setCxTransferArrangementLabel',
        'cx_validity_end_date_label' => 'setCxValidityEndDateLabel',
        'cx_validity_start_date_label' => 'setCxValidityStartDateLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'cx_amount_display' => 'getCxAmountDisplay',
        'cx_amount_label' => 'getCxAmountLabel',
        'cx_automatic_extension_indicator_label' => 'getCxAutomaticExtensionIndicatorLabel',
        'cx_debtor_account_identification_label' => 'getCxDebtorAccountIdentificationLabel',
        'cx_debtor_account_identification_type_code_display' => 'getCxDebtorAccountIdentificationTypeCodeDisplay',
        'cx_debtor_account_identification_type_code_label' => 'getCxDebtorAccountIdentificationTypeCodeLabel',
        'cx_debtor_party_name_label' => 'getCxDebtorPartyNameLabel',
        'cx_debtor_party_reference_label' => 'getCxDebtorPartyReferenceLabel',
        'cx_debtor_ultimate_party_name_label' => 'getCxDebtorUltimatePartyNameLabel',
        'cx_description_label' => 'getCxDescriptionLabel',
        'cx_first_payment_amount_label' => 'getCxFirstPaymentAmountLabel',
        'cx_initiator_party_name_display' => 'getCxInitiatorPartyNameDisplay',
        'cx_initiator_party_name_label' => 'getCxInitiatorPartyNameLabel',
        'cx_last_payment_amount_label' => 'getCxLastPaymentAmountLabel',
        'cx_mandate_purpose_code_display' => 'getCxMandatePurposeCodeDisplay',
        'cx_mandate_purpose_code_label' => 'getCxMandatePurposeCodeLabel',
        'cx_mandate_status' => 'getCxMandateStatus',
        'cx_mandate_status_display' => 'getCxMandateStatusDisplay',
        'cx_mandate_status_label' => 'getCxMandateStatusLabel',
        'cx_payment_amount_type_display' => 'getCxPaymentAmountTypeDisplay',
        'cx_payment_amount_type_label' => 'getCxPaymentAmountTypeLabel',
        'cx_payment_execute_not_before_time_label' => 'getCxPaymentExecuteNotBeforeTimeLabel',
        'cx_payment_frequency_display' => 'getCxPaymentFrequencyDisplay',
        'cx_payment_frequency_label' => 'getCxPaymentFrequencyLabel',
        'cx_porting_identification_label' => 'getCxPortingIdentificationLabel',
        'cx_short_description_label' => 'getCxShortDescriptionLabel',
        'cx_transfer_arrangement_label' => 'getCxTransferArrangementLabel',
        'cx_validity_end_date_label' => 'getCxValidityEndDateLabel',
        'cx_validity_start_date_label' => 'getCxValidityStartDateLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const CX_MANDATE_STATUS_ACTION_REQUIREDACTIVE_TRANSFER_INITIATEDPAUSED_TRANSFER_INITIATEDTRANSFERREDACTIVEPAUSED_BY_PAYMENT_INITIATORPAUSED_BY_CUSTOMERPAUSED_BY_PAYER_INSTITUTIONCANCELLED_AUTHORISATION_TIMED_OUTCANCELLED_BY_PAYMENT_INITIATORCANCELLED = 'ACTION_REQUIRED,ACTIVE_TRANSFER_INITIATED,PAUSED_TRANSFER_INITIATED,TRANSFERRED,ACTIVE,PAUSED_BY_PAYMENT_INITIATOR,PAUSED_BY_CUSTOMER,PAUSED_BY_PAYER_INSTITUTION,CANCELLED_AUTHORISATION_TIMED_OUT,CANCELLED_BY_PAYMENT_INITIATOR,CANCELLED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCxMandateStatusAllowableValues()
    {
        return [
            self::CX_MANDATE_STATUS_ACTION_REQUIREDACTIVE_TRANSFER_INITIATEDPAUSED_TRANSFER_INITIATEDTRANSFERREDACTIVEPAUSED_BY_PAYMENT_INITIATORPAUSED_BY_CUSTOMERPAUSED_BY_PAYER_INSTITUTIONCANCELLED_AUTHORISATION_TIMED_OUTCANCELLED_BY_PAYMENT_INITIATORCANCELLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cx_amount_display', $data ?? [], null);
        $this->setIfExists('cx_amount_label', $data ?? [], null);
        $this->setIfExists('cx_automatic_extension_indicator_label', $data ?? [], null);
        $this->setIfExists('cx_debtor_account_identification_label', $data ?? [], null);
        $this->setIfExists('cx_debtor_account_identification_type_code_display', $data ?? [], null);
        $this->setIfExists('cx_debtor_account_identification_type_code_label', $data ?? [], null);
        $this->setIfExists('cx_debtor_party_name_label', $data ?? [], null);
        $this->setIfExists('cx_debtor_party_reference_label', $data ?? [], null);
        $this->setIfExists('cx_debtor_ultimate_party_name_label', $data ?? [], null);
        $this->setIfExists('cx_description_label', $data ?? [], null);
        $this->setIfExists('cx_first_payment_amount_label', $data ?? [], null);
        $this->setIfExists('cx_initiator_party_name_display', $data ?? [], null);
        $this->setIfExists('cx_initiator_party_name_label', $data ?? [], null);
        $this->setIfExists('cx_last_payment_amount_label', $data ?? [], null);
        $this->setIfExists('cx_mandate_purpose_code_display', $data ?? [], null);
        $this->setIfExists('cx_mandate_purpose_code_label', $data ?? [], null);
        $this->setIfExists('cx_mandate_status', $data ?? [], null);
        $this->setIfExists('cx_mandate_status_display', $data ?? [], null);
        $this->setIfExists('cx_mandate_status_label', $data ?? [], null);
        $this->setIfExists('cx_payment_amount_type_display', $data ?? [], null);
        $this->setIfExists('cx_payment_amount_type_label', $data ?? [], null);
        $this->setIfExists('cx_payment_execute_not_before_time_label', $data ?? [], null);
        $this->setIfExists('cx_payment_frequency_display', $data ?? [], null);
        $this->setIfExists('cx_payment_frequency_label', $data ?? [], null);
        $this->setIfExists('cx_porting_identification_label', $data ?? [], null);
        $this->setIfExists('cx_short_description_label', $data ?? [], null);
        $this->setIfExists('cx_transfer_arrangement_label', $data ?? [], null);
        $this->setIfExists('cx_validity_end_date_label', $data ?? [], null);
        $this->setIfExists('cx_validity_start_date_label', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['cx_amount_display']) && (mb_strlen($this->container['cx_amount_display']) > 140)) {
            $invalidProperties[] = "invalid value for 'cx_amount_display', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['cx_amount_display']) && (mb_strlen($this->container['cx_amount_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_amount_display', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_amount_label']) && (mb_strlen($this->container['cx_amount_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_amount_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_amount_label']) && (mb_strlen($this->container['cx_amount_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_amount_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_automatic_extension_indicator_label']) && (mb_strlen($this->container['cx_automatic_extension_indicator_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_automatic_extension_indicator_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_automatic_extension_indicator_label']) && (mb_strlen($this->container['cx_automatic_extension_indicator_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_automatic_extension_indicator_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_debtor_account_identification_label']) && (mb_strlen($this->container['cx_debtor_account_identification_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_account_identification_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_debtor_account_identification_label']) && (mb_strlen($this->container['cx_debtor_account_identification_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_account_identification_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_debtor_account_identification_type_code_display']) && (mb_strlen($this->container['cx_debtor_account_identification_type_code_display']) > 140)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_account_identification_type_code_display', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['cx_debtor_account_identification_type_code_display']) && (mb_strlen($this->container['cx_debtor_account_identification_type_code_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_account_identification_type_code_display', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_debtor_account_identification_type_code_label']) && (mb_strlen($this->container['cx_debtor_account_identification_type_code_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_account_identification_type_code_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_debtor_account_identification_type_code_label']) && (mb_strlen($this->container['cx_debtor_account_identification_type_code_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_account_identification_type_code_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_debtor_party_name_label']) && (mb_strlen($this->container['cx_debtor_party_name_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_party_name_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_debtor_party_name_label']) && (mb_strlen($this->container['cx_debtor_party_name_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_party_name_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_debtor_party_reference_label']) && (mb_strlen($this->container['cx_debtor_party_reference_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_party_reference_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_debtor_party_reference_label']) && (mb_strlen($this->container['cx_debtor_party_reference_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_party_reference_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_debtor_ultimate_party_name_label']) && (mb_strlen($this->container['cx_debtor_ultimate_party_name_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_ultimate_party_name_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_debtor_ultimate_party_name_label']) && (mb_strlen($this->container['cx_debtor_ultimate_party_name_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_debtor_ultimate_party_name_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_description_label']) && (mb_strlen($this->container['cx_description_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_description_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_description_label']) && (mb_strlen($this->container['cx_description_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_description_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_first_payment_amount_label']) && (mb_strlen($this->container['cx_first_payment_amount_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_first_payment_amount_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_first_payment_amount_label']) && (mb_strlen($this->container['cx_first_payment_amount_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_first_payment_amount_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_initiator_party_name_display']) && (mb_strlen($this->container['cx_initiator_party_name_display']) > 300)) {
            $invalidProperties[] = "invalid value for 'cx_initiator_party_name_display', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['cx_initiator_party_name_display']) && (mb_strlen($this->container['cx_initiator_party_name_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_initiator_party_name_display', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_initiator_party_name_label']) && (mb_strlen($this->container['cx_initiator_party_name_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_initiator_party_name_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_initiator_party_name_label']) && (mb_strlen($this->container['cx_initiator_party_name_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_initiator_party_name_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_last_payment_amount_label']) && (mb_strlen($this->container['cx_last_payment_amount_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_last_payment_amount_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_last_payment_amount_label']) && (mb_strlen($this->container['cx_last_payment_amount_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_last_payment_amount_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_mandate_purpose_code_display']) && (mb_strlen($this->container['cx_mandate_purpose_code_display']) > 140)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_purpose_code_display', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['cx_mandate_purpose_code_display']) && (mb_strlen($this->container['cx_mandate_purpose_code_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_purpose_code_display', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_mandate_purpose_code_label']) && (mb_strlen($this->container['cx_mandate_purpose_code_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_purpose_code_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_mandate_purpose_code_label']) && (mb_strlen($this->container['cx_mandate_purpose_code_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_purpose_code_label', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getCxMandateStatusAllowableValues();
        if (!is_null($this->container['cx_mandate_status']) && !in_array($this->container['cx_mandate_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cx_mandate_status', must be one of '%s'",
                $this->container['cx_mandate_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cx_mandate_status_display']) && (mb_strlen($this->container['cx_mandate_status_display']) > 140)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_status_display', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['cx_mandate_status_display']) && (mb_strlen($this->container['cx_mandate_status_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_status_display', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_mandate_status_label']) && (mb_strlen($this->container['cx_mandate_status_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_status_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_mandate_status_label']) && (mb_strlen($this->container['cx_mandate_status_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_mandate_status_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_payment_amount_type_display']) && (mb_strlen($this->container['cx_payment_amount_type_display']) > 140)) {
            $invalidProperties[] = "invalid value for 'cx_payment_amount_type_display', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['cx_payment_amount_type_display']) && (mb_strlen($this->container['cx_payment_amount_type_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_payment_amount_type_display', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_payment_amount_type_label']) && (mb_strlen($this->container['cx_payment_amount_type_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_payment_amount_type_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_payment_amount_type_label']) && (mb_strlen($this->container['cx_payment_amount_type_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_payment_amount_type_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_payment_execute_not_before_time_label']) && (mb_strlen($this->container['cx_payment_execute_not_before_time_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_payment_execute_not_before_time_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_payment_execute_not_before_time_label']) && (mb_strlen($this->container['cx_payment_execute_not_before_time_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_payment_execute_not_before_time_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_payment_frequency_display']) && (mb_strlen($this->container['cx_payment_frequency_display']) > 140)) {
            $invalidProperties[] = "invalid value for 'cx_payment_frequency_display', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['cx_payment_frequency_display']) && (mb_strlen($this->container['cx_payment_frequency_display']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_payment_frequency_display', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_payment_frequency_label']) && (mb_strlen($this->container['cx_payment_frequency_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_payment_frequency_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_payment_frequency_label']) && (mb_strlen($this->container['cx_payment_frequency_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_payment_frequency_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_porting_identification_label']) && (mb_strlen($this->container['cx_porting_identification_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_porting_identification_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_porting_identification_label']) && (mb_strlen($this->container['cx_porting_identification_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_porting_identification_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_short_description_label']) && (mb_strlen($this->container['cx_short_description_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_short_description_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_short_description_label']) && (mb_strlen($this->container['cx_short_description_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_short_description_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_transfer_arrangement_label']) && (mb_strlen($this->container['cx_transfer_arrangement_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_transfer_arrangement_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_transfer_arrangement_label']) && (mb_strlen($this->container['cx_transfer_arrangement_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_transfer_arrangement_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_validity_end_date_label']) && (mb_strlen($this->container['cx_validity_end_date_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_validity_end_date_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_validity_end_date_label']) && (mb_strlen($this->container['cx_validity_end_date_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_validity_end_date_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cx_validity_start_date_label']) && (mb_strlen($this->container['cx_validity_start_date_label']) > 35)) {
            $invalidProperties[] = "invalid value for 'cx_validity_start_date_label', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['cx_validity_start_date_label']) && (mb_strlen($this->container['cx_validity_start_date_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'cx_validity_start_date_label', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cx_amount_display
     *
     * @return string|null
     */
    public function getCxAmountDisplay(): ?string
    {
        return $this->container['cx_amount_display'];
    }

    /**
     * Sets cx_amount_display
     *
     * @param string|null $cx_amount_display Field display of cxAmountLabel
     *
     * @return $this
     */
    public function setCxAmountDisplay(?string $cx_amount_display): static
    {
        if (is_null($cx_amount_display)) {
            throw new InvalidArgumentException('non-nullable cx_amount_display cannot be null');
        }
        if ((mb_strlen($cx_amount_display) > 140)) {
            throw new InvalidArgumentException('invalid length for $cx_amount_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($cx_amount_display) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_amount_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_amount_display'] = $cx_amount_display;

        return $this;
    }

    /**
     * Gets cx_amount_label
     *
     * @return string|null
     */
    public function getCxAmountLabel(): ?string
    {
        return $this->container['cx_amount_label'];
    }

    /**
     * Sets cx_amount_label
     *
     * @param string|null $cx_amount_label Label example, Amount.
     *
     * @return $this
     */
    public function setCxAmountLabel(?string $cx_amount_label): static
    {
        if (is_null($cx_amount_label)) {
            throw new InvalidArgumentException('non-nullable cx_amount_label cannot be null');
        }
        if ((mb_strlen($cx_amount_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_amount_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_amount_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_amount_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_amount_label'] = $cx_amount_label;

        return $this;
    }

    /**
     * Gets cx_automatic_extension_indicator_label
     *
     * @return string|null
     */
    public function getCxAutomaticExtensionIndicatorLabel(): ?string
    {
        return $this->container['cx_automatic_extension_indicator_label'];
    }

    /**
     * Sets cx_automatic_extension_indicator_label
     *
     * @param string|null $cx_automatic_extension_indicator_label Label example, Automatic Renewal.
     *
     * @return $this
     */
    public function setCxAutomaticExtensionIndicatorLabel(?string $cx_automatic_extension_indicator_label): static
    {
        if (is_null($cx_automatic_extension_indicator_label)) {
            throw new InvalidArgumentException('non-nullable cx_automatic_extension_indicator_label cannot be null');
        }
        if ((mb_strlen($cx_automatic_extension_indicator_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_automatic_extension_indicator_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_automatic_extension_indicator_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_automatic_extension_indicator_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_automatic_extension_indicator_label'] = $cx_automatic_extension_indicator_label;

        return $this;
    }

    /**
     * Gets cx_debtor_account_identification_label
     *
     * @return string|null
     */
    public function getCxDebtorAccountIdentificationLabel(): ?string
    {
        return $this->container['cx_debtor_account_identification_label'];
    }

    /**
     * Sets cx_debtor_account_identification_label
     *
     * @param string|null $cx_debtor_account_identification_label Label example - Linked PayID: cameron@nppa.com.au or Linked Account: Everyday Savings BSB 040-981/Acc No 7484728
     *
     * @return $this
     */
    public function setCxDebtorAccountIdentificationLabel(?string $cx_debtor_account_identification_label): static
    {
        if (is_null($cx_debtor_account_identification_label)) {
            throw new InvalidArgumentException('non-nullable cx_debtor_account_identification_label cannot be null');
        }
        if ((mb_strlen($cx_debtor_account_identification_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_account_identification_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_debtor_account_identification_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_account_identification_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_debtor_account_identification_label'] = $cx_debtor_account_identification_label;

        return $this;
    }

    /**
     * Gets cx_debtor_account_identification_type_code_display
     *
     * @return string|null
     */
    public function getCxDebtorAccountIdentificationTypeCodeDisplay(): ?string
    {
        return $this->container['cx_debtor_account_identification_type_code_display'];
    }

    /**
     * Sets cx_debtor_account_identification_type_code_display
     *
     * @param string|null $cx_debtor_account_identification_type_code_display Field display value for cxDebtorAccountIdentificationTypeCodeLabel.
     *
     * @return $this
     */
    public function setCxDebtorAccountIdentificationTypeCodeDisplay(?string $cx_debtor_account_identification_type_code_display): static
    {
        if (is_null($cx_debtor_account_identification_type_code_display)) {
            throw new InvalidArgumentException('non-nullable cx_debtor_account_identification_type_code_display cannot be null');
        }
        if ((mb_strlen($cx_debtor_account_identification_type_code_display) > 140)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_account_identification_type_code_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($cx_debtor_account_identification_type_code_display) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_account_identification_type_code_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_debtor_account_identification_type_code_display'] = $cx_debtor_account_identification_type_code_display;

        return $this;
    }

    /**
     * Gets cx_debtor_account_identification_type_code_label
     *
     * @return string|null
     */
    public function getCxDebtorAccountIdentificationTypeCodeLabel(): ?string
    {
        return $this->container['cx_debtor_account_identification_type_code_label'];
    }

    /**
     * Sets cx_debtor_account_identification_type_code_label
     *
     * @param string|null $cx_debtor_account_identification_type_code_label Label example, Payer Account Type.
     *
     * @return $this
     */
    public function setCxDebtorAccountIdentificationTypeCodeLabel(?string $cx_debtor_account_identification_type_code_label): static
    {
        if (is_null($cx_debtor_account_identification_type_code_label)) {
            throw new InvalidArgumentException('non-nullable cx_debtor_account_identification_type_code_label cannot be null');
        }
        if ((mb_strlen($cx_debtor_account_identification_type_code_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_account_identification_type_code_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_debtor_account_identification_type_code_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_account_identification_type_code_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_debtor_account_identification_type_code_label'] = $cx_debtor_account_identification_type_code_label;

        return $this;
    }

    /**
     * Gets cx_debtor_party_name_label
     *
     * @return string|null
     */
    public function getCxDebtorPartyNameLabel(): ?string
    {
        return $this->container['cx_debtor_party_name_label'];
    }

    /**
     * Sets cx_debtor_party_name_label
     *
     * @param string|null $cx_debtor_party_name_label Label example, Payer.
     *
     * @return $this
     */
    public function setCxDebtorPartyNameLabel(?string $cx_debtor_party_name_label): static
    {
        if (is_null($cx_debtor_party_name_label)) {
            throw new InvalidArgumentException('non-nullable cx_debtor_party_name_label cannot be null');
        }
        if ((mb_strlen($cx_debtor_party_name_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_party_name_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_debtor_party_name_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_party_name_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_debtor_party_name_label'] = $cx_debtor_party_name_label;

        return $this;
    }

    /**
     * Gets cx_debtor_party_reference_label
     *
     * @return string|null
     */
    public function getCxDebtorPartyReferenceLabel(): ?string
    {
        return $this->container['cx_debtor_party_reference_label'];
    }

    /**
     * Sets cx_debtor_party_reference_label
     *
     * @param string|null $cx_debtor_party_reference_label Label example, Payment Reference.
     *
     * @return $this
     */
    public function setCxDebtorPartyReferenceLabel(?string $cx_debtor_party_reference_label): static
    {
        if (is_null($cx_debtor_party_reference_label)) {
            throw new InvalidArgumentException('non-nullable cx_debtor_party_reference_label cannot be null');
        }
        if ((mb_strlen($cx_debtor_party_reference_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_party_reference_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_debtor_party_reference_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_party_reference_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_debtor_party_reference_label'] = $cx_debtor_party_reference_label;

        return $this;
    }

    /**
     * Gets cx_debtor_ultimate_party_name_label
     *
     * @return string|null
     */
    public function getCxDebtorUltimatePartyNameLabel(): ?string
    {
        return $this->container['cx_debtor_ultimate_party_name_label'];
    }

    /**
     * Sets cx_debtor_ultimate_party_name_label
     *
     * @param string|null $cx_debtor_ultimate_party_name_label Label example, Ultimate Payer.
     *
     * @return $this
     */
    public function setCxDebtorUltimatePartyNameLabel(?string $cx_debtor_ultimate_party_name_label): static
    {
        if (is_null($cx_debtor_ultimate_party_name_label)) {
            throw new InvalidArgumentException('non-nullable cx_debtor_ultimate_party_name_label cannot be null');
        }
        if ((mb_strlen($cx_debtor_ultimate_party_name_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_ultimate_party_name_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_debtor_ultimate_party_name_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_debtor_ultimate_party_name_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_debtor_ultimate_party_name_label'] = $cx_debtor_ultimate_party_name_label;

        return $this;
    }

    /**
     * Gets cx_description_label
     *
     * @return string|null
     */
    public function getCxDescriptionLabel(): ?string
    {
        return $this->container['cx_description_label'];
    }

    /**
     * Sets cx_description_label
     *
     * @param string|null $cx_description_label Label example, Description.
     *
     * @return $this
     */
    public function setCxDescriptionLabel(?string $cx_description_label): static
    {
        if (is_null($cx_description_label)) {
            throw new InvalidArgumentException('non-nullable cx_description_label cannot be null');
        }
        if ((mb_strlen($cx_description_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_description_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_description_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_description_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_description_label'] = $cx_description_label;

        return $this;
    }

    /**
     * Gets cx_first_payment_amount_label
     *
     * @return string|null
     */
    public function getCxFirstPaymentAmountLabel(): ?string
    {
        return $this->container['cx_first_payment_amount_label'];
    }

    /**
     * Sets cx_first_payment_amount_label
     *
     * @param string|null $cx_first_payment_amount_label Label example, First Payment Amount.
     *
     * @return $this
     */
    public function setCxFirstPaymentAmountLabel(?string $cx_first_payment_amount_label): static
    {
        if (is_null($cx_first_payment_amount_label)) {
            throw new InvalidArgumentException('non-nullable cx_first_payment_amount_label cannot be null');
        }
        if ((mb_strlen($cx_first_payment_amount_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_first_payment_amount_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_first_payment_amount_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_first_payment_amount_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_first_payment_amount_label'] = $cx_first_payment_amount_label;

        return $this;
    }

    /**
     * Gets cx_initiator_party_name_display
     *
     * @return string|null
     */
    public function getCxInitiatorPartyNameDisplay(): ?string
    {
        return $this->container['cx_initiator_party_name_display'];
    }

    /**
     * Sets cx_initiator_party_name_display
     *
     * @param string|null $cx_initiator_party_name_display Field display value for cxInitiatorPartyNameLabel.
     *
     * @return $this
     */
    public function setCxInitiatorPartyNameDisplay(?string $cx_initiator_party_name_display): static
    {
        if (is_null($cx_initiator_party_name_display)) {
            throw new InvalidArgumentException('non-nullable cx_initiator_party_name_display cannot be null');
        }
        if ((mb_strlen($cx_initiator_party_name_display) > 300)) {
            throw new InvalidArgumentException('invalid length for $cx_initiator_party_name_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($cx_initiator_party_name_display) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_initiator_party_name_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_initiator_party_name_display'] = $cx_initiator_party_name_display;

        return $this;
    }

    /**
     * Gets cx_initiator_party_name_label
     *
     * @return string|null
     */
    public function getCxInitiatorPartyNameLabel(): ?string
    {
        return $this->container['cx_initiator_party_name_label'];
    }

    /**
     * Sets cx_initiator_party_name_label
     *
     * @param string|null $cx_initiator_party_name_label Label example, Payee or Payment Initiator.
     *
     * @return $this
     */
    public function setCxInitiatorPartyNameLabel(?string $cx_initiator_party_name_label): static
    {
        if (is_null($cx_initiator_party_name_label)) {
            throw new InvalidArgumentException('non-nullable cx_initiator_party_name_label cannot be null');
        }
        if ((mb_strlen($cx_initiator_party_name_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_initiator_party_name_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_initiator_party_name_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_initiator_party_name_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_initiator_party_name_label'] = $cx_initiator_party_name_label;

        return $this;
    }

    /**
     * Gets cx_last_payment_amount_label
     *
     * @return string|null
     */
    public function getCxLastPaymentAmountLabel(): ?string
    {
        return $this->container['cx_last_payment_amount_label'];
    }

    /**
     * Sets cx_last_payment_amount_label
     *
     * @param string|null $cx_last_payment_amount_label Label example, Last Payment Amount.
     *
     * @return $this
     */
    public function setCxLastPaymentAmountLabel(?string $cx_last_payment_amount_label): static
    {
        if (is_null($cx_last_payment_amount_label)) {
            throw new InvalidArgumentException('non-nullable cx_last_payment_amount_label cannot be null');
        }
        if ((mb_strlen($cx_last_payment_amount_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_last_payment_amount_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_last_payment_amount_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_last_payment_amount_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_last_payment_amount_label'] = $cx_last_payment_amount_label;

        return $this;
    }

    /**
     * Gets cx_mandate_purpose_code_display
     *
     * @return string|null
     */
    public function getCxMandatePurposeCodeDisplay(): ?string
    {
        return $this->container['cx_mandate_purpose_code_display'];
    }

    /**
     * Sets cx_mandate_purpose_code_display
     *
     * @param string|null $cx_mandate_purpose_code_display Field display condition of cxMandatePurposeCodeLabel. Example: Purpose: Utility Payments
     *
     * @return $this
     */
    public function setCxMandatePurposeCodeDisplay(?string $cx_mandate_purpose_code_display): static
    {
        if (is_null($cx_mandate_purpose_code_display)) {
            throw new InvalidArgumentException('non-nullable cx_mandate_purpose_code_display cannot be null');
        }
        if ((mb_strlen($cx_mandate_purpose_code_display) > 140)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_purpose_code_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($cx_mandate_purpose_code_display) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_purpose_code_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_mandate_purpose_code_display'] = $cx_mandate_purpose_code_display;

        return $this;
    }

    /**
     * Gets cx_mandate_purpose_code_label
     *
     * @return string|null
     */
    public function getCxMandatePurposeCodeLabel(): ?string
    {
        return $this->container['cx_mandate_purpose_code_label'];
    }

    /**
     * Sets cx_mandate_purpose_code_label
     *
     * @param string|null $cx_mandate_purpose_code_label Label example, Purpose.
     *
     * @return $this
     */
    public function setCxMandatePurposeCodeLabel(?string $cx_mandate_purpose_code_label): static
    {
        if (is_null($cx_mandate_purpose_code_label)) {
            throw new InvalidArgumentException('non-nullable cx_mandate_purpose_code_label cannot be null');
        }
        if ((mb_strlen($cx_mandate_purpose_code_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_purpose_code_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_mandate_purpose_code_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_purpose_code_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_mandate_purpose_code_label'] = $cx_mandate_purpose_code_label;

        return $this;
    }

    /**
     * Gets cx_mandate_status
     *
     * @return string|null
     */
    public function getCxMandateStatus(): ?string
    {
        return $this->container['cx_mandate_status'];
    }

    /**
     * Sets cx_mandate_status
     *
     * @param string|null $cx_mandate_status Extended status of a mandate. * **ACTION_REQUIRED**: Action Required. * **ACTIVE_TRANSFER_INITIATED**: Active, Transfer Initiated. * **PAUSED_TRANSFER_INITIATED**: Paused, Transfer Initiated. * **TRANSFERRED**: Transferred. * **ACTIVE**: Active. * **PAUSED_BY_PAYMENT_INITIATOR**: Paused by Payment Initiator. * **PAUSED_BY_CUSTOMER**: Paused by Customer. * **PAUSED_BY_PAYER_INSTITUTION**: Paused by Payer Institution. * **CANCELLED_AUTHORISATION_TIMED_OUT**: Cancelled, Authorisation Timed Out. * **CANCELLED_BY_PAYMENT_INITIATOR**: Cancelled by Payment Initiator. * **CANCELLED**: Cancelled.
     *
     * @return $this
     */
    public function setCxMandateStatus(?string $cx_mandate_status): static
    {
        if (is_null($cx_mandate_status)) {
            throw new InvalidArgumentException('non-nullable cx_mandate_status cannot be null');
        }
        $allowedValues = $this->getCxMandateStatusAllowableValues();
        if (!in_array($cx_mandate_status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cx_mandate_status', must be one of '%s'",
                    $cx_mandate_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cx_mandate_status'] = $cx_mandate_status;

        return $this;
    }

    /**
     * Gets cx_mandate_status_display
     *
     * @return string|null
     */
    public function getCxMandateStatusDisplay(): ?string
    {
        return $this->container['cx_mandate_status_display'];
    }

    /**
     * Sets cx_mandate_status_display
     *
     * @param string|null $cx_mandate_status_display Field display condition of cxMandateStatusLabel. Example: - Status: Transfer Initiated
     *
     * @return $this
     */
    public function setCxMandateStatusDisplay(?string $cx_mandate_status_display): static
    {
        if (is_null($cx_mandate_status_display)) {
            throw new InvalidArgumentException('non-nullable cx_mandate_status_display cannot be null');
        }
        if ((mb_strlen($cx_mandate_status_display) > 140)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_status_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($cx_mandate_status_display) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_status_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_mandate_status_display'] = $cx_mandate_status_display;

        return $this;
    }

    /**
     * Gets cx_mandate_status_label
     *
     * @return string|null
     */
    public function getCxMandateStatusLabel(): ?string
    {
        return $this->container['cx_mandate_status_label'];
    }

    /**
     * Sets cx_mandate_status_label
     *
     * @param string|null $cx_mandate_status_label Label example, Status
     *
     * @return $this
     */
    public function setCxMandateStatusLabel(?string $cx_mandate_status_label): static
    {
        if (is_null($cx_mandate_status_label)) {
            throw new InvalidArgumentException('non-nullable cx_mandate_status_label cannot be null');
        }
        if ((mb_strlen($cx_mandate_status_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_status_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_mandate_status_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_mandate_status_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_mandate_status_label'] = $cx_mandate_status_label;

        return $this;
    }

    /**
     * Gets cx_payment_amount_type_display
     *
     * @return string|null
     */
    public function getCxPaymentAmountTypeDisplay(): ?string
    {
        return $this->container['cx_payment_amount_type_display'];
    }

    /**
     * Sets cx_payment_amount_type_display
     *
     * @param string|null $cx_payment_amount_type_display Field display value for cxPaymentAmountTypeLabel, example - Agreement Type: Fixed / Balloon / Usage based / Variable.
     *
     * @return $this
     */
    public function setCxPaymentAmountTypeDisplay(?string $cx_payment_amount_type_display): static
    {
        if (is_null($cx_payment_amount_type_display)) {
            throw new InvalidArgumentException('non-nullable cx_payment_amount_type_display cannot be null');
        }
        if ((mb_strlen($cx_payment_amount_type_display) > 140)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_amount_type_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($cx_payment_amount_type_display) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_amount_type_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_payment_amount_type_display'] = $cx_payment_amount_type_display;

        return $this;
    }

    /**
     * Gets cx_payment_amount_type_label
     *
     * @return string|null
     */
    public function getCxPaymentAmountTypeLabel(): ?string
    {
        return $this->container['cx_payment_amount_type_label'];
    }

    /**
     * Sets cx_payment_amount_type_label
     *
     * @param string|null $cx_payment_amount_type_label Label example, Agreement Type.
     *
     * @return $this
     */
    public function setCxPaymentAmountTypeLabel(?string $cx_payment_amount_type_label): static
    {
        if (is_null($cx_payment_amount_type_label)) {
            throw new InvalidArgumentException('non-nullable cx_payment_amount_type_label cannot be null');
        }
        if ((mb_strlen($cx_payment_amount_type_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_amount_type_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_payment_amount_type_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_amount_type_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_payment_amount_type_label'] = $cx_payment_amount_type_label;

        return $this;
    }

    /**
     * Gets cx_payment_execute_not_before_time_label
     *
     * @return string|null
     */
    public function getCxPaymentExecuteNotBeforeTimeLabel(): ?string
    {
        return $this->container['cx_payment_execute_not_before_time_label'];
    }

    /**
     * Sets cx_payment_execute_not_before_time_label
     *
     * @param string|null $cx_payment_execute_not_before_time_label Label example, Execution Time.
     *
     * @return $this
     */
    public function setCxPaymentExecuteNotBeforeTimeLabel(?string $cx_payment_execute_not_before_time_label): static
    {
        if (is_null($cx_payment_execute_not_before_time_label)) {
            throw new InvalidArgumentException('non-nullable cx_payment_execute_not_before_time_label cannot be null');
        }
        if ((mb_strlen($cx_payment_execute_not_before_time_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_execute_not_before_time_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_payment_execute_not_before_time_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_execute_not_before_time_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_payment_execute_not_before_time_label'] = $cx_payment_execute_not_before_time_label;

        return $this;
    }

    /**
     * Gets cx_payment_frequency_display
     *
     * @return string|null
     */
    public function getCxPaymentFrequencyDisplay(): ?string
    {
        return $this->container['cx_payment_frequency_display'];
    }

    /**
     * Sets cx_payment_frequency_display
     *
     * @param string|null $cx_payment_frequency_display Field display value of cxPaymentFrequencyLabel.
     *
     * @return $this
     */
    public function setCxPaymentFrequencyDisplay(?string $cx_payment_frequency_display): static
    {
        if (is_null($cx_payment_frequency_display)) {
            throw new InvalidArgumentException('non-nullable cx_payment_frequency_display cannot be null');
        }
        if ((mb_strlen($cx_payment_frequency_display) > 140)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_frequency_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($cx_payment_frequency_display) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_frequency_display when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_payment_frequency_display'] = $cx_payment_frequency_display;

        return $this;
    }

    /**
     * Gets cx_payment_frequency_label
     *
     * @return string|null
     */
    public function getCxPaymentFrequencyLabel(): ?string
    {
        return $this->container['cx_payment_frequency_label'];
    }

    /**
     * Sets cx_payment_frequency_label
     *
     * @param string|null $cx_payment_frequency_label Label example, Frequency.
     *
     * @return $this
     */
    public function setCxPaymentFrequencyLabel(?string $cx_payment_frequency_label): static
    {
        if (is_null($cx_payment_frequency_label)) {
            throw new InvalidArgumentException('non-nullable cx_payment_frequency_label cannot be null');
        }
        if ((mb_strlen($cx_payment_frequency_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_frequency_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_payment_frequency_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_payment_frequency_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_payment_frequency_label'] = $cx_payment_frequency_label;

        return $this;
    }

    /**
     * Gets cx_porting_identification_label
     *
     * @return string|null
     */
    public function getCxPortingIdentificationLabel(): ?string
    {
        return $this->container['cx_porting_identification_label'];
    }

    /**
     * Sets cx_porting_identification_label
     *
     * @param string|null $cx_porting_identification_label Label example, Transfer ID.
     *
     * @return $this
     */
    public function setCxPortingIdentificationLabel(?string $cx_porting_identification_label): static
    {
        if (is_null($cx_porting_identification_label)) {
            throw new InvalidArgumentException('non-nullable cx_porting_identification_label cannot be null');
        }
        if ((mb_strlen($cx_porting_identification_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_porting_identification_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_porting_identification_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_porting_identification_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_porting_identification_label'] = $cx_porting_identification_label;

        return $this;
    }

    /**
     * Gets cx_short_description_label
     *
     * @return string|null
     */
    public function getCxShortDescriptionLabel(): ?string
    {
        return $this->container['cx_short_description_label'];
    }

    /**
     * Sets cx_short_description_label
     *
     * @param string|null $cx_short_description_label Label example, Short Description.
     *
     * @return $this
     */
    public function setCxShortDescriptionLabel(?string $cx_short_description_label): static
    {
        if (is_null($cx_short_description_label)) {
            throw new InvalidArgumentException('non-nullable cx_short_description_label cannot be null');
        }
        if ((mb_strlen($cx_short_description_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_short_description_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_short_description_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_short_description_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_short_description_label'] = $cx_short_description_label;

        return $this;
    }

    /**
     * Gets cx_transfer_arrangement_label
     *
     * @return string|null
     */
    public function getCxTransferArrangementLabel(): ?string
    {
        return $this->container['cx_transfer_arrangement_label'];
    }

    /**
     * Sets cx_transfer_arrangement_label
     *
     * @param string|null $cx_transfer_arrangement_label Label example, Transfer Details.
     *
     * @return $this
     */
    public function setCxTransferArrangementLabel(?string $cx_transfer_arrangement_label): static
    {
        if (is_null($cx_transfer_arrangement_label)) {
            throw new InvalidArgumentException('non-nullable cx_transfer_arrangement_label cannot be null');
        }
        if ((mb_strlen($cx_transfer_arrangement_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_transfer_arrangement_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_transfer_arrangement_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_transfer_arrangement_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_transfer_arrangement_label'] = $cx_transfer_arrangement_label;

        return $this;
    }

    /**
     * Gets cx_validity_end_date_label
     *
     * @return string|null
     */
    public function getCxValidityEndDateLabel(): ?string
    {
        return $this->container['cx_validity_end_date_label'];
    }

    /**
     * Sets cx_validity_end_date_label
     *
     * @param string|null $cx_validity_end_date_label Label example, End Date.
     *
     * @return $this
     */
    public function setCxValidityEndDateLabel(?string $cx_validity_end_date_label): static
    {
        if (is_null($cx_validity_end_date_label)) {
            throw new InvalidArgumentException('non-nullable cx_validity_end_date_label cannot be null');
        }
        if ((mb_strlen($cx_validity_end_date_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_validity_end_date_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_validity_end_date_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_validity_end_date_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_validity_end_date_label'] = $cx_validity_end_date_label;

        return $this;
    }

    /**
     * Gets cx_validity_start_date_label
     *
     * @return string|null
     */
    public function getCxValidityStartDateLabel(): ?string
    {
        return $this->container['cx_validity_start_date_label'];
    }

    /**
     * Sets cx_validity_start_date_label
     *
     * @param string|null $cx_validity_start_date_label Label example, Start Date
     *
     * @return $this
     */
    public function setCxValidityStartDateLabel(?string $cx_validity_start_date_label): static
    {
        if (is_null($cx_validity_start_date_label)) {
            throw new InvalidArgumentException('non-nullable cx_validity_start_date_label cannot be null');
        }
        if ((mb_strlen($cx_validity_start_date_label) > 35)) {
            throw new InvalidArgumentException('invalid length for $cx_validity_start_date_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($cx_validity_start_date_label) < 1)) {
            throw new InvalidArgumentException('invalid length for $cx_validity_start_date_label when calling GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto., must be bigger than or equal to 1.');
        }

        $this->container['cx_validity_start_date_label'] = $cx_validity_start_date_label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


