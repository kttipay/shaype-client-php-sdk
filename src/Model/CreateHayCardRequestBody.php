<?php
/**
 * CreateHayCardRequestBody
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * CreateHayCardRequestBody Class Doc Comment
 *
 * @description Body of a request to issue a card for a customer
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreateHayCardRequestBody implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CreateHayCardRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_id' => 'string',
        'card_sub_design' => 'string',
        'card_type' => 'string',
        'customer_hay_id' => 'string',
        'delivery_address' => '\Shaype\Client\Model\Address',
        'email' => 'string',
        'first_name' => 'string',
        'idempotency_key' => 'string',
        'last_name' => 'string',
        'phone_number' => '\Shaype\Client\Model\PhoneNumber',
        'pin' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_id' => 'uuid',
        'card_sub_design' => null,
        'card_type' => null,
        'customer_hay_id' => 'uuid',
        'delivery_address' => null,
        'email' => null,
        'first_name' => null,
        'idempotency_key' => 'uuid',
        'last_name' => null,
        'phone_number' => null,
        'pin' => null,
        'title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'card_sub_design' => false,
        'card_type' => false,
        'customer_hay_id' => false,
        'delivery_address' => false,
        'email' => false,
        'first_name' => false,
        'idempotency_key' => false,
        'last_name' => false,
        'phone_number' => false,
        'pin' => false,
        'title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_id' => 'accountId',
        'card_sub_design' => 'cardSubDesign',
        'card_type' => 'cardType',
        'customer_hay_id' => 'customerHayId',
        'delivery_address' => 'deliveryAddress',
        'email' => 'email',
        'first_name' => 'firstName',
        'idempotency_key' => 'idempotencyKey',
        'last_name' => 'lastName',
        'phone_number' => 'phoneNumber',
        'pin' => 'pin',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_id' => 'setAccountId',
        'card_sub_design' => 'setCardSubDesign',
        'card_type' => 'setCardType',
        'customer_hay_id' => 'setCustomerHayId',
        'delivery_address' => 'setDeliveryAddress',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'idempotency_key' => 'setIdempotencyKey',
        'last_name' => 'setLastName',
        'phone_number' => 'setPhoneNumber',
        'pin' => 'setPin',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_id' => 'getAccountId',
        'card_sub_design' => 'getCardSubDesign',
        'card_type' => 'getCardType',
        'customer_hay_id' => 'getCustomerHayId',
        'delivery_address' => 'getDeliveryAddress',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'idempotency_key' => 'getIdempotencyKey',
        'last_name' => 'getLastName',
        'phone_number' => 'getPhoneNumber',
        'pin' => 'getPin',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const CARD_SUB_DESIGN__1 = 'SUB_DESIGN_1';
    public const CARD_SUB_DESIGN__2 = 'SUB_DESIGN_2';
    public const CARD_SUB_DESIGN__3 = 'SUB_DESIGN_3';
    public const CARD_SUB_DESIGN__4 = 'SUB_DESIGN_4';
    public const CARD_SUB_DESIGN__5 = 'SUB_DESIGN_5';
    public const CARD_SUB_DESIGN__6 = 'SUB_DESIGN_6';
    public const CARD_SUB_DESIGN__7 = 'SUB_DESIGN_7';
    public const CARD_SUB_DESIGN__8 = 'SUB_DESIGN_8';
    public const CARD_SUB_DESIGN__9 = 'SUB_DESIGN_9';
    public const CARD_SUB_DESIGN__10 = 'SUB_DESIGN_10';
    public const CARD_TYPE_PHYSICAL = 'PHYSICAL';
    public const CARD_TYPE_VIRTUAL = 'VIRTUAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardSubDesignAllowableValues()
    {
        return [
            self::CARD_SUB_DESIGN__1,
            self::CARD_SUB_DESIGN__2,
            self::CARD_SUB_DESIGN__3,
            self::CARD_SUB_DESIGN__4,
            self::CARD_SUB_DESIGN__5,
            self::CARD_SUB_DESIGN__6,
            self::CARD_SUB_DESIGN__7,
            self::CARD_SUB_DESIGN__8,
            self::CARD_SUB_DESIGN__9,
            self::CARD_SUB_DESIGN__10,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_PHYSICAL,
            self::CARD_TYPE_VIRTUAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('card_sub_design', $data ?? [], null);
        $this->setIfExists('card_type', $data ?? [], null);
        $this->setIfExists('customer_hay_id', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('pin', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        $allowedValues = $this->getCardSubDesignAllowableValues();
        if (!is_null($this->container['card_sub_design']) && !in_array($this->container['card_sub_design'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_sub_design', must be one of '%s'",
                $this->container['card_sub_design'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_type', must be one of '%s'",
                $this->container['card_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['customer_hay_id'] === null) {
            $invalidProperties[] = "'customer_hay_id' can't be null";
        }
        if ($this->container['delivery_address'] === null) {
            $invalidProperties[] = "'delivery_address' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ($this->container['pin'] === null) {
            $invalidProperties[] = "'pin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId(): string
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id Unique identifier (UUID) of the Account
     *
     * @return $this
     */
    public function setAccountId(string $account_id): static
    {
        if (is_null($account_id)) {
            throw new InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets card_sub_design
     *
     * @return string|null
     */
    public function getCardSubDesign(): ?string
    {
        return $this->container['card_sub_design'];
    }

    /**
     * Sets card_sub_design
     *
     * @param string|null $card_sub_design Card design, applicable to multiple Card designs for product. Mapping of designs will be provided. Possible values:  * **SUB_DESIGN_1** (default if not provided)  * **SUB_DESIGN_2**  * **SUB_DESIGN_3**  * **SUB_DESIGN_4**  * **SUB_DESIGN_5**  * **SUB_DESIGN_6**  * **SUB_DESIGN_7**  * **SUB_DESIGN_8**  * **SUB_DESIGN_9**  * **SUB_DESIGN_10**
     *
     * @return $this
     */
    public function setCardSubDesign(?string $card_sub_design): static
    {
        if (is_null($card_sub_design)) {
            throw new InvalidArgumentException('non-nullable card_sub_design cannot be null');
        }
        $allowedValues = $this->getCardSubDesignAllowableValues();
        if (!in_array($card_sub_design, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_sub_design', must be one of '%s'",
                    $card_sub_design,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_sub_design'] = $card_sub_design;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType(): ?string
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type Type of card to create. Can convert virtual to physical card at a later time:  * **PHYSICAL** (default if not provided)  * **VIRTUAL**
     *
     * @return $this
     */
    public function setCardType(?string $card_type): static
    {
        if (is_null($card_type)) {
            throw new InvalidArgumentException('non-nullable card_type cannot be null');
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($card_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_type', must be one of '%s'",
                    $card_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets customer_hay_id
     *
     * @return string
     */
    public function getCustomerHayId(): string
    {
        return $this->container['customer_hay_id'];
    }

    /**
     * Sets customer_hay_id
     *
     * @param string $customer_hay_id Unique identifier (UUID) of the Customer (cardholder)
     *
     * @return $this
     */
    public function setCustomerHayId(string $customer_hay_id): static
    {
        if (is_null($customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable customer_hay_id cannot be null');
        }
        $this->container['customer_hay_id'] = $customer_hay_id;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Shaype\Client\Model\Address
     */
    public function getDeliveryAddress(): \Shaype\Client\Model\Address
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Shaype\Client\Model\Address $delivery_address delivery_address
     *
     * @return $this
     */
    public function setDeliveryAddress(\Shaype\Client\Model\Address $delivery_address): static
    {
        if (is_null($delivery_address)) {
            throw new InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail(): string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address of the Customer
     *
     * @return $this
     */
    public function setEmail(string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName(): string
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the Customer
     *
     * @return $this
     */
    public function setFirstName(string $first_name): static
    {
        if (is_null($first_name)) {
            throw new InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey(): string
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Unique value (UUID) used to identify this request and used to recognise any subsequent retries
     *
     * @return $this
     */
    public function setIdempotencyKey(string $idempotency_key): static
    {
        if (is_null($idempotency_key)) {
            throw new InvalidArgumentException('non-nullable idempotency_key cannot be null');
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName(): string
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the Customer
     *
     * @return $this
     */
    public function setLastName(string $last_name): static
    {
        if (is_null($last_name)) {
            throw new InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return \Shaype\Client\Model\PhoneNumber
     */
    public function getPhoneNumber(): \Shaype\Client\Model\PhoneNumber
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param \Shaype\Client\Model\PhoneNumber $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber(\Shaype\Client\Model\PhoneNumber $phone_number): static
    {
        if (is_null($phone_number)) {
            throw new InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string
     */
    public function getPin(): string
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string $pin Card PIN, typically 4 digits but supports 4-12 digits
     *
     * @return $this
     */
    public function setPin(string $pin): static
    {
        if (is_null($pin)) {
            throw new InvalidArgumentException('non-nullable pin cannot be null');
        }
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the Customer
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


