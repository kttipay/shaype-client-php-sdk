<?php
/**
 * BPayPaymentRequestBody
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * BPayPaymentRequestBody Class Doc Comment
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BPayPaymentRequestBody implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BPayPaymentRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'amount' => 'float',
        'biller_code' => 'string',
        'category' => 'string',
        'description' => 'string',
        'idempotency_key' => 'string',
        'name' => 'string',
        'reference' => 'string',
        'sender_customer_hay_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'amount' => null,
        'biller_code' => null,
        'category' => null,
        'description' => null,
        'idempotency_key' => 'uuid',
        'name' => null,
        'reference' => null,
        'sender_customer_hay_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'biller_code' => false,
        'category' => false,
        'description' => false,
        'idempotency_key' => false,
        'name' => false,
        'reference' => false,
        'sender_customer_hay_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'amount' => 'amount',
        'biller_code' => 'billerCode',
        'category' => 'category',
        'description' => 'description',
        'idempotency_key' => 'idempotencyKey',
        'name' => 'name',
        'reference' => 'reference',
        'sender_customer_hay_id' => 'senderCustomerHayId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'amount' => 'setAmount',
        'biller_code' => 'setBillerCode',
        'category' => 'setCategory',
        'description' => 'setDescription',
        'idempotency_key' => 'setIdempotencyKey',
        'name' => 'setName',
        'reference' => 'setReference',
        'sender_customer_hay_id' => 'setSenderCustomerHayId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'amount' => 'getAmount',
        'biller_code' => 'getBillerCode',
        'category' => 'getCategory',
        'description' => 'getDescription',
        'idempotency_key' => 'getIdempotencyKey',
        'name' => 'getName',
        'reference' => 'getReference',
        'sender_customer_hay_id' => 'getSenderCustomerHayId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('biller_code', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('sender_customer_hay_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['biller_code'] === null) {
            $invalidProperties[] = "'biller_code' can't be null";
        }
        if ((mb_strlen($this->container['biller_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'biller_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['biller_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'biller_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ((mb_strlen($this->container['reference']) > 20)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['reference']) < 2)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['sender_customer_hay_id'] === null) {
            $invalidProperties[] = "'sender_customer_hay_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount(): float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount to be transferred
     *
     * @return $this
     */
    public function setAmount(float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets biller_code
     *
     * @return string
     */
    public function getBillerCode(): string
    {
        return $this->container['biller_code'];
    }

    /**
     * Sets biller_code
     *
     * @param string $biller_code The Biller Code for the biller that will receivethe payment. It must be of length 3 to 10 digits.
     *
     * @return $this
     */
    public function setBillerCode(string $biller_code): static
    {
        if (is_null($biller_code)) {
            throw new InvalidArgumentException('non-nullable biller_code cannot be null');
        }
        if ((mb_strlen($biller_code) > 10)) {
            throw new InvalidArgumentException('invalid length for $biller_code when calling BPayPaymentRequestBody., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($biller_code) < 3)) {
            throw new InvalidArgumentException('invalid length for $biller_code when calling BPayPaymentRequestBody., must be bigger than or equal to 3.');
        }

        $this->container['biller_code'] = $biller_code;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory(): string
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Used to assign a category of the transfer
     *
     * @return $this
     */
    public function setCategory(string $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Transfer description, will be seen by both sender and recipient
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new InvalidArgumentException('invalid length for $description when calling BPayPaymentRequestBody., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new InvalidArgumentException('invalid length for $description when calling BPayPaymentRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string|null
     */
    public function getIdempotencyKey(): ?string
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string|null $idempotency_key Unique value (UUID) used to identify this request and used to recognise any subsequent retries
     *
     * @return $this
     */
    public function setIdempotencyKey(?string $idempotency_key): static
    {
        if (is_null($idempotency_key)) {
            throw new InvalidArgumentException('non-nullable idempotency_key cannot be null');
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Nick name of the BPAY biller
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference(): string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Biller Reference to be included with the transfer
     *
     * @return $this
     */
    public function setReference(string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 20)) {
            throw new InvalidArgumentException('invalid length for $reference when calling BPayPaymentRequestBody., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($reference) < 2)) {
            throw new InvalidArgumentException('invalid length for $reference when calling BPayPaymentRequestBody., must be bigger than or equal to 2.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets sender_customer_hay_id
     *
     * @return string
     */
    public function getSenderCustomerHayId(): string
    {
        return $this->container['sender_customer_hay_id'];
    }

    /**
     * Sets sender_customer_hay_id
     *
     * @param string $sender_customer_hay_id Unique identifier (UUID) of the Customer (initiator of the transfer)
     *
     * @return $this
     */
    public function setSenderCustomerHayId(string $sender_customer_hay_id): static
    {
        if (is_null($sender_customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable sender_customer_hay_id cannot be null');
        }
        $this->container['sender_customer_hay_id'] = $sender_customer_hay_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


