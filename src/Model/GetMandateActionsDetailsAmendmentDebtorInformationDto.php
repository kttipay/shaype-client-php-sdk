<?php
/**
 * GetMandateActionsDetailsAmendmentDebtorInformationDto
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GetMandateActionsDetailsAmendmentDebtorInformationDto Class Doc Comment
 *
 * @description Information concerning amendment of a debtor party identified in the mandate.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetMandateActionsDetailsAmendmentDebtorInformationDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetMandateActionsDetailsAmendmentDebtorInformationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_alias_identification' => 'string',
        'account_alias_type_code' => 'string',
        'account_id' => 'string',
        'account_identification_issuer' => 'string',
        'account_identification_type_code' => 'string',
        'account_number' => 'string',
        'account_servicer_bic' => 'string',
        'full_legal_account_name' => 'string',
        'party_identification' => 'string',
        'party_identification_type_code' => 'string',
        'party_name' => 'string',
        'party_reference' => 'string',
        'party_type' => 'string',
        'ultimate_party_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_alias_identification' => null,
        'account_alias_type_code' => null,
        'account_id' => 'uuid',
        'account_identification_issuer' => null,
        'account_identification_type_code' => null,
        'account_number' => null,
        'account_servicer_bic' => null,
        'full_legal_account_name' => null,
        'party_identification' => null,
        'party_identification_type_code' => null,
        'party_name' => null,
        'party_reference' => null,
        'party_type' => null,
        'ultimate_party_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_alias_identification' => false,
        'account_alias_type_code' => false,
        'account_id' => false,
        'account_identification_issuer' => false,
        'account_identification_type_code' => false,
        'account_number' => false,
        'account_servicer_bic' => false,
        'full_legal_account_name' => false,
        'party_identification' => false,
        'party_identification_type_code' => false,
        'party_name' => false,
        'party_reference' => false,
        'party_type' => false,
        'ultimate_party_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_alias_identification' => 'accountAliasIdentification',
        'account_alias_type_code' => 'accountAliasTypeCode',
        'account_id' => 'accountId',
        'account_identification_issuer' => 'accountIdentificationIssuer',
        'account_identification_type_code' => 'accountIdentificationTypeCode',
        'account_number' => 'accountNumber',
        'account_servicer_bic' => 'accountServicerBic',
        'full_legal_account_name' => 'fullLegalAccountName',
        'party_identification' => 'partyIdentification',
        'party_identification_type_code' => 'partyIdentificationTypeCode',
        'party_name' => 'partyName',
        'party_reference' => 'partyReference',
        'party_type' => 'partyType',
        'ultimate_party_name' => 'ultimatePartyName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_alias_identification' => 'setAccountAliasIdentification',
        'account_alias_type_code' => 'setAccountAliasTypeCode',
        'account_id' => 'setAccountId',
        'account_identification_issuer' => 'setAccountIdentificationIssuer',
        'account_identification_type_code' => 'setAccountIdentificationTypeCode',
        'account_number' => 'setAccountNumber',
        'account_servicer_bic' => 'setAccountServicerBic',
        'full_legal_account_name' => 'setFullLegalAccountName',
        'party_identification' => 'setPartyIdentification',
        'party_identification_type_code' => 'setPartyIdentificationTypeCode',
        'party_name' => 'setPartyName',
        'party_reference' => 'setPartyReference',
        'party_type' => 'setPartyType',
        'ultimate_party_name' => 'setUltimatePartyName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_alias_identification' => 'getAccountAliasIdentification',
        'account_alias_type_code' => 'getAccountAliasTypeCode',
        'account_id' => 'getAccountId',
        'account_identification_issuer' => 'getAccountIdentificationIssuer',
        'account_identification_type_code' => 'getAccountIdentificationTypeCode',
        'account_number' => 'getAccountNumber',
        'account_servicer_bic' => 'getAccountServicerBic',
        'full_legal_account_name' => 'getFullLegalAccountName',
        'party_identification' => 'getPartyIdentification',
        'party_identification_type_code' => 'getPartyIdentificationTypeCode',
        'party_name' => 'getPartyName',
        'party_reference' => 'getPartyReference',
        'party_type' => 'getPartyType',
        'ultimate_party_name' => 'getUltimatePartyName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_ALIAS_TYPE_CODE_PHONE_NUMBEREMAIL_ADDRESSAUSTRALIAN_BUSINESS_NUMBERORGANISATION_ID = 'PHONE_NUMBER,EMAIL_ADDRESS,AUSTRALIAN_BUSINESS_NUMBER,ORGANISATION_ID';
    public const ACCOUNT_IDENTIFICATION_TYPE_CODE_BASIC_BANK_ACCOUNT_NUMBERALIAS = 'BASIC_BANK_ACCOUNT_NUMBER,ALIAS';
    public const PARTY_IDENTIFICATION_TYPE_CODE_ALIEN_REGISTRATION_NUMBERPASSPORT_NUMBERCUSTOMER_IDDRIVER_LICENSE_NUMBEREMPLOYEE_IDNATIONAL_IDENTITY_NUMBERSOCIAL_SECURITY_NUMBERTAX_IDBANK_PARTY_IDCENTRAL_BANK_IDCLEARING_IDCERTIFICATE_OF_INCORPORATION_NUMBERCOUNTRY_ID_CODEDATA_UNIVERSAL_NUMBERING_SYSTEMGS1_GLN_IDSIRENSIRETAUSTRALIAN_BUSINESS_NUMBERAUSTRALIAN_COMPANY_NUMBERLEGAL_ENTITY_ID = 'ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID';
    public const PARTY_TYPE_ORGANISATIONPERSON = 'ORGANISATION,PERSON';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountAliasTypeCodeAllowableValues()
    {
        return [
            self::ACCOUNT_ALIAS_TYPE_CODE_PHONE_NUMBEREMAIL_ADDRESSAUSTRALIAN_BUSINESS_NUMBERORGANISATION_ID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountIdentificationTypeCodeAllowableValues()
    {
        return [
            self::ACCOUNT_IDENTIFICATION_TYPE_CODE_BASIC_BANK_ACCOUNT_NUMBERALIAS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartyIdentificationTypeCodeAllowableValues()
    {
        return [
            self::PARTY_IDENTIFICATION_TYPE_CODE_ALIEN_REGISTRATION_NUMBERPASSPORT_NUMBERCUSTOMER_IDDRIVER_LICENSE_NUMBEREMPLOYEE_IDNATIONAL_IDENTITY_NUMBERSOCIAL_SECURITY_NUMBERTAX_IDBANK_PARTY_IDCENTRAL_BANK_IDCLEARING_IDCERTIFICATE_OF_INCORPORATION_NUMBERCOUNTRY_ID_CODEDATA_UNIVERSAL_NUMBERING_SYSTEMGS1_GLN_IDSIRENSIRETAUSTRALIAN_BUSINESS_NUMBERAUSTRALIAN_COMPANY_NUMBERLEGAL_ENTITY_ID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartyTypeAllowableValues()
    {
        return [
            self::PARTY_TYPE_ORGANISATIONPERSON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_alias_identification', $data ?? [], null);
        $this->setIfExists('account_alias_type_code', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('account_identification_issuer', $data ?? [], null);
        $this->setIfExists('account_identification_type_code', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('account_servicer_bic', $data ?? [], null);
        $this->setIfExists('full_legal_account_name', $data ?? [], null);
        $this->setIfExists('party_identification', $data ?? [], null);
        $this->setIfExists('party_identification_type_code', $data ?? [], null);
        $this->setIfExists('party_name', $data ?? [], null);
        $this->setIfExists('party_reference', $data ?? [], null);
        $this->setIfExists('party_type', $data ?? [], null);
        $this->setIfExists('ultimate_party_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_alias_identification']) && (mb_strlen($this->container['account_alias_identification']) > 2048)) {
            $invalidProperties[] = "invalid value for 'account_alias_identification', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['account_alias_identification']) && (mb_strlen($this->container['account_alias_identification']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_alias_identification', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAccountAliasTypeCodeAllowableValues();
        if (!is_null($this->container['account_alias_type_code']) && !in_array($this->container['account_alias_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_alias_type_code', must be one of '%s'",
                $this->container['account_alias_type_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['account_identification_issuer']) && !preg_match("/^[ -~]{1,35}$/", $this->container['account_identification_issuer'])) {
            $invalidProperties[] = "invalid value for 'account_identification_issuer', must be conform to the pattern /^[ -~]{1,35}$/.";
        }

        $allowedValues = $this->getAccountIdentificationTypeCodeAllowableValues();
        if (!is_null($this->container['account_identification_type_code']) && !in_array($this->container['account_identification_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_identification_type_code', must be one of '%s'",
                $this->container['account_identification_type_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['account_number']) && !preg_match("/^[ -~]{11,15}$/", $this->container['account_number'])) {
            $invalidProperties[] = "invalid value for 'account_number', must be conform to the pattern /^[ -~]{11,15}$/.";
        }

        if (!is_null($this->container['account_servicer_bic']) && !preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", $this->container['account_servicer_bic'])) {
            $invalidProperties[] = "invalid value for 'account_servicer_bic', must be conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.";
        }

        if (!is_null($this->container['full_legal_account_name']) && !preg_match("/^[ -~]{1,140}$/", $this->container['full_legal_account_name'])) {
            $invalidProperties[] = "invalid value for 'full_legal_account_name', must be conform to the pattern /^[ -~]{1,140}$/.";
        }

        if (!is_null($this->container['party_identification']) && !preg_match("/^[ -~]{1,35}$/", $this->container['party_identification'])) {
            $invalidProperties[] = "invalid value for 'party_identification', must be conform to the pattern /^[ -~]{1,35}$/.";
        }

        $allowedValues = $this->getPartyIdentificationTypeCodeAllowableValues();
        if (!is_null($this->container['party_identification_type_code']) && !in_array($this->container['party_identification_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'party_identification_type_code', must be one of '%s'",
                $this->container['party_identification_type_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['party_name']) && !preg_match("/^[ -~]{1,140}$/", $this->container['party_name'])) {
            $invalidProperties[] = "invalid value for 'party_name', must be conform to the pattern /^[ -~]{1,140}$/.";
        }

        if (!is_null($this->container['party_reference']) && !preg_match("/^[ -~]{1,35}$/", $this->container['party_reference'])) {
            $invalidProperties[] = "invalid value for 'party_reference', must be conform to the pattern /^[ -~]{1,35}$/.";
        }

        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!is_null($this->container['party_type']) && !in_array($this->container['party_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'party_type', must be one of '%s'",
                $this->container['party_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ultimate_party_name']) && !preg_match("/^[ -~]{1,140}$/", $this->container['ultimate_party_name'])) {
            $invalidProperties[] = "invalid value for 'ultimate_party_name', must be conform to the pattern /^[ -~]{1,140}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_alias_identification
     *
     * @return string|null
     */
    public function getAccountAliasIdentification(): ?string
    {
        return $this->container['account_alias_identification'];
    }

    /**
     * Sets account_alias_identification
     *
     * @param string|null $account_alias_identification Identification used to indicate the account identification under another specified name. If this property is set to '-' it means that the account alias identification has been cleared.
     *
     * @return $this
     */
    public function setAccountAliasIdentification(?string $account_alias_identification): static
    {
        if (is_null($account_alias_identification)) {
            throw new InvalidArgumentException('non-nullable account_alias_identification cannot be null');
        }
        if ((mb_strlen($account_alias_identification) > 2048)) {
            throw new InvalidArgumentException('invalid length for $account_alias_identification when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($account_alias_identification) < 1)) {
            throw new InvalidArgumentException('invalid length for $account_alias_identification when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must be bigger than or equal to 1.');
        }

        $this->container['account_alias_identification'] = $account_alias_identification;

        return $this;
    }

    /**
     * Gets account_alias_type_code
     *
     * @return string|null
     */
    public function getAccountAliasTypeCode(): ?string
    {
        return $this->container['account_alias_type_code'];
    }

    /**
     * Sets account_alias_type_code
     *
     * @param string|null $account_alias_type_code Name of the Alias Type, in a coded form as published in an external list. * **PHONE_NUMBER**: Telephone Number * **EMAIL_ADDRESS**: Email Address * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number * **ORGANISATION_ID**: Organisation Identifier
     *
     * @return $this
     */
    public function setAccountAliasTypeCode(?string $account_alias_type_code): static
    {
        if (is_null($account_alias_type_code)) {
            throw new InvalidArgumentException('non-nullable account_alias_type_code cannot be null');
        }
        $allowedValues = $this->getAccountAliasTypeCodeAllowableValues();
        if (!in_array($account_alias_type_code, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_alias_type_code', must be one of '%s'",
                    $account_alias_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_alias_type_code'] = $account_alias_type_code;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id Platform identifier of the debtor account
     *
     * @return $this
     */
    public function setAccountId(?string $account_id): static
    {
        if (is_null($account_id)) {
            throw new InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_identification_issuer
     *
     * @return string|null
     */
    public function getAccountIdentificationIssuer(): ?string
    {
        return $this->container['account_identification_issuer'];
    }

    /**
     * Sets account_identification_issuer
     *
     * @param string|null $account_identification_issuer Entity or classification under which the identification is assigned. If this property is set to '-' it means that the account identification issuer has been cleared.
     *
     * @return $this
     */
    public function setAccountIdentificationIssuer(?string $account_identification_issuer): static
    {
        if (is_null($account_identification_issuer)) {
            throw new InvalidArgumentException('non-nullable account_identification_issuer cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,35}$/", ObjectSerializer::toString($account_identification_issuer)))) {
            throw new InvalidArgumentException("invalid value for \$account_identification_issuer when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[ -~]{1,35}$/.");
        }

        $this->container['account_identification_issuer'] = $account_identification_issuer;

        return $this;
    }

    /**
     * Gets account_identification_type_code
     *
     * @return string|null
     */
    public function getAccountIdentificationTypeCode(): ?string
    {
        return $this->container['account_identification_type_code'];
    }

    /**
     * Sets account_identification_type_code
     *
     * @param string|null $account_identification_type_code Type of account identification, in a coded form. * **BASIC_BANK_ACCOUNT_NUMBER**: Basic Bank Account Number * **ALIAS**: Alias Identification
     *
     * @return $this
     */
    public function setAccountIdentificationTypeCode(?string $account_identification_type_code): static
    {
        if (is_null($account_identification_type_code)) {
            throw new InvalidArgumentException('non-nullable account_identification_type_code cannot be null');
        }
        $allowedValues = $this->getAccountIdentificationTypeCodeAllowableValues();
        if (!in_array($account_identification_type_code, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_identification_type_code', must be one of '%s'",
                    $account_identification_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_identification_type_code'] = $account_identification_type_code;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber(): ?string
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length. If this property is set to '-' it means that the account identification has been cleared.
     *
     * @return $this
     */
    public function setAccountNumber(?string $account_number): static
    {
        if (is_null($account_number)) {
            throw new InvalidArgumentException('non-nullable account_number cannot be null');
        }

        if ((!preg_match("/^[ -~]{11,15}$/", ObjectSerializer::toString($account_number)))) {
            throw new InvalidArgumentException("invalid value for \$account_number when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[ -~]{11,15}$/.");
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_servicer_bic
     *
     * @return string|null
     */
    public function getAccountServicerBic(): ?string
    {
        return $this->container['account_servicer_bic'];
    }

    /**
     * Sets account_servicer_bic
     *
     * @param string|null $account_servicer_bic Party that manages the account on behalf of the account owner, includes managing the registration and booking of entries on the account, calculating balances on the account and providing information about the account. If this property is set to 'ZZZZZZZZZZZ' it means that the servicer BIC has been cleared.
     *
     * @return $this
     */
    public function setAccountServicerBic(?string $account_servicer_bic): static
    {
        if (is_null($account_servicer_bic)) {
            throw new InvalidArgumentException('non-nullable account_servicer_bic cannot be null');
        }

        if ((!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/", ObjectSerializer::toString($account_servicer_bic)))) {
            throw new InvalidArgumentException("invalid value for \$account_servicer_bic when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$/.");
        }

        $this->container['account_servicer_bic'] = $account_servicer_bic;

        return $this;
    }

    /**
     * Gets full_legal_account_name
     *
     * @return string|null
     */
    public function getFullLegalAccountName(): ?string
    {
        return $this->container['full_legal_account_name'];
    }

    /**
     * Sets full_legal_account_name
     *
     * @param string|null $full_legal_account_name Full Legal Account Name recorded by the Account Server in their records. If this property is set to '-' it means that the full legal account name has been cleared.
     *
     * @return $this
     */
    public function setFullLegalAccountName(?string $full_legal_account_name): static
    {
        if (is_null($full_legal_account_name)) {
            throw new InvalidArgumentException('non-nullable full_legal_account_name cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,140}$/", ObjectSerializer::toString($full_legal_account_name)))) {
            throw new InvalidArgumentException("invalid value for \$full_legal_account_name when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[ -~]{1,140}$/.");
        }

        $this->container['full_legal_account_name'] = $full_legal_account_name;

        return $this;
    }

    /**
     * Gets party_identification
     *
     * @return string|null
     */
    public function getPartyIdentification(): ?string
    {
        return $this->container['party_identification'];
    }

    /**
     * Sets party_identification
     *
     * @param string|null $party_identification Unique and unambiguous identification of the party. If this property is set to '-' it means that the party identification has been cleared.
     *
     * @return $this
     */
    public function setPartyIdentification(?string $party_identification): static
    {
        if (is_null($party_identification)) {
            throw new InvalidArgumentException('non-nullable party_identification cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,35}$/", ObjectSerializer::toString($party_identification)))) {
            throw new InvalidArgumentException("invalid value for \$party_identification when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[ -~]{1,35}$/.");
        }

        $this->container['party_identification'] = $party_identification;

        return $this;
    }

    /**
     * Gets party_identification_type_code
     *
     * @return string|null
     */
    public function getPartyIdentificationTypeCode(): ?string
    {
        return $this->container['party_identification_type_code'];
    }

    /**
     * Sets party_identification_type_code
     *
     * @param string|null $party_identification_type_code Code indicating the identification type of the party, for example in the case of a private individual; passport, driver licence, or 100 point check, or in the case of an organisation; LEI, ACN, ABN. If this property is set to 'ZZZZ' it means that the party identification type code has been cleared. * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number * **PASSPORT_NUMBER**: Passport Number * **CUSTOMER_ID**: Customer Identification Number * **DRIVER_LICENSE_NUMBER**: Drivers License Number * **EMPLOYEE_ID**: Employee Identification Number * **NATIONAL_IDENTITY_NUMBER**: National Identity Number * **SOCIAL_SECURITY_NUMBER**: Social Security Number * **TAX_ID**: Tax Identification Number * **BANK_PARTY_ID**: Bank Party Identification * **CENTRAL_BANK_ID**: Central Bank Identification Number * **CLEARING_ID**: Clearing Identification Number * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number * **COUNTRY_ID_CODE**: Country Identification Code * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System * **GS1GLN_ID**: GS1GLN Identifier * **SIREN**: SIREN * **SIRET**: SIRET * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN) * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN) * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
     *
     * @return $this
     */
    public function setPartyIdentificationTypeCode(?string $party_identification_type_code): static
    {
        if (is_null($party_identification_type_code)) {
            throw new InvalidArgumentException('non-nullable party_identification_type_code cannot be null');
        }
        $allowedValues = $this->getPartyIdentificationTypeCodeAllowableValues();
        if (!in_array($party_identification_type_code, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'party_identification_type_code', must be one of '%s'",
                    $party_identification_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['party_identification_type_code'] = $party_identification_type_code;

        return $this;
    }

    /**
     * Gets party_name
     *
     * @return string|null
     */
    public function getPartyName(): ?string
    {
        return $this->container['party_name'];
    }

    /**
     * Sets party_name
     *
     * @param string|null $party_name Name by which the party is known and which is usually used to identify that party.
     *
     * @return $this
     */
    public function setPartyName(?string $party_name): static
    {
        if (is_null($party_name)) {
            throw new InvalidArgumentException('non-nullable party_name cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,140}$/", ObjectSerializer::toString($party_name)))) {
            throw new InvalidArgumentException("invalid value for \$party_name when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[ -~]{1,140}$/.");
        }

        $this->container['party_name'] = $party_name;

        return $this;
    }

    /**
     * Gets party_reference
     *
     * @return string|null
     */
    public function getPartyReference(): ?string
    {
        return $this->container['party_reference'];
    }

    /**
     * Sets party_reference
     *
     * @param string|null $party_reference Specifies underlying reference associated with the mandate as provided by party, for example Customer Reference, Customer Number, Membership Number, Subscription Number, or Name. If this property is set to '-' it means that the party reference has been cleared.
     *
     * @return $this
     */
    public function setPartyReference(?string $party_reference): static
    {
        if (is_null($party_reference)) {
            throw new InvalidArgumentException('non-nullable party_reference cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,35}$/", ObjectSerializer::toString($party_reference)))) {
            throw new InvalidArgumentException("invalid value for \$party_reference when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[ -~]{1,35}$/.");
        }

        $this->container['party_reference'] = $party_reference;

        return $this;
    }

    /**
     * Gets party_type
     *
     * @return string|null
     */
    public function getPartyType(): ?string
    {
        return $this->container['party_type'];
    }

    /**
     * Sets party_type
     *
     * @param string|null $party_type Identifies the type of a party. Once the party type has been set it is not possible to clear it through a mandate amendment. * **ORGANISATION**: Party is an organisation. * **PERSON**: Party is an private individual.
     *
     * @return $this
     */
    public function setPartyType(?string $party_type): static
    {
        if (is_null($party_type)) {
            throw new InvalidArgumentException('non-nullable party_type cannot be null');
        }
        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!in_array($party_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'party_type', must be one of '%s'",
                    $party_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['party_type'] = $party_type;

        return $this;
    }

    /**
     * Gets ultimate_party_name
     *
     * @return string|null
     */
    public function getUltimatePartyName(): ?string
    {
        return $this->container['ultimate_party_name'];
    }

    /**
     * Sets ultimate_party_name
     *
     * @param string|null $ultimate_party_name Name by which the ultimate party is known and which is usually used to identify that party.
     *
     * @return $this
     */
    public function setUltimatePartyName(?string $ultimate_party_name): static
    {
        if (is_null($ultimate_party_name)) {
            throw new InvalidArgumentException('non-nullable ultimate_party_name cannot be null');
        }

        if ((!preg_match("/^[ -~]{1,140}$/", ObjectSerializer::toString($ultimate_party_name)))) {
            throw new InvalidArgumentException("invalid value for \$ultimate_party_name when calling GetMandateActionsDetailsAmendmentDebtorInformationDto., must conform to the pattern /^[ -~]{1,140}$/.");
        }

        $this->container['ultimate_party_name'] = $ultimate_party_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


