<?php
/**
 * GenerateInboundNppTransactionRequestBody
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * GenerateInboundNppTransactionRequestBody Class Doc Comment
 *
 * @description Body of a request to insert an inbound NPP transaction.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GenerateInboundNppTransactionRequestBody implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GenerateInboundNppTransactionRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'amount' => 'float',
        'description' => 'string',
        'idempotency_key' => 'string',
        'receiver_account_number' => 'string',
        'receiver_bsb' => 'string',
        'receiver_name' => 'string',
        'reference' => 'string',
        'sender_account_number' => 'string',
        'sender_bsb' => 'string',
        'sender_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'amount' => null,
        'description' => null,
        'idempotency_key' => 'uuid',
        'receiver_account_number' => null,
        'receiver_bsb' => null,
        'receiver_name' => null,
        'reference' => null,
        'sender_account_number' => null,
        'sender_bsb' => null,
        'sender_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'description' => false,
        'idempotency_key' => false,
        'receiver_account_number' => false,
        'receiver_bsb' => false,
        'receiver_name' => false,
        'reference' => false,
        'sender_account_number' => false,
        'sender_bsb' => false,
        'sender_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'amount' => 'amount',
        'description' => 'description',
        'idempotency_key' => 'idempotencyKey',
        'receiver_account_number' => 'receiverAccountNumber',
        'receiver_bsb' => 'receiverBsb',
        'receiver_name' => 'receiverName',
        'reference' => 'reference',
        'sender_account_number' => 'senderAccountNumber',
        'sender_bsb' => 'senderBsb',
        'sender_name' => 'senderName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'amount' => 'setAmount',
        'description' => 'setDescription',
        'idempotency_key' => 'setIdempotencyKey',
        'receiver_account_number' => 'setReceiverAccountNumber',
        'receiver_bsb' => 'setReceiverBsb',
        'receiver_name' => 'setReceiverName',
        'reference' => 'setReference',
        'sender_account_number' => 'setSenderAccountNumber',
        'sender_bsb' => 'setSenderBsb',
        'sender_name' => 'setSenderName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'amount' => 'getAmount',
        'description' => 'getDescription',
        'idempotency_key' => 'getIdempotencyKey',
        'receiver_account_number' => 'getReceiverAccountNumber',
        'receiver_bsb' => 'getReceiverBsb',
        'receiver_name' => 'getReceiverName',
        'reference' => 'getReference',
        'sender_account_number' => 'getSenderAccountNumber',
        'sender_bsb' => 'getSenderBsb',
        'sender_name' => 'getSenderName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('receiver_account_number', $data ?? [], null);
        $this->setIfExists('receiver_bsb', $data ?? [], null);
        $this->setIfExists('receiver_name', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('sender_account_number', $data ?? [], null);
        $this->setIfExists('sender_bsb', $data ?? [], null);
        $this->setIfExists('sender_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['receiver_account_number'] === null) {
            $invalidProperties[] = "'receiver_account_number' can't be null";
        }
        if (!preg_match("/[0-9]{8}/", $this->container['receiver_account_number'])) {
            $invalidProperties[] = "invalid value for 'receiver_account_number', must be conform to the pattern /[0-9]{8}/.";
        }

        if ($this->container['receiver_bsb'] === null) {
            $invalidProperties[] = "'receiver_bsb' can't be null";
        }
        if (!preg_match("/[0-9]{6}/", $this->container['receiver_bsb'])) {
            $invalidProperties[] = "invalid value for 'receiver_bsb', must be conform to the pattern /[0-9]{6}/.";
        }

        if ($this->container['receiver_name'] === null) {
            $invalidProperties[] = "'receiver_name' can't be null";
        }
        if ($this->container['sender_account_number'] === null) {
            $invalidProperties[] = "'sender_account_number' can't be null";
        }
        if (!preg_match("/[0-9]{6,9}/", $this->container['sender_account_number'])) {
            $invalidProperties[] = "invalid value for 'sender_account_number', must be conform to the pattern /[0-9]{6,9}/.";
        }

        if ($this->container['sender_bsb'] === null) {
            $invalidProperties[] = "'sender_bsb' can't be null";
        }
        if (!preg_match("/[0-9]{6}/", $this->container['sender_bsb'])) {
            $invalidProperties[] = "invalid value for 'sender_bsb', must be conform to the pattern /[0-9]{6}/.";
        }

        if ($this->container['sender_name'] === null) {
            $invalidProperties[] = "'sender_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount(): float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Transaction amount.
     *
     * @return $this
     */
    public function setAmount(float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription(): string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Transaction description.
     *
     * @return $this
     */
    public function setDescription(string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey(): string
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Idempotency key to uniquely represent this request and prevent duplication.
     *
     * @return $this
     */
    public function setIdempotencyKey(string $idempotency_key): static
    {
        if (is_null($idempotency_key)) {
            throw new InvalidArgumentException('non-nullable idempotency_key cannot be null');
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets receiver_account_number
     *
     * @return string
     */
    public function getReceiverAccountNumber(): string
    {
        return $this->container['receiver_account_number'];
    }

    /**
     * Sets receiver_account_number
     *
     * @param string $receiver_account_number Receiving customer account number.
     *
     * @return $this
     */
    public function setReceiverAccountNumber(string $receiver_account_number): static
    {
        if (is_null($receiver_account_number)) {
            throw new InvalidArgumentException('non-nullable receiver_account_number cannot be null');
        }

        if ((!preg_match("/[0-9]{8}/", ObjectSerializer::toString($receiver_account_number)))) {
            throw new InvalidArgumentException("invalid value for \$receiver_account_number when calling GenerateInboundNppTransactionRequestBody., must conform to the pattern /[0-9]{8}/.");
        }

        $this->container['receiver_account_number'] = $receiver_account_number;

        return $this;
    }

    /**
     * Gets receiver_bsb
     *
     * @return string
     */
    public function getReceiverBsb(): string
    {
        return $this->container['receiver_bsb'];
    }

    /**
     * Sets receiver_bsb
     *
     * @param string $receiver_bsb Receiving customer BSB.
     *
     * @return $this
     */
    public function setReceiverBsb(string $receiver_bsb): static
    {
        if (is_null($receiver_bsb)) {
            throw new InvalidArgumentException('non-nullable receiver_bsb cannot be null');
        }

        if ((!preg_match("/[0-9]{6}/", ObjectSerializer::toString($receiver_bsb)))) {
            throw new InvalidArgumentException("invalid value for \$receiver_bsb when calling GenerateInboundNppTransactionRequestBody., must conform to the pattern /[0-9]{6}/.");
        }

        $this->container['receiver_bsb'] = $receiver_bsb;

        return $this;
    }

    /**
     * Gets receiver_name
     *
     * @return string
     */
    public function getReceiverName(): string
    {
        return $this->container['receiver_name'];
    }

    /**
     * Sets receiver_name
     *
     * @param string $receiver_name Receiving customer name.
     *
     * @return $this
     */
    public function setReceiverName(string $receiver_name): static
    {
        if (is_null($receiver_name)) {
            throw new InvalidArgumentException('non-nullable receiver_name cannot be null');
        }
        $this->container['receiver_name'] = $receiver_name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Optional transaction reference.
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets sender_account_number
     *
     * @return string
     */
    public function getSenderAccountNumber(): string
    {
        return $this->container['sender_account_number'];
    }

    /**
     * Sets sender_account_number
     *
     * @param string $sender_account_number Sender account number.
     *
     * @return $this
     */
    public function setSenderAccountNumber(string $sender_account_number): static
    {
        if (is_null($sender_account_number)) {
            throw new InvalidArgumentException('non-nullable sender_account_number cannot be null');
        }

        if ((!preg_match("/[0-9]{6,9}/", ObjectSerializer::toString($sender_account_number)))) {
            throw new InvalidArgumentException("invalid value for \$sender_account_number when calling GenerateInboundNppTransactionRequestBody., must conform to the pattern /[0-9]{6,9}/.");
        }

        $this->container['sender_account_number'] = $sender_account_number;

        return $this;
    }

    /**
     * Gets sender_bsb
     *
     * @return string
     */
    public function getSenderBsb(): string
    {
        return $this->container['sender_bsb'];
    }

    /**
     * Sets sender_bsb
     *
     * @param string $sender_bsb Sender BSB.
     *
     * @return $this
     */
    public function setSenderBsb(string $sender_bsb): static
    {
        if (is_null($sender_bsb)) {
            throw new InvalidArgumentException('non-nullable sender_bsb cannot be null');
        }

        if ((!preg_match("/[0-9]{6}/", ObjectSerializer::toString($sender_bsb)))) {
            throw new InvalidArgumentException("invalid value for \$sender_bsb when calling GenerateInboundNppTransactionRequestBody., must conform to the pattern /[0-9]{6}/.");
        }

        $this->container['sender_bsb'] = $sender_bsb;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName(): string
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name Sender name.
     *
     * @return $this
     */
    public function setSenderName(string $sender_name): static
    {
        if (is_null($sender_name)) {
            throw new InvalidArgumentException('non-nullable sender_name cannot be null');
        }
        $this->container['sender_name'] = $sender_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


