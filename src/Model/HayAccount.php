<?php
/**
 * HayAccount
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * HayAccount Class Doc Comment
 *
 * @description Details of an account
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HayAccount implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HayAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_hay_id' => 'string',
        'account_holder_id' => 'string',
        'account_holder_type' => 'string',
        'account_number' => 'string',
        'available_balance' => 'float',
        'blocked_by' => 'string',
        'bsb' => 'string',
        'closed_date_time_utc' => '\DateTime',
        'creation_date_time_utc' => '\DateTime',
        'currency' => 'string',
        'custom_data' => 'object',
        'held_balance' => 'float',
        'locked_balance' => 'float',
        'overdraft_balance' => 'float',
        'overdraft_limit' => 'float',
        'product_id' => 'string',
        'stacks_balance' => 'float',
        'status' => 'string',
        'technical_overdraft_balance' => 'float',
        'total_balance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_hay_id' => 'uuid',
        'account_holder_id' => 'uuid',
        'account_holder_type' => null,
        'account_number' => null,
        'available_balance' => null,
        'blocked_by' => null,
        'bsb' => null,
        'closed_date_time_utc' => 'date-time',
        'creation_date_time_utc' => 'date-time',
        'currency' => null,
        'custom_data' => null,
        'held_balance' => null,
        'locked_balance' => null,
        'overdraft_balance' => null,
        'overdraft_limit' => null,
        'product_id' => 'uuid',
        'stacks_balance' => null,
        'status' => null,
        'technical_overdraft_balance' => null,
        'total_balance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_hay_id' => false,
        'account_holder_id' => false,
        'account_holder_type' => false,
        'account_number' => false,
        'available_balance' => false,
        'blocked_by' => false,
        'bsb' => false,
        'closed_date_time_utc' => false,
        'creation_date_time_utc' => false,
        'currency' => false,
        'custom_data' => false,
        'held_balance' => false,
        'locked_balance' => false,
        'overdraft_balance' => false,
        'overdraft_limit' => false,
        'product_id' => false,
        'stacks_balance' => false,
        'status' => false,
        'technical_overdraft_balance' => false,
        'total_balance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_hay_id' => 'accountHayId',
        'account_holder_id' => 'accountHolderId',
        'account_holder_type' => 'accountHolderType',
        'account_number' => 'accountNumber',
        'available_balance' => 'availableBalance',
        'blocked_by' => 'blockedBy',
        'bsb' => 'bsb',
        'closed_date_time_utc' => 'closedDateTimeUtc',
        'creation_date_time_utc' => 'creationDateTimeUtc',
        'currency' => 'currency',
        'custom_data' => 'customData',
        'held_balance' => 'heldBalance',
        'locked_balance' => 'lockedBalance',
        'overdraft_balance' => 'overdraftBalance',
        'overdraft_limit' => 'overdraftLimit',
        'product_id' => 'productId',
        'stacks_balance' => 'stacksBalance',
        'status' => 'status',
        'technical_overdraft_balance' => 'technicalOverdraftBalance',
        'total_balance' => 'totalBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_hay_id' => 'setAccountHayId',
        'account_holder_id' => 'setAccountHolderId',
        'account_holder_type' => 'setAccountHolderType',
        'account_number' => 'setAccountNumber',
        'available_balance' => 'setAvailableBalance',
        'blocked_by' => 'setBlockedBy',
        'bsb' => 'setBsb',
        'closed_date_time_utc' => 'setClosedDateTimeUtc',
        'creation_date_time_utc' => 'setCreationDateTimeUtc',
        'currency' => 'setCurrency',
        'custom_data' => 'setCustomData',
        'held_balance' => 'setHeldBalance',
        'locked_balance' => 'setLockedBalance',
        'overdraft_balance' => 'setOverdraftBalance',
        'overdraft_limit' => 'setOverdraftLimit',
        'product_id' => 'setProductId',
        'stacks_balance' => 'setStacksBalance',
        'status' => 'setStatus',
        'technical_overdraft_balance' => 'setTechnicalOverdraftBalance',
        'total_balance' => 'setTotalBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_hay_id' => 'getAccountHayId',
        'account_holder_id' => 'getAccountHolderId',
        'account_holder_type' => 'getAccountHolderType',
        'account_number' => 'getAccountNumber',
        'available_balance' => 'getAvailableBalance',
        'blocked_by' => 'getBlockedBy',
        'bsb' => 'getBsb',
        'closed_date_time_utc' => 'getClosedDateTimeUtc',
        'creation_date_time_utc' => 'getCreationDateTimeUtc',
        'currency' => 'getCurrency',
        'custom_data' => 'getCustomData',
        'held_balance' => 'getHeldBalance',
        'locked_balance' => 'getLockedBalance',
        'overdraft_balance' => 'getOverdraftBalance',
        'overdraft_limit' => 'getOverdraftLimit',
        'product_id' => 'getProductId',
        'stacks_balance' => 'getStacksBalance',
        'status' => 'getStatus',
        'technical_overdraft_balance' => 'getTechnicalOverdraftBalance',
        'total_balance' => 'getTotalBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_HOLDER_TYPE_CUSTOMER = 'CUSTOMER';
    public const ACCOUNT_HOLDER_TYPE_GROUP = 'GROUP';
    public const BLOCKED_BY_CLIENT = 'CLIENT';
    public const BLOCKED_BY_PLATFORM = 'PLATFORM';
    public const CURRENCY_AED = 'AED';
    public const CURRENCY_AFN = 'AFN';
    public const CURRENCY_ALL = 'ALL';
    public const CURRENCY_AMD = 'AMD';
    public const CURRENCY_ANG = 'ANG';
    public const CURRENCY_AOA = 'AOA';
    public const CURRENCY_ARS = 'ARS';
    public const CURRENCY_AUD = 'AUD';
    public const CURRENCY_AWG = 'AWG';
    public const CURRENCY_AZN = 'AZN';
    public const CURRENCY_BAM = 'BAM';
    public const CURRENCY_BBD = 'BBD';
    public const CURRENCY_BDT = 'BDT';
    public const CURRENCY_BGN = 'BGN';
    public const CURRENCY_BHD = 'BHD';
    public const CURRENCY_BIF = 'BIF';
    public const CURRENCY_BMD = 'BMD';
    public const CURRENCY_BND = 'BND';
    public const CURRENCY_BOB = 'BOB';
    public const CURRENCY_BOV = 'BOV';
    public const CURRENCY_BRL = 'BRL';
    public const CURRENCY_BSD = 'BSD';
    public const CURRENCY_BTN = 'BTN';
    public const CURRENCY_BWP = 'BWP';
    public const CURRENCY_BYN = 'BYN';
    public const CURRENCY_BZD = 'BZD';
    public const CURRENCY_CAD = 'CAD';
    public const CURRENCY_CDF = 'CDF';
    public const CURRENCY_CHF = 'CHF';
    public const CURRENCY_CLP = 'CLP';
    public const CURRENCY_CNH = 'CNH';
    public const CURRENCY_CNY = 'CNY';
    public const CURRENCY_COP = 'COP';
    public const CURRENCY_CRC = 'CRC';
    public const CURRENCY_CUC = 'CUC';
    public const CURRENCY_CUP = 'CUP';
    public const CURRENCY_CVE = 'CVE';
    public const CURRENCY_CZK = 'CZK';
    public const CURRENCY_DJF = 'DJF';
    public const CURRENCY_DKK = 'DKK';
    public const CURRENCY_DOP = 'DOP';
    public const CURRENCY_DZD = 'DZD';
    public const CURRENCY_EGP = 'EGP';
    public const CURRENCY_ERN = 'ERN';
    public const CURRENCY_ETB = 'ETB';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_FJD = 'FJD';
    public const CURRENCY_FKP = 'FKP';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_GEL = 'GEL';
    public const CURRENCY_GHS = 'GHS';
    public const CURRENCY_GIP = 'GIP';
    public const CURRENCY_GMD = 'GMD';
    public const CURRENCY_GNF = 'GNF';
    public const CURRENCY_GTQ = 'GTQ';
    public const CURRENCY_GYD = 'GYD';
    public const CURRENCY_HKD = 'HKD';
    public const CURRENCY_HNL = 'HNL';
    public const CURRENCY_HRK = 'HRK';
    public const CURRENCY_HTG = 'HTG';
    public const CURRENCY_HUF = 'HUF';
    public const CURRENCY_IDR = 'IDR';
    public const CURRENCY_ILS = 'ILS';
    public const CURRENCY_INR = 'INR';
    public const CURRENCY_IQD = 'IQD';
    public const CURRENCY_IRR = 'IRR';
    public const CURRENCY_ISK = 'ISK';
    public const CURRENCY_JMD = 'JMD';
    public const CURRENCY_JOD = 'JOD';
    public const CURRENCY_JPY = 'JPY';
    public const CURRENCY_KES = 'KES';
    public const CURRENCY_KGS = 'KGS';
    public const CURRENCY_KHR = 'KHR';
    public const CURRENCY_KMF = 'KMF';
    public const CURRENCY_KPW = 'KPW';
    public const CURRENCY_KRW = 'KRW';
    public const CURRENCY_KWD = 'KWD';
    public const CURRENCY_KYD = 'KYD';
    public const CURRENCY_KZT = 'KZT';
    public const CURRENCY_LAK = 'LAK';
    public const CURRENCY_LBP = 'LBP';
    public const CURRENCY_LKR = 'LKR';
    public const CURRENCY_LRD = 'LRD';
    public const CURRENCY_LSL = 'LSL';
    public const CURRENCY_LYD = 'LYD';
    public const CURRENCY_MAD = 'MAD';
    public const CURRENCY_MDL = 'MDL';
    public const CURRENCY_MGA = 'MGA';
    public const CURRENCY_MKD = 'MKD';
    public const CURRENCY_MMK = 'MMK';
    public const CURRENCY_MNT = 'MNT';
    public const CURRENCY_MOP = 'MOP';
    public const CURRENCY_MRU = 'MRU';
    public const CURRENCY_MUR = 'MUR';
    public const CURRENCY_MVR = 'MVR';
    public const CURRENCY_MWK = 'MWK';
    public const CURRENCY_MXN = 'MXN';
    public const CURRENCY_MYR = 'MYR';
    public const CURRENCY_MZN = 'MZN';
    public const CURRENCY_NAD = 'NAD';
    public const CURRENCY_NGN = 'NGN';
    public const CURRENCY_NIO = 'NIO';
    public const CURRENCY_NOK = 'NOK';
    public const CURRENCY_NPR = 'NPR';
    public const CURRENCY_NZD = 'NZD';
    public const CURRENCY_OMR = 'OMR';
    public const CURRENCY_PAB = 'PAB';
    public const CURRENCY_PEN = 'PEN';
    public const CURRENCY_PGK = 'PGK';
    public const CURRENCY_PHP = 'PHP';
    public const CURRENCY_PKR = 'PKR';
    public const CURRENCY_PLN = 'PLN';
    public const CURRENCY_PYG = 'PYG';
    public const CURRENCY_QAR = 'QAR';
    public const CURRENCY_RON = 'RON';
    public const CURRENCY_RSD = 'RSD';
    public const CURRENCY_RUB = 'RUB';
    public const CURRENCY_RWF = 'RWF';
    public const CURRENCY_SAR = 'SAR';
    public const CURRENCY_SBD = 'SBD';
    public const CURRENCY_SCR = 'SCR';
    public const CURRENCY_SDG = 'SDG';
    public const CURRENCY_SEK = 'SEK';
    public const CURRENCY_SGD = 'SGD';
    public const CURRENCY_SHP = 'SHP';
    public const CURRENCY_SLL = 'SLL';
    public const CURRENCY_SOS = 'SOS';
    public const CURRENCY_SRD = 'SRD';
    public const CURRENCY_SSP = 'SSP';
    public const CURRENCY_STN = 'STN';
    public const CURRENCY_SVC = 'SVC';
    public const CURRENCY_SYP = 'SYP';
    public const CURRENCY_SZL = 'SZL';
    public const CURRENCY_THB = 'THB';
    public const CURRENCY_TJS = 'TJS';
    public const CURRENCY_TMT = 'TMT';
    public const CURRENCY_TND = 'TND';
    public const CURRENCY_TOP = 'TOP';
    public const CURRENCY__TRY = 'TRY';
    public const CURRENCY_TTD = 'TTD';
    public const CURRENCY_TWD = 'TWD';
    public const CURRENCY_TZS = 'TZS';
    public const CURRENCY_UAH = 'UAH';
    public const CURRENCY_UGX = 'UGX';
    public const CURRENCY_USD = 'USD';
    public const CURRENCY_UYU = 'UYU';
    public const CURRENCY_UZS = 'UZS';
    public const CURRENCY_VES = 'VES';
    public const CURRENCY_VND = 'VND';
    public const CURRENCY_VUV = 'VUV';
    public const CURRENCY_WST = 'WST';
    public const CURRENCY_XAF = 'XAF';
    public const CURRENCY_XCD = 'XCD';
    public const CURRENCY_XOF = 'XOF';
    public const CURRENCY_XPF = 'XPF';
    public const CURRENCY_YER = 'YER';
    public const CURRENCY_ZAR = 'ZAR';
    public const CURRENCY_ZMW = 'ZMW';
    public const CURRENCY_ZWL = 'ZWL';
    public const STATUS_PENDING_APPROVAL = 'PENDING_APPROVAL';
    public const STATUS_APPROVED = 'APPROVED';
    public const STATUS_ACTIVE = 'ACTIVE';
    public const STATUS_LOCKED = 'LOCKED';
    public const STATUS_DORMANT = 'DORMANT';
    public const STATUS_CLOSED = 'CLOSED';
    public const STATUS_ACTIVE_IN_ARREARS = 'ACTIVE_IN_ARREARS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountHolderTypeAllowableValues()
    {
        return [
            self::ACCOUNT_HOLDER_TYPE_CUSTOMER,
            self::ACCOUNT_HOLDER_TYPE_GROUP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockedByAllowableValues()
    {
        return [
            self::BLOCKED_BY_CLIENT,
            self::BLOCKED_BY_PLATFORM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_AED,
            self::CURRENCY_AFN,
            self::CURRENCY_ALL,
            self::CURRENCY_AMD,
            self::CURRENCY_ANG,
            self::CURRENCY_AOA,
            self::CURRENCY_ARS,
            self::CURRENCY_AUD,
            self::CURRENCY_AWG,
            self::CURRENCY_AZN,
            self::CURRENCY_BAM,
            self::CURRENCY_BBD,
            self::CURRENCY_BDT,
            self::CURRENCY_BGN,
            self::CURRENCY_BHD,
            self::CURRENCY_BIF,
            self::CURRENCY_BMD,
            self::CURRENCY_BND,
            self::CURRENCY_BOB,
            self::CURRENCY_BOV,
            self::CURRENCY_BRL,
            self::CURRENCY_BSD,
            self::CURRENCY_BTN,
            self::CURRENCY_BWP,
            self::CURRENCY_BYN,
            self::CURRENCY_BZD,
            self::CURRENCY_CAD,
            self::CURRENCY_CDF,
            self::CURRENCY_CHF,
            self::CURRENCY_CLP,
            self::CURRENCY_CNH,
            self::CURRENCY_CNY,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUC,
            self::CURRENCY_CUP,
            self::CURRENCY_CVE,
            self::CURRENCY_CZK,
            self::CURRENCY_DJF,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_ERN,
            self::CURRENCY_ETB,
            self::CURRENCY_EUR,
            self::CURRENCY_FJD,
            self::CURRENCY_FKP,
            self::CURRENCY_GBP,
            self::CURRENCY_GEL,
            self::CURRENCY_GHS,
            self::CURRENCY_GIP,
            self::CURRENCY_GMD,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HKD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HTG,
            self::CURRENCY_HUF,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_INR,
            self::CURRENCY_IQD,
            self::CURRENCY_IRR,
            self::CURRENCY_ISK,
            self::CURRENCY_JMD,
            self::CURRENCY_JOD,
            self::CURRENCY_JPY,
            self::CURRENCY_KES,
            self::CURRENCY_KGS,
            self::CURRENCY_KHR,
            self::CURRENCY_KMF,
            self::CURRENCY_KPW,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_KYD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_LKR,
            self::CURRENCY_LRD,
            self::CURRENCY_LSL,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_MDL,
            self::CURRENCY_MGA,
            self::CURRENCY_MKD,
            self::CURRENCY_MMK,
            self::CURRENCY_MNT,
            self::CURRENCY_MOP,
            self::CURRENCY_MRU,
            self::CURRENCY_MUR,
            self::CURRENCY_MVR,
            self::CURRENCY_MWK,
            self::CURRENCY_MXN,
            self::CURRENCY_MYR,
            self::CURRENCY_MZN,
            self::CURRENCY_NAD,
            self::CURRENCY_NGN,
            self::CURRENCY_NIO,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_NZD,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PGK,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_RON,
            self::CURRENCY_RSD,
            self::CURRENCY_RUB,
            self::CURRENCY_RWF,
            self::CURRENCY_SAR,
            self::CURRENCY_SBD,
            self::CURRENCY_SCR,
            self::CURRENCY_SDG,
            self::CURRENCY_SEK,
            self::CURRENCY_SGD,
            self::CURRENCY_SHP,
            self::CURRENCY_SLL,
            self::CURRENCY_SOS,
            self::CURRENCY_SRD,
            self::CURRENCY_SSP,
            self::CURRENCY_STN,
            self::CURRENCY_SVC,
            self::CURRENCY_SYP,
            self::CURRENCY_SZL,
            self::CURRENCY_THB,
            self::CURRENCY_TJS,
            self::CURRENCY_TMT,
            self::CURRENCY_TND,
            self::CURRENCY_TOP,
            self::CURRENCY__TRY,
            self::CURRENCY_TTD,
            self::CURRENCY_TWD,
            self::CURRENCY_TZS,
            self::CURRENCY_UAH,
            self::CURRENCY_UGX,
            self::CURRENCY_USD,
            self::CURRENCY_UYU,
            self::CURRENCY_UZS,
            self::CURRENCY_VES,
            self::CURRENCY_VND,
            self::CURRENCY_VUV,
            self::CURRENCY_WST,
            self::CURRENCY_XAF,
            self::CURRENCY_XCD,
            self::CURRENCY_XOF,
            self::CURRENCY_XPF,
            self::CURRENCY_YER,
            self::CURRENCY_ZAR,
            self::CURRENCY_ZMW,
            self::CURRENCY_ZWL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_APPROVED,
            self::STATUS_ACTIVE,
            self::STATUS_LOCKED,
            self::STATUS_DORMANT,
            self::STATUS_CLOSED,
            self::STATUS_ACTIVE_IN_ARREARS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_hay_id', $data ?? [], null);
        $this->setIfExists('account_holder_id', $data ?? [], null);
        $this->setIfExists('account_holder_type', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('blocked_by', $data ?? [], null);
        $this->setIfExists('bsb', $data ?? [], null);
        $this->setIfExists('closed_date_time_utc', $data ?? [], null);
        $this->setIfExists('creation_date_time_utc', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('custom_data', $data ?? [], null);
        $this->setIfExists('held_balance', $data ?? [], null);
        $this->setIfExists('locked_balance', $data ?? [], null);
        $this->setIfExists('overdraft_balance', $data ?? [], null);
        $this->setIfExists('overdraft_limit', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('stacks_balance', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('technical_overdraft_balance', $data ?? [], null);
        $this->setIfExists('total_balance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountHolderTypeAllowableValues();
        if (!is_null($this->container['account_holder_type']) && !in_array($this->container['account_holder_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_holder_type', must be one of '%s'",
                $this->container['account_holder_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBlockedByAllowableValues();
        if (!is_null($this->container['blocked_by']) && !in_array($this->container['blocked_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blocked_by', must be one of '%s'",
                $this->container['blocked_by'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['custom_data'] === null) {
            $invalidProperties[] = "'custom_data' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_hay_id
     *
     * @return string|null
     */
    public function getAccountHayId(): ?string
    {
        return $this->container['account_hay_id'];
    }

    /**
     * Sets account_hay_id
     *
     * @param string|null $account_hay_id Unique identifier (UUID) of the Account
     *
     * @return $this
     */
    public function setAccountHayId(?string $account_hay_id): static
    {
        if (is_null($account_hay_id)) {
            throw new InvalidArgumentException('non-nullable account_hay_id cannot be null');
        }
        $this->container['account_hay_id'] = $account_hay_id;

        return $this;
    }

    /**
     * Gets account_holder_id
     *
     * @return string|null
     */
    public function getAccountHolderId(): ?string
    {
        return $this->container['account_holder_id'];
    }

    /**
     * Sets account_holder_id
     *
     * @param string|null $account_holder_id Unique identifier (UUID) of the account holder
     *
     * @return $this
     */
    public function setAccountHolderId(?string $account_holder_id): static
    {
        if (is_null($account_holder_id)) {
            throw new InvalidArgumentException('non-nullable account_holder_id cannot be null');
        }
        $this->container['account_holder_id'] = $account_holder_id;

        return $this;
    }

    /**
     * Gets account_holder_type
     *
     * @return string|null
     */
    public function getAccountHolderType(): ?string
    {
        return $this->container['account_holder_type'];
    }

    /**
     * Sets account_holder_type
     *
     * @param string|null $account_holder_type The type of object that is the account holder. Possible values:  * **CUSTOMER**: The account holder is a Customer, accountHolderId contains a Customer ID  * **GROUP**: The account holder is a Group, accountHolderId contains a Group ID
     *
     * @return $this
     */
    public function setAccountHolderType(?string $account_holder_type): static
    {
        if (is_null($account_holder_type)) {
            throw new InvalidArgumentException('non-nullable account_holder_type cannot be null');
        }
        $allowedValues = $this->getAccountHolderTypeAllowableValues();
        if (!in_array($account_holder_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_holder_type', must be one of '%s'",
                    $account_holder_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_holder_type'] = $account_holder_type;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber(): ?string
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number, 5-9 digits in length
     *
     * @return $this
     */
    public function setAccountNumber(?string $account_number): static
    {
        if (is_null($account_number)) {
            throw new InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance(): ?float
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance Total balance available for use on Account. Funds that are held, locked and allocated to a Stack will not be available. Value to 2 decimal places.
     *
     * @return $this
     */
    public function setAvailableBalance(?float $available_balance): static
    {
        if (is_null($available_balance)) {
            throw new InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets blocked_by
     *
     * @return string|null
     */
    public function getBlockedBy(): ?string
    {
        return $this->container['blocked_by'];
    }

    /**
     * Sets blocked_by
     *
     * @param string|null $blocked_by The type of entity that is responsible for the blocked account. Possible values:  * **CLIENT**: The account was blocked by the Client.  * **PLATFORM**: The account was blocked by the Platform
     *
     * @return $this
     */
    public function setBlockedBy(?string $blocked_by): static
    {
        if (is_null($blocked_by)) {
            throw new InvalidArgumentException('non-nullable blocked_by cannot be null');
        }
        $allowedValues = $this->getBlockedByAllowableValues();
        if (!in_array($blocked_by, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blocked_by', must be one of '%s'",
                    $blocked_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blocked_by'] = $blocked_by;

        return $this;
    }

    /**
     * Gets bsb
     *
     * @return string|null
     */
    public function getBsb(): ?string
    {
        return $this->container['bsb'];
    }

    /**
     * Sets bsb
     *
     * @param string|null $bsb BSB (Bank State Branch) of Account, 6 digits in length
     *
     * @return $this
     */
    public function setBsb(?string $bsb): static
    {
        if (is_null($bsb)) {
            throw new InvalidArgumentException('non-nullable bsb cannot be null');
        }
        $this->container['bsb'] = $bsb;

        return $this;
    }

    /**
     * Gets closed_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getClosedDateTimeUtc(): ?\DateTime
    {
        return $this->container['closed_date_time_utc'];
    }

    /**
     * Sets closed_date_time_utc
     *
     * @param \DateTime|null $closed_date_time_utc DateTime in UTC format when the Account was closed
     *
     * @return $this
     */
    public function setClosedDateTimeUtc(?\DateTime $closed_date_time_utc): static
    {
        if (is_null($closed_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable closed_date_time_utc cannot be null');
        }
        $this->container['closed_date_time_utc'] = $closed_date_time_utc;

        return $this;
    }

    /**
     * Gets creation_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getCreationDateTimeUtc(): ?\DateTime
    {
        return $this->container['creation_date_time_utc'];
    }

    /**
     * Sets creation_date_time_utc
     *
     * @param \DateTime|null $creation_date_time_utc DateTime in UTC format when the Account was created
     *
     * @return $this
     */
    public function setCreationDateTimeUtc(?\DateTime $creation_date_time_utc): static
    {
        if (is_null($creation_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable creation_date_time_utc cannot be null');
        }
        $this->container['creation_date_time_utc'] = $creation_date_time_utc;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Account currency as three letter code as per <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">ISO 4217</a>.
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets custom_data
     *
     * @return object
     */
    public function getCustomData(): object
    {
        return $this->container['custom_data'];
    }

    /**
     * Sets custom_data
     *
     * @param object $custom_data Contains custom metadata stored with the Account
     *
     * @return $this
     */
    public function setCustomData(object $custom_data): static
    {
        if (is_null($custom_data)) {
            throw new InvalidArgumentException('non-nullable custom_data cannot be null');
        }
        $this->container['custom_data'] = $custom_data;

        return $this;
    }

    /**
     * Gets held_balance
     *
     * @return float|null
     */
    public function getHeldBalance(): ?float
    {
        return $this->container['held_balance'];
    }

    /**
     * Sets held_balance
     *
     * @param float|null $held_balance Total value of all authorised but not yet cleared transactions for all Cards on Account. Positive value to 2 decimal places.
     *
     * @return $this
     */
    public function setHeldBalance(?float $held_balance): static
    {
        if (is_null($held_balance)) {
            throw new InvalidArgumentException('non-nullable held_balance cannot be null');
        }
        $this->container['held_balance'] = $held_balance;

        return $this;
    }

    /**
     * Gets locked_balance
     *
     * @return float|null
     */
    public function getLockedBalance(): ?float
    {
        return $this->container['locked_balance'];
    }

    /**
     * Sets locked_balance
     *
     * @param float|null $locked_balance The value that has been locked and unavailable for use, typically as a result of an operations team action. Positive value to 2 decimal places.
     *
     * @return $this
     */
    public function setLockedBalance(?float $locked_balance): static
    {
        if (is_null($locked_balance)) {
            throw new InvalidArgumentException('non-nullable locked_balance cannot be null');
        }
        $this->container['locked_balance'] = $locked_balance;

        return $this;
    }

    /**
     * Gets overdraft_balance
     *
     * @return float|null
     */
    public function getOverdraftBalance(): ?float
    {
        return $this->container['overdraft_balance'];
    }

    /**
     * Sets overdraft_balance
     *
     * @param float|null $overdraft_balance Total value of overdraft used where an overdraft limit exists on the Account. Positive value to 2 decimal places.
     *
     * @return $this
     */
    public function setOverdraftBalance(?float $overdraft_balance): static
    {
        if (is_null($overdraft_balance)) {
            throw new InvalidArgumentException('non-nullable overdraft_balance cannot be null');
        }
        $this->container['overdraft_balance'] = $overdraft_balance;

        return $this;
    }

    /**
     * Gets overdraft_limit
     *
     * @return float|null
     */
    public function getOverdraftLimit(): ?float
    {
        return $this->container['overdraft_limit'];
    }

    /**
     * Sets overdraft_limit
     *
     * @param float|null $overdraft_limit Total value of the overdraft limit applied to Account. Positive value to 2 decimal places.
     *
     * @return $this
     */
    public function setOverdraftLimit(?float $overdraft_limit): static
    {
        if (is_null($overdraft_limit)) {
            throw new InvalidArgumentException('non-nullable overdraft_limit cannot be null');
        }
        $this->container['overdraft_limit'] = $overdraft_limit;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId(): ?string
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Unique identifier (UUID) of the Product
     *
     * @return $this
     */
    public function setProductId(?string $product_id): static
    {
        if (is_null($product_id)) {
            throw new InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets stacks_balance
     *
     * @return float|null
     */
    public function getStacksBalance(): ?float
    {
        return $this->container['stacks_balance'];
    }

    /**
     * Sets stacks_balance
     *
     * @param float|null $stacks_balance Total value current held against any Stack(s) on the Account. Positive value to 2 decimal places.
     *
     * @return $this
     */
    public function setStacksBalance(?float $stacks_balance): static
    {
        if (is_null($stacks_balance)) {
            throw new InvalidArgumentException('non-nullable stacks_balance cannot be null');
        }
        $this->container['stacks_balance'] = $stacks_balance;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Current Account status. Possible values:  * **ACTIVE**: Account is approved and has had a transactional action performed on it  * **ACTIVE_IN_ARREARS**: Account balance is in a negative position beyond the total deposits / overdraft limit on the Account  * **APPROVED**: Account is approved and ready for use  * **CLOSED**: Account is closed  * **DORMANT**: Account is dormant due to inactivity on Account for a specific period of time  * **LOCKED**: Account is blocked  * **PENDING_APPROVAL**: Account is created but not yet approved (Note: Accounts created through this API are automatically set as APPROVED)
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets technical_overdraft_balance
     *
     * @return float|null
     */
    public function getTechnicalOverdraftBalance(): ?float
    {
        return $this->container['technical_overdraft_balance'];
    }

    /**
     * Sets technical_overdraft_balance
     *
     * @param float|null $technical_overdraft_balance Total value that is in a negative position beyond the total deposits / overdraft limit on the Account. Value to 2 decimal places.
     *
     * @return $this
     */
    public function setTechnicalOverdraftBalance(?float $technical_overdraft_balance): static
    {
        if (is_null($technical_overdraft_balance)) {
            throw new InvalidArgumentException('non-nullable technical_overdraft_balance cannot be null');
        }
        $this->container['technical_overdraft_balance'] = $technical_overdraft_balance;

        return $this;
    }

    /**
     * Gets total_balance
     *
     * @return float|null
     */
    public function getTotalBalance(): ?float
    {
        return $this->container['total_balance'];
    }

    /**
     * Sets total_balance
     *
     * @param float|null $total_balance Total value of all funds on the Account (this amount will also include unused overdraft limit and Stacks, held and locked value). Value to 2 decimal places.
     *
     * @return $this
     */
    public function setTotalBalance(?float $total_balance): static
    {
        if (is_null($total_balance)) {
            throw new InvalidArgumentException('non-nullable total_balance cannot be null');
        }
        $this->container['total_balance'] = $total_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


