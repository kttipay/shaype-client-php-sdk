<?php
/**
 * ExternalSetAccountLimitResponse
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * ExternalSetAccountLimitResponse Class Doc Comment
 *
 * @description Response body for setting of the account limit.
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ExternalSetAccountLimitResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ExternalSetAccountLimitResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'account_id' => 'string',
        'limit_amount' => 'float',
        'limit_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'account_id' => 'uuid',
        'limit_amount' => null,
        'limit_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'limit_amount' => false,
        'limit_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'account_id' => 'accountId',
        'limit_amount' => 'limitAmount',
        'limit_type' => 'limitType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'account_id' => 'setAccountId',
        'limit_amount' => 'setLimitAmount',
        'limit_type' => 'setLimitType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'account_id' => 'getAccountId',
        'limit_amount' => 'getLimitAmount',
        'limit_type' => 'getLimitType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const LIMIT_TYPE_MAX_BALANCE = 'MAX_BALANCE';
    public const LIMIT_TYPE_MIN_BALANCE = 'MIN_BALANCE';
    public const LIMIT_TYPE_TOTAL_SPEND_PER_YEAR = 'TOTAL_SPEND_PER_YEAR';
    public const LIMIT_TYPE_ATM_WITHDRAWAL_PER_DAY = 'ATM_WITHDRAWAL_PER_DAY';
    public const LIMIT_TYPE_TOP_UP_PER_DAY = 'TOP_UP_PER_DAY';
    public const LIMIT_TYPE_CARD_TOP_UP_PER_DAY = 'CARD_TOP_UP_PER_DAY';
    public const LIMIT_TYPE_BPAY_TOP_UP_PER_DAY = 'BPAY_TOP_UP_PER_DAY';
    public const LIMIT_TYPE_BANK_TRANSFER_TOP_UP_PER_DAY = 'BANK_TRANSFER_TOP_UP_PER_DAY';
    public const LIMIT_TYPE_PAYMENT_TO_ACCOUNT_NUMBER = 'PAYMENT_TO_ACCOUNT_NUMBER';
    public const LIMIT_TYPE_PAYMENT_TO_PAY_ID = 'PAYMENT_TO_PAY_ID';
    public const LIMIT_TYPE_CARD_PAYMENTS_DAILY = 'CARD_PAYMENTS_DAILY';
    public const LIMIT_TYPE_SINGLE_CARD_TRANSACTION = 'SINGLE_CARD_TRANSACTION';
    public const LIMIT_TYPE_MIN_STACK_BALANCE = 'MIN_STACK_BALANCE';
    public const LIMIT_TYPE_DIRECT_DEBIT_PER_DAY = 'DIRECT_DEBIT_PER_DAY';
    public const LIMIT_TYPE_OVERDRAFT_PRODUCT_LIMIT = 'OVERDRAFT_PRODUCT_LIMIT';
    public const LIMIT_TYPE_BPAY_DAILY_LIMIT = 'BPAY_DAILY_LIMIT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLimitTypeAllowableValues()
    {
        return [
            self::LIMIT_TYPE_MAX_BALANCE,
            self::LIMIT_TYPE_MIN_BALANCE,
            self::LIMIT_TYPE_TOTAL_SPEND_PER_YEAR,
            self::LIMIT_TYPE_ATM_WITHDRAWAL_PER_DAY,
            self::LIMIT_TYPE_TOP_UP_PER_DAY,
            self::LIMIT_TYPE_CARD_TOP_UP_PER_DAY,
            self::LIMIT_TYPE_BPAY_TOP_UP_PER_DAY,
            self::LIMIT_TYPE_BANK_TRANSFER_TOP_UP_PER_DAY,
            self::LIMIT_TYPE_PAYMENT_TO_ACCOUNT_NUMBER,
            self::LIMIT_TYPE_PAYMENT_TO_PAY_ID,
            self::LIMIT_TYPE_CARD_PAYMENTS_DAILY,
            self::LIMIT_TYPE_SINGLE_CARD_TRANSACTION,
            self::LIMIT_TYPE_MIN_STACK_BALANCE,
            self::LIMIT_TYPE_DIRECT_DEBIT_PER_DAY,
            self::LIMIT_TYPE_OVERDRAFT_PRODUCT_LIMIT,
            self::LIMIT_TYPE_BPAY_DAILY_LIMIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('limit_amount', $data ?? [], null);
        $this->setIfExists('limit_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getLimitTypeAllowableValues();
        if (!is_null($this->container['limit_type']) && !in_array($this->container['limit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'limit_type', must be one of '%s'",
                $this->container['limit_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id Unique identifier (UUID) of the account.
     *
     * @return $this
     */
    public function setAccountId(?string $account_id): static
    {
        if (is_null($account_id)) {
            throw new InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets limit_amount
     *
     * @return float|null
     */
    public function getLimitAmount(): ?float
    {
        return $this->container['limit_amount'];
    }

    /**
     * Sets limit_amount
     *
     * @param float|null $limit_amount Custom Account limit value being applied
     *
     * @return $this
     */
    public function setLimitAmount(?float $limit_amount): static
    {
        if (is_null($limit_amount)) {
            throw new InvalidArgumentException('non-nullable limit_amount cannot be null');
        }
        $this->container['limit_amount'] = $limit_amount;

        return $this;
    }

    /**
     * Gets limit_type
     *
     * @return string|null
     */
    public function getLimitType(): ?string
    {
        return $this->container['limit_type'];
    }

    /**
     * Sets limit_type
     *
     * @param string|null $limit_type Account limits. Possible values:  * **ATM_WITHDRAWAL_PER_DAY**: Maximum value of ATM cash withdrawals  * **BANK_TRANSFER_TOP_UP_PER_DAY**: Maximum value of inbound cash transfers  * **BPAY_DAILY_LIMIT**: Maximum value of outgoing BPAY payments  * **BPAY_TOP_UP_PER_DAY**: Not currently used  * **CARD_PAYMENTS_DAILY**: Maximum value of Card payments  * **CARD_TOP_UP_PER_DAY**: Not currently used  * **DIRECT_DEBIT_PER_DAY**: Maximum value of outgoing direct debit transfers  * **MAX_BALANCE**: Maximum balance that can be held in Account  * **MIN_BALANCE**: Minimum balance that can be held in Account (Shaype use only)  * **MIN_STACK_BALANCE**: Minimum balance that can be held in Stack (Shaype use only)  * **OVERDRAFT_PRODUCT_LIMIT**: Maximum overdraft value that can be applied on Account  * **PAYMENT_TO_ACCOUNT_NUMBER**: Maximum value of individual outgoing cash transfer  * **PAYMENT_TO_PAY_ID**: Not currently used  * **SINGLE_CARD_TRANSACTION**: Maximum value of individual Card payment  * **TOTAL_SPEND_PER_YEAR**: Maximum value of outgoing transfers / payments on Account in a year  * **TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
     *
     * @return $this
     */
    public function setLimitType(?string $limit_type): static
    {
        if (is_null($limit_type)) {
            throw new InvalidArgumentException('non-nullable limit_type cannot be null');
        }
        $allowedValues = $this->getLimitTypeAllowableValues();
        if (!in_array($limit_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'limit_type', must be one of '%s'",
                    $limit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['limit_type'] = $limit_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


