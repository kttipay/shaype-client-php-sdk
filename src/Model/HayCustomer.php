<?php
/**
 * HayCustomer
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * HayCustomer Class Doc Comment
 *
 * @description Details of a customer
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HayCustomer implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HayCustomer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'address' => '\OpenAPI\Client\Model\Address',
        'approved_date_time_utc' => '\DateTime',
        'blocked_by' => 'string',
        'client_reference' => 'string',
        'closed_date_time_utc' => '\DateTime',
        'creation_date_time_utc' => '\DateTime',
        'customer_details' => '\OpenAPI\Client\Model\CustomerDetails',
        'customer_hay_id' => 'string',
        'device_id' => 'string',
        'device_os' => 'string',
        'email' => 'string',
        'firebase_token' => 'string',
        'identity_document_card_number' => 'string',
        'identity_document_issuing_country' => 'string',
        'identity_document_number' => 'string',
        'identity_document_region' => 'string',
        'identity_document_type' => 'string',
        'last_updated_date_time_utc' => '\DateTime',
        'phone_number' => '\OpenAPI\Client\Model\PhoneNumber',
        'status' => 'string',
        'tier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'address' => null,
        'approved_date_time_utc' => 'date-time',
        'blocked_by' => null,
        'client_reference' => null,
        'closed_date_time_utc' => 'date-time',
        'creation_date_time_utc' => 'date-time',
        'customer_details' => null,
        'customer_hay_id' => 'uuid',
        'device_id' => null,
        'device_os' => null,
        'email' => null,
        'firebase_token' => null,
        'identity_document_card_number' => null,
        'identity_document_issuing_country' => null,
        'identity_document_number' => null,
        'identity_document_region' => null,
        'identity_document_type' => null,
        'last_updated_date_time_utc' => 'date-time',
        'phone_number' => null,
        'status' => null,
        'tier' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'address' => false,
        'approved_date_time_utc' => false,
        'blocked_by' => false,
        'client_reference' => false,
        'closed_date_time_utc' => false,
        'creation_date_time_utc' => false,
        'customer_details' => false,
        'customer_hay_id' => false,
        'device_id' => false,
        'device_os' => false,
        'email' => false,
        'firebase_token' => false,
        'identity_document_card_number' => false,
        'identity_document_issuing_country' => false,
        'identity_document_number' => false,
        'identity_document_region' => false,
        'identity_document_type' => false,
        'last_updated_date_time_utc' => false,
        'phone_number' => false,
        'status' => false,
        'tier' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'address' => 'address',
        'approved_date_time_utc' => 'approvedDateTimeUtc',
        'blocked_by' => 'blockedBy',
        'client_reference' => 'clientReference',
        'closed_date_time_utc' => 'closedDateTimeUtc',
        'creation_date_time_utc' => 'creationDateTimeUtc',
        'customer_details' => 'customerDetails',
        'customer_hay_id' => 'customerHayId',
        'device_id' => 'deviceId',
        'device_os' => 'deviceOs',
        'email' => 'email',
        'firebase_token' => 'firebaseToken',
        'identity_document_card_number' => 'identityDocumentCardNumber',
        'identity_document_issuing_country' => 'identityDocumentIssuingCountry',
        'identity_document_number' => 'identityDocumentNumber',
        'identity_document_region' => 'identityDocumentRegion',
        'identity_document_type' => 'identityDocumentType',
        'last_updated_date_time_utc' => 'lastUpdatedDateTimeUtc',
        'phone_number' => 'phoneNumber',
        'status' => 'status',
        'tier' => 'tier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'address' => 'setAddress',
        'approved_date_time_utc' => 'setApprovedDateTimeUtc',
        'blocked_by' => 'setBlockedBy',
        'client_reference' => 'setClientReference',
        'closed_date_time_utc' => 'setClosedDateTimeUtc',
        'creation_date_time_utc' => 'setCreationDateTimeUtc',
        'customer_details' => 'setCustomerDetails',
        'customer_hay_id' => 'setCustomerHayId',
        'device_id' => 'setDeviceId',
        'device_os' => 'setDeviceOs',
        'email' => 'setEmail',
        'firebase_token' => 'setFirebaseToken',
        'identity_document_card_number' => 'setIdentityDocumentCardNumber',
        'identity_document_issuing_country' => 'setIdentityDocumentIssuingCountry',
        'identity_document_number' => 'setIdentityDocumentNumber',
        'identity_document_region' => 'setIdentityDocumentRegion',
        'identity_document_type' => 'setIdentityDocumentType',
        'last_updated_date_time_utc' => 'setLastUpdatedDateTimeUtc',
        'phone_number' => 'setPhoneNumber',
        'status' => 'setStatus',
        'tier' => 'setTier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'address' => 'getAddress',
        'approved_date_time_utc' => 'getApprovedDateTimeUtc',
        'blocked_by' => 'getBlockedBy',
        'client_reference' => 'getClientReference',
        'closed_date_time_utc' => 'getClosedDateTimeUtc',
        'creation_date_time_utc' => 'getCreationDateTimeUtc',
        'customer_details' => 'getCustomerDetails',
        'customer_hay_id' => 'getCustomerHayId',
        'device_id' => 'getDeviceId',
        'device_os' => 'getDeviceOs',
        'email' => 'getEmail',
        'firebase_token' => 'getFirebaseToken',
        'identity_document_card_number' => 'getIdentityDocumentCardNumber',
        'identity_document_issuing_country' => 'getIdentityDocumentIssuingCountry',
        'identity_document_number' => 'getIdentityDocumentNumber',
        'identity_document_region' => 'getIdentityDocumentRegion',
        'identity_document_type' => 'getIdentityDocumentType',
        'last_updated_date_time_utc' => 'getLastUpdatedDateTimeUtc',
        'phone_number' => 'getPhoneNumber',
        'status' => 'getStatus',
        'tier' => 'getTier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const BLOCKED_BY_CLIENT = 'CLIENT';
    public const BLOCKED_BY_PLATFORM = 'PLATFORM';
    public const DEVICE_OS_IOS = 'IOS';
    public const DEVICE_OS_ANDROID = 'ANDROID';
    public const IDENTITY_DOCUMENT_TYPE_DRIVING_LICENSE = 'DRIVING_LICENSE';
    public const IDENTITY_DOCUMENT_TYPE_PASSPORT = 'PASSPORT';
    public const STATUS_ACTIVE = 'ACTIVE';
    public const STATUS_INACTIVE = 'INACTIVE';
    public const STATUS_REJECTED = 'REJECTED';
    public const STATUS_BLOCKED = 'BLOCKED';
    public const STATUS_PENDING_APPROVAL = 'PENDING_APPROVAL';
    public const STATUS_REFERRED = 'REFERRED';
    public const TIER_FOUNDER = 'FOUNDER';
    public const TIER_STANDARD = 'STANDARD';
    public const TIER_PREMIUM = 'PREMIUM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockedByAllowableValues()
    {
        return [
            self::BLOCKED_BY_CLIENT,
            self::BLOCKED_BY_PLATFORM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceOsAllowableValues()
    {
        return [
            self::DEVICE_OS_IOS,
            self::DEVICE_OS_ANDROID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentityDocumentTypeAllowableValues()
    {
        return [
            self::IDENTITY_DOCUMENT_TYPE_DRIVING_LICENSE,
            self::IDENTITY_DOCUMENT_TYPE_PASSPORT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_REJECTED,
            self::STATUS_BLOCKED,
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_REFERRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTierAllowableValues()
    {
        return [
            self::TIER_FOUNDER,
            self::TIER_STANDARD,
            self::TIER_PREMIUM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('approved_date_time_utc', $data ?? [], null);
        $this->setIfExists('blocked_by', $data ?? [], null);
        $this->setIfExists('client_reference', $data ?? [], null);
        $this->setIfExists('closed_date_time_utc', $data ?? [], null);
        $this->setIfExists('creation_date_time_utc', $data ?? [], null);
        $this->setIfExists('customer_details', $data ?? [], null);
        $this->setIfExists('customer_hay_id', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('device_os', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('firebase_token', $data ?? [], null);
        $this->setIfExists('identity_document_card_number', $data ?? [], null);
        $this->setIfExists('identity_document_issuing_country', $data ?? [], null);
        $this->setIfExists('identity_document_number', $data ?? [], null);
        $this->setIfExists('identity_document_region', $data ?? [], null);
        $this->setIfExists('identity_document_type', $data ?? [], null);
        $this->setIfExists('last_updated_date_time_utc', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tier', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getBlockedByAllowableValues();
        if (!is_null($this->container['blocked_by']) && !in_array($this->container['blocked_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blocked_by', must be one of '%s'",
                $this->container['blocked_by'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceOsAllowableValues();
        if (!is_null($this->container['device_os']) && !in_array($this->container['device_os'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_os', must be one of '%s'",
                $this->container['device_os'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIdentityDocumentTypeAllowableValues();
        if (!is_null($this->container['identity_document_type']) && !in_array($this->container['identity_document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'identity_document_type', must be one of '%s'",
                $this->container['identity_document_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTierAllowableValues();
        if (!is_null($this->container['tier']) && !in_array($this->container['tier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tier', must be one of '%s'",
                $this->container['tier'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getAddress(): ?\OpenAPI\Client\Model\Address
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\Address|null $address address
     *
     * @return $this
     */
    public function setAddress(?\OpenAPI\Client\Model\Address $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets approved_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getApprovedDateTimeUtc(): ?\DateTime
    {
        return $this->container['approved_date_time_utc'];
    }

    /**
     * Sets approved_date_time_utc
     *
     * @param \DateTime|null $approved_date_time_utc DateTime in UTC format when the customer has been approved
     *
     * @return $this
     */
    public function setApprovedDateTimeUtc(?\DateTime $approved_date_time_utc): static
    {
        if (is_null($approved_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable approved_date_time_utc cannot be null');
        }
        $this->container['approved_date_time_utc'] = $approved_date_time_utc;

        return $this;
    }

    /**
     * Gets blocked_by
     *
     * @return string|null
     */
    public function getBlockedBy(): ?string
    {
        return $this->container['blocked_by'];
    }

    /**
     * Sets blocked_by
     *
     * @param string|null $blocked_by The type of entity that is responsible for the blocked customer. Possible values:  * **CLIENT**: The customer was blocked by the Client.  * **PLATFORM**: The customer was blocked by the Platform
     *
     * @return $this
     */
    public function setBlockedBy(?string $blocked_by): static
    {
        if (is_null($blocked_by)) {
            throw new InvalidArgumentException('non-nullable blocked_by cannot be null');
        }
        $allowedValues = $this->getBlockedByAllowableValues();
        if (!in_array($blocked_by, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blocked_by', must be one of '%s'",
                    $blocked_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blocked_by'] = $blocked_by;

        return $this;
    }

    /**
     * Gets client_reference
     *
     * @return string|null
     */
    public function getClientReference(): ?string
    {
        return $this->container['client_reference'];
    }

    /**
     * Sets client_reference
     *
     * @param string|null $client_reference Client reference associated with customer
     *
     * @return $this
     */
    public function setClientReference(?string $client_reference): static
    {
        if (is_null($client_reference)) {
            throw new InvalidArgumentException('non-nullable client_reference cannot be null');
        }
        $this->container['client_reference'] = $client_reference;

        return $this;
    }

    /**
     * Gets closed_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getClosedDateTimeUtc(): ?\DateTime
    {
        return $this->container['closed_date_time_utc'];
    }

    /**
     * Sets closed_date_time_utc
     *
     * @param \DateTime|null $closed_date_time_utc DateTime in UTC format when the Customer was closed
     *
     * @return $this
     */
    public function setClosedDateTimeUtc(?\DateTime $closed_date_time_utc): static
    {
        if (is_null($closed_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable closed_date_time_utc cannot be null');
        }
        $this->container['closed_date_time_utc'] = $closed_date_time_utc;

        return $this;
    }

    /**
     * Gets creation_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getCreationDateTimeUtc(): ?\DateTime
    {
        return $this->container['creation_date_time_utc'];
    }

    /**
     * Sets creation_date_time_utc
     *
     * @param \DateTime|null $creation_date_time_utc DateTime in UTC format when the Customer was created
     *
     * @return $this
     */
    public function setCreationDateTimeUtc(?\DateTime $creation_date_time_utc): static
    {
        if (is_null($creation_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable creation_date_time_utc cannot be null');
        }
        $this->container['creation_date_time_utc'] = $creation_date_time_utc;

        return $this;
    }

    /**
     * Gets customer_details
     *
     * @return \OpenAPI\Client\Model\CustomerDetails|null
     */
    public function getCustomerDetails(): ?\OpenAPI\Client\Model\CustomerDetails
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \OpenAPI\Client\Model\CustomerDetails|null $customer_details customer_details
     *
     * @return $this
     */
    public function setCustomerDetails(?\OpenAPI\Client\Model\CustomerDetails $customer_details): static
    {
        if (is_null($customer_details)) {
            throw new InvalidArgumentException('non-nullable customer_details cannot be null');
        }
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets customer_hay_id
     *
     * @return string|null
     */
    public function getCustomerHayId(): ?string
    {
        return $this->container['customer_hay_id'];
    }

    /**
     * Sets customer_hay_id
     *
     * @param string|null $customer_hay_id Unique identifier (UUID) of the Customer
     *
     * @return $this
     */
    public function setCustomerHayId(?string $customer_hay_id): static
    {
        if (is_null($customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable customer_hay_id cannot be null');
        }
        $this->container['customer_hay_id'] = $customer_hay_id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId(): ?string
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id Customer's device ID, typically UUID though format controlled by mobile OS (if a mobile app is available)
     *
     * @return $this
     */
    public function setDeviceId(?string $device_id): static
    {
        if (is_null($device_id)) {
            throw new InvalidArgumentException('non-nullable device_id cannot be null');
        }
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets device_os
     *
     * @return string|null
     */
    public function getDeviceOs(): ?string
    {
        return $this->container['device_os'];
    }

    /**
     * Sets device_os
     *
     * @param string|null $device_os Customer's device operating system (if a mobile app is available). Possible values:  * **IOS**  * **ANDROID**
     *
     * @return $this
     */
    public function setDeviceOs(?string $device_os): static
    {
        if (is_null($device_os)) {
            throw new InvalidArgumentException('non-nullable device_os cannot be null');
        }
        $allowedValues = $this->getDeviceOsAllowableValues();
        if (!in_array($device_os, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_os', must be one of '%s'",
                    $device_os,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_os'] = $device_os;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address of the Customer
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets firebase_token
     *
     * @return string|null
     */
    public function getFirebaseToken(): ?string
    {
        return $this->container['firebase_token'];
    }

    /**
     * Sets firebase_token
     *
     * @param string|null $firebase_token Customer's device firebase token (if a mobile app is available)
     *
     * @return $this
     */
    public function setFirebaseToken(?string $firebase_token): static
    {
        if (is_null($firebase_token)) {
            throw new InvalidArgumentException('non-nullable firebase_token cannot be null');
        }
        $this->container['firebase_token'] = $firebase_token;

        return $this;
    }

    /**
     * Gets identity_document_card_number
     *
     * @return string|null
     */
    public function getIdentityDocumentCardNumber(): ?string
    {
        return $this->container['identity_document_card_number'];
    }

    /**
     * Sets identity_document_card_number
     *
     * @param string|null $identity_document_card_number Optional identity document card number. Between 6 to 10 characters which can be either just numeric or alphanumeric characters based on the state. Should be specified for Driver's Licenses that provide it.
     *
     * @return $this
     */
    public function setIdentityDocumentCardNumber(?string $identity_document_card_number): static
    {
        if (is_null($identity_document_card_number)) {
            throw new InvalidArgumentException('non-nullable identity_document_card_number cannot be null');
        }
        $this->container['identity_document_card_number'] = $identity_document_card_number;

        return $this;
    }

    /**
     * Gets identity_document_issuing_country
     *
     * @return string|null
     */
    public function getIdentityDocumentIssuingCountry(): ?string
    {
        return $this->container['identity_document_issuing_country'];
    }

    /**
     * Sets identity_document_issuing_country
     *
     * @param string|null $identity_document_issuing_country Optional three-letter ISO country code of the customer's identity document issuing country
     *
     * @return $this
     */
    public function setIdentityDocumentIssuingCountry(?string $identity_document_issuing_country): static
    {
        if (is_null($identity_document_issuing_country)) {
            throw new InvalidArgumentException('non-nullable identity_document_issuing_country cannot be null');
        }
        $this->container['identity_document_issuing_country'] = $identity_document_issuing_country;

        return $this;
    }

    /**
     * Gets identity_document_number
     *
     * @return string|null
     */
    public function getIdentityDocumentNumber(): ?string
    {
        return $this->container['identity_document_number'];
    }

    /**
     * Sets identity_document_number
     *
     * @param string|null $identity_document_number Number of the Customer's identity document (if supplied)
     *
     * @return $this
     */
    public function setIdentityDocumentNumber(?string $identity_document_number): static
    {
        if (is_null($identity_document_number)) {
            throw new InvalidArgumentException('non-nullable identity_document_number cannot be null');
        }
        $this->container['identity_document_number'] = $identity_document_number;

        return $this;
    }

    /**
     * Gets identity_document_region
     *
     * @return string|null
     */
    public function getIdentityDocumentRegion(): ?string
    {
        return $this->container['identity_document_region'];
    }

    /**
     * Sets identity_document_region
     *
     * @param string|null $identity_document_region Optional identity document region, one of: NSW, QLD, SA, TAS, VIC, WA, ACT, NT. (uppercase only) Should be specified for Driver's Licenses.
     *
     * @return $this
     */
    public function setIdentityDocumentRegion(?string $identity_document_region): static
    {
        if (is_null($identity_document_region)) {
            throw new InvalidArgumentException('non-nullable identity_document_region cannot be null');
        }
        $this->container['identity_document_region'] = $identity_document_region;

        return $this;
    }

    /**
     * Gets identity_document_type
     *
     * @return string|null
     */
    public function getIdentityDocumentType(): ?string
    {
        return $this->container['identity_document_type'];
    }

    /**
     * Sets identity_document_type
     *
     * @param string|null $identity_document_type Type of Customer's identity document (if supplied). Possible values:  * **DRIVING_LICENSE**  * **PASSPORT**
     *
     * @return $this
     */
    public function setIdentityDocumentType(?string $identity_document_type): static
    {
        if (is_null($identity_document_type)) {
            throw new InvalidArgumentException('non-nullable identity_document_type cannot be null');
        }
        $allowedValues = $this->getIdentityDocumentTypeAllowableValues();
        if (!in_array($identity_document_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'identity_document_type', must be one of '%s'",
                    $identity_document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['identity_document_type'] = $identity_document_type;

        return $this;
    }

    /**
     * Gets last_updated_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDateTimeUtc(): ?\DateTime
    {
        return $this->container['last_updated_date_time_utc'];
    }

    /**
     * Sets last_updated_date_time_utc
     *
     * @param \DateTime|null $last_updated_date_time_utc DateTime in UTC format when the Customer was last updated
     *
     * @return $this
     */
    public function setLastUpdatedDateTimeUtc(?\DateTime $last_updated_date_time_utc): static
    {
        if (is_null($last_updated_date_time_utc)) {
            throw new InvalidArgumentException('non-nullable last_updated_date_time_utc cannot be null');
        }
        $this->container['last_updated_date_time_utc'] = $last_updated_date_time_utc;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return \OpenAPI\Client\Model\PhoneNumber|null
     */
    public function getPhoneNumber(): ?\OpenAPI\Client\Model\PhoneNumber
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param \OpenAPI\Client\Model\PhoneNumber|null $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber(?\OpenAPI\Client\Model\PhoneNumber $phone_number): static
    {
        if (is_null($phone_number)) {
            throw new InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Current Customer status. Possible values:  * **ACTIVE**: Customer is active  * **BLOCKED**: Customer is blocked  * **INACTIVE**: Customer is not active (closed)  * **PENDING_APPROVAL**: Customer is awaiting approval  * **REFERRED**: Customer is referred for further KYC checks  * **REJECTED**: Customer has been rejected
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tier
     *
     * @return string|null
     */
    public function getTier(): ?string
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param string|null $tier Customer tier, will be STANDARD unless additional tiers have been agreed as part of the product offering. Possible values:  * **FOUNDER**  * **STANDARD**  * **PREMIUM**
     *
     * @return $this
     */
    public function setTier(?string $tier): static
    {
        if (is_null($tier)) {
            throw new InvalidArgumentException('non-nullable tier cannot be null');
        }
        $allowedValues = $this->getTierAllowableValues();
        if (!in_array($tier, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tier', must be one of '%s'",
                    $tier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tier'] = $tier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


