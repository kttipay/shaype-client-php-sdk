<?php
/**
 * PaymentInstructionSummary
 *
 * PHP version 8.1
 *
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * B2B Operations API
 *
 * This application will be used by HaaS customers as an integration point with HAY Bank
 *
 * The version of the OpenAPI document: 0.0.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Client\ObjectSerializer;

/**
 * PaymentInstructionSummary Class Doc Comment
 *
 * @description Payment instruction list
 * @package  Shaype\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PaymentInstructionSummary implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PaymentInstructionSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'creation_date_time' => 'string',
        'instructed_amount' => 'float',
        'instruction_identification' => 'string',
        'transaction_status' => 'string',
        'transaction_status_reason_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'creation_date_time' => null,
        'instructed_amount' => null,
        'instruction_identification' => null,
        'transaction_status' => null,
        'transaction_status_reason_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'creation_date_time' => false,
        'instructed_amount' => false,
        'instruction_identification' => false,
        'transaction_status' => false,
        'transaction_status_reason_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'creation_date_time' => 'creationDateTime',
        'instructed_amount' => 'instructedAmount',
        'instruction_identification' => 'instructionIdentification',
        'transaction_status' => 'transactionStatus',
        'transaction_status_reason_code' => 'transactionStatusReasonCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'creation_date_time' => 'setCreationDateTime',
        'instructed_amount' => 'setInstructedAmount',
        'instruction_identification' => 'setInstructionIdentification',
        'transaction_status' => 'setTransactionStatus',
        'transaction_status_reason_code' => 'setTransactionStatusReasonCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'creation_date_time' => 'getCreationDateTime',
        'instructed_amount' => 'getInstructedAmount',
        'instruction_identification' => 'getInstructionIdentification',
        'transaction_status' => 'getTransactionStatus',
        'transaction_status_reason_code' => 'getTransactionStatusReasonCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_STATUS_RECV = 'RECV';
    public const TRANSACTION_STATUS_UNDV = 'UNDV';
    public const TRANSACTION_STATUS_SENT = 'SENT';
    public const TRANSACTION_STATUS_SAFD = 'SAFD';
    public const TRANSACTION_STATUS_ACCP = 'ACCP';
    public const TRANSACTION_STATUS_ACSP = 'ACSP';
    public const TRANSACTION_STATUS_ACSC = 'ACSC';
    public const TRANSACTION_STATUS_RJCT = 'RJCT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionStatusAllowableValues()
    {
        return [
            self::TRANSACTION_STATUS_RECV,
            self::TRANSACTION_STATUS_UNDV,
            self::TRANSACTION_STATUS_SENT,
            self::TRANSACTION_STATUS_SAFD,
            self::TRANSACTION_STATUS_ACCP,
            self::TRANSACTION_STATUS_ACSP,
            self::TRANSACTION_STATUS_ACSC,
            self::TRANSACTION_STATUS_RJCT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('creation_date_time', $data ?? [], null);
        $this->setIfExists('instructed_amount', $data ?? [], null);
        $this->setIfExists('instruction_identification', $data ?? [], null);
        $this->setIfExists('transaction_status', $data ?? [], null);
        $this->setIfExists('transaction_status_reason_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['creation_date_time'] === null) {
            $invalidProperties[] = "'creation_date_time' can't be null";
        }
        if (!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/", $this->container['creation_date_time'])) {
            $invalidProperties[] = "invalid value for 'creation_date_time', must be conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/.";
        }

        if ($this->container['instructed_amount'] === null) {
            $invalidProperties[] = "'instructed_amount' can't be null";
        }
        if ($this->container['instruction_identification'] === null) {
            $invalidProperties[] = "'instruction_identification' can't be null";
        }
        if (!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}I[0-9]{8}00[0-9]{12}[0-9a-zA-Z]$/", $this->container['instruction_identification'])) {
            $invalidProperties[] = "invalid value for 'instruction_identification', must be conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}I[0-9]{8}00[0-9]{12}[0-9a-zA-Z]$/.";
        }

        if ($this->container['transaction_status'] === null) {
            $invalidProperties[] = "'transaction_status' can't be null";
        }
        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!is_null($this->container['transaction_status']) && !in_array($this->container['transaction_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_status', must be one of '%s'",
                $this->container['transaction_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['transaction_status_reason_code']) && (mb_strlen($this->container['transaction_status_reason_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'transaction_status_reason_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['transaction_status_reason_code']) && (mb_strlen($this->container['transaction_status_reason_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_status_reason_code', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_date_time
     *
     * @return string
     */
    public function getCreationDateTime(): string
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time
     *
     * @param string $creation_date_time Date and time at which the message was created, UTC expressed without offset, i.e. YYYY-MM-DDThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setCreationDateTime(string $creation_date_time): static
    {
        if (is_null($creation_date_time)) {
            throw new InvalidArgumentException('non-nullable creation_date_time cannot be null');
        }

        if ((!preg_match("/^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/", ObjectSerializer::toString($creation_date_time)))) {
            throw new InvalidArgumentException("invalid value for \$creation_date_time when calling PaymentInstructionSummary., must conform to the pattern /^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.[0-9]{1,3})?(?:Z)$/.");
        }

        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets instructed_amount
     *
     * @return float
     */
    public function getInstructedAmount(): float
    {
        return $this->container['instructed_amount'];
    }

    /**
     * Sets instructed_amount
     *
     * @param float $instructed_amount Instructed amount
     *
     * @return $this
     */
    public function setInstructedAmount(float $instructed_amount): static
    {
        if (is_null($instructed_amount)) {
            throw new InvalidArgumentException('non-nullable instructed_amount cannot be null');
        }
        $this->container['instructed_amount'] = $instructed_amount;

        return $this;
    }

    /**
     * Gets instruction_identification
     *
     * @return string
     */
    public function getInstructionIdentification(): string
    {
        return $this->container['instruction_identification'];
    }

    /**
     * Sets instruction_identification
     *
     * @param string $instruction_identification Payment instruction identification.
     *
     * @return $this
     */
    public function setInstructionIdentification(string $instruction_identification): static
    {
        if (is_null($instruction_identification)) {
            throw new InvalidArgumentException('non-nullable instruction_identification cannot be null');
        }

        if ((!preg_match("/^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}I[0-9]{8}00[0-9]{12}[0-9a-zA-Z]$/", ObjectSerializer::toString($instruction_identification)))) {
            throw new InvalidArgumentException("invalid value for \$instruction_identification when calling PaymentInstructionSummary., must conform to the pattern /^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}I[0-9]{8}00[0-9]{12}[0-9a-zA-Z]$/.");
        }

        $this->container['instruction_identification'] = $instruction_identification;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus(): string
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status Transaction status: * **RECV**: Received * **UNDV**: Undelivered * **SENT**: Sent * **SAFD**: Store & Forward * **ACCP**: Accepted for clearance by Receiver * **ACSP**: Settlement aborted by NPP BI * **ACSC**: Accepted & Settled * **RJCT**: Rejected
     *
     * @return $this
     */
    public function setTransactionStatus(string $transaction_status): static
    {
        if (is_null($transaction_status)) {
            throw new InvalidArgumentException('non-nullable transaction_status cannot be null');
        }
        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!in_array($transaction_status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_status', must be one of '%s'",
                    $transaction_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets transaction_status_reason_code
     *
     * @return string|null
     */
    public function getTransactionStatusReasonCode(): ?string
    {
        return $this->container['transaction_status_reason_code'];
    }

    /**
     * Sets transaction_status_reason_code
     *
     * @param string|null $transaction_status_reason_code Reject reason code, defining the reason for the transaction status
     *
     * @return $this
     */
    public function setTransactionStatusReasonCode(?string $transaction_status_reason_code): static
    {
        if (is_null($transaction_status_reason_code)) {
            throw new InvalidArgumentException('non-nullable transaction_status_reason_code cannot be null');
        }
        if ((mb_strlen($transaction_status_reason_code) > 4)) {
            throw new InvalidArgumentException('invalid length for $transaction_status_reason_code when calling PaymentInstructionSummary., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($transaction_status_reason_code) < 1)) {
            throw new InvalidArgumentException('invalid length for $transaction_status_reason_code when calling PaymentInstructionSummary., must be bigger than or equal to 1.');
        }

        $this->container['transaction_status_reason_code'] = $transaction_status_reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


